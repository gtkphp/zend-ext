#!/usr/bin/php
<?php
/* $] ./generate --version=3
"3.22.30" */

/*
get all version of PHP
<php-src>$ git ls-remote --tags > /home/dev/Projects/php_tags.txt
$tags='';
$lines = file('/home/dev/Projects/php_tags.txt');
foreach($lines as $line) {
    if(preg_match('#refs/tags/(php-[4578]\.[0-9]+\.[0-9]+)$#', $line, $matches)) {
        $tags .= $matches[1] . "\n";
    }
}
file_put_contents('/home/dev/Projects/php_tags.txt', $tags);

exit();*/

require_once __DIR__ . '/../vendor/autoload.php';

use Zend\Ext\Services\CodeGenerator;
use Zend\Ext\Services\DocBook\Glib as GlibDocBook;
use Zend\Ext\Services\DocBook\Cairo as CairoDocBook;
use Zend\Ext\Services\DocBook\Gtk as GtkDocBook;
use Zend\Ext\Services\SourceCode\Glib as GlibSourceCode;
use Zend\Ext\Services\SourceCode\Gtk as GtkSourceCode;

define('APP_DIR', realpath(__DIR__.'/..'));

$tag = '2.56.4';
$log_dir = APP_DIR."/log/glib-$tag";
$tmp_dir = APP_DIR.'/tmp';
$output_dir = APP_DIR.'/output';
$log = $log_dir.'/log.txt';

`mkdir -p $log_dir`;
`mkdir -p $output_dir`;
`mkdir -p $output_dir/API`;
//`chmod u+w $log_dir`;


`touch $log`;
//`touch $output_dir/API/GHashTable.php`;
//`touch $output_dir/g-hash-table.c`;


`echo "Starting..." > $log`;

//`echo "Add log" >> $log`;
//`git clone https://github.com/GNOME/glib.git > $log`;
//`git checkout tags/$tag -b <branch>`

/**
$src_dir = '/home/dev/Projects/glib';
$build_dir = '/home/dev/Projects/glib-build-doc';
$sourceCode = new GlibSourceCode($src_dir, $build_dir);
$sourceCode->addBlackList(array('STRUCT'=>array('utimbuf')));
$sourceCode->loadTypes();

$docBook = new GlibDocBook();
$docBook->addSourceCode($sourceCode);



$generator = CodeGenerator::Factory('C/Source/Glib', 'Glib');
$generator->setDocBook($docBook);
$generator->save($output_dir);

$generator = CodeGenerator::Factory('C/Header/Glib', 'Glib');
$generator->setDocBook($docBook);
$generator->save($output_dir);
**/

$src_dir = '/home/dev/Projects/gtk';
$build_dir = '/home/dev/Projects/gtk-build-doc';
$sourceCode = new GtkSourceCode($src_dir, $build_dir);
$sourceCode->addBlackList(array('STRUCT'=>array('utimbuf')));
$sourceCode->loadTypes('/home/dev/Projects/glib-build-doc/docs/reference/glib/glib-decl.txt');
$sourceCode->loadTypes('/home/dev/Projects/glib-build-doc/docs/reference/gobject/gobject-decl.txt');// depend on glib-decl.txt

$sourceCode->loadTypes('/home/dev/Projects/cairo/doc/public/cairo-decl.txt');// depend on glib-decl.txt

//gdk3-decl.txt fixed by
$sourceCode->loadTypes('/home/dev/Documents/gtk-test.txt');
///$sourceCode->loadTypes('/home/dev/Projects/gtk-build-doc/docs/reference/gdk/gdk3-decl.txt');// depend on cairo-decl.txt
//$sourceCode->loadTypes('/home/dev/Projects/gtkphp/zend-ext/data/gtk3-decl.txt');

//$sourceCode->loadTypes('/home/dev/Projets/zend-ext/data/gtk3-decl.txt');
$sourceCode->loadTypes('/home/dev/Projects/gtk-build-doc/docs/reference/gtk/gtk3-decl.txt');

//var_dump($sourceCode->data);
//print_r($sourceCode->getStruct('GList'));

//print_r(array_keys($sourceCode->data['TYPEDEF']));
//print_r($sourceCode->getProto('GTypePluginCompleteInterfaceInfo'));
//print_r($sourceCode->getStruct('GInterfaceInfo'));
//print_r($sourceCode->getStruct('GtkWidgetClass'));


//print_r($sourceCode->data['TYPEDEF']['GType']);
//print_r($sourceCode->getStruct('GType'));
//print_r($sourceCode->getStruct('GtkWidgetClass'));
//print_r($sourceCode->getStruct('GtkContainer'));
//print_r($sourceCode->getStruct('GtkBin'));
//print_r($sourceCode->getStruct('GtkWindow'));

if (False) {
    $docBook = new CairoDocBook();
    $docBook->addSourceCode($sourceCode);

    //$generator = CodeGenerator::Factory('C/Header/Glib', 'Glib');
    $generator = CodeGenerator::Factory('C/Source/Glib', 'Glib');
    $generator->setDocBook($docBook);
    $generator->save($output_dir);
} else {
    $docBook = new GtkDocBook();
    $docBook->addSourceCode($sourceCode);

    $generator = CodeGenerator::Factory('C/Header/Glib', 'Glib');
    //$generator = CodeGenerator::Factory('C/Source/Glib', 'Glib');
    $generator->setDocBook($docBook);
    $generator->save($output_dir);

}



// Output php-doc
// Output php-x.x.x API
// Output php-x.x.x Wrapper
// Output zend_code_extension
