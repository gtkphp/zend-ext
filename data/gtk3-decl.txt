<MACRO>
<NAME>GTK_TYPE_ABOUT_DIALOG</NAME>
#define GTK_TYPE_ABOUT_DIALOG            (gtk_about_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ABOUT_DIALOG</NAME>
#define GTK_ABOUT_DIALOG(object)         (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_ABOUT_DIALOG, GtkAboutDialog))
</MACRO>
<MACRO>
<NAME>GTK_ABOUT_DIALOG_CLASS</NAME>
#define GTK_ABOUT_DIALOG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ABOUT_DIALOG, GtkAboutDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ABOUT_DIALOG</NAME>
#define GTK_IS_ABOUT_DIALOG(object)      (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_ABOUT_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_ABOUT_DIALOG_CLASS</NAME>
#define GTK_IS_ABOUT_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ABOUT_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_ABOUT_DIALOG_GET_CLASS</NAME>
#define GTK_ABOUT_DIALOG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ABOUT_DIALOG, GtkAboutDialogClass))
</MACRO>
<ENUM>
<NAME>GtkLicense</NAME>
typedef enum {
  GTK_LICENSE_UNKNOWN,
  GTK_LICENSE_CUSTOM,

  GTK_LICENSE_GPL_2_0,
  GTK_LICENSE_GPL_3_0,

  GTK_LICENSE_LGPL_2_1,
  GTK_LICENSE_LGPL_3_0,

  GTK_LICENSE_BSD,
  GTK_LICENSE_MIT_X11,

  GTK_LICENSE_ARTISTIC,

  GTK_LICENSE_GPL_2_0_ONLY,
  GTK_LICENSE_GPL_3_0_ONLY,
  GTK_LICENSE_LGPL_2_1_ONLY,
  GTK_LICENSE_LGPL_3_0_ONLY,

  GTK_LICENSE_AGPL_3_0,
  GTK_LICENSE_AGPL_3_0_ONLY
} GtkLicense;
</ENUM>
<STRUCT>
<NAME>GtkAboutDialog</NAME>
struct _GtkAboutDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkAboutDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAboutDialogClass</NAME>
struct _GtkAboutDialogClass
{
  GtkDialogClass parent_class;

  gboolean (*activate_link) (GtkAboutDialog *dialog,
                             const gchar    *uri);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_about_dialog_get_type</NAME>
<RETURNS>GType                   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_new</NAME>
<RETURNS>GtkWidget              *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_show_about_dialog</NAME>
<RETURNS>void                    </RETURNS>
GtkWindow       *parent, const gchar     *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_program_name</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_program_name</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_version</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_version</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *version
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_copyright</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_copyright</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *copyright
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_comments</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_comments</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *comments
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_license</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_license</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *license
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_license_type</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, GtkLicense       license_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_license_type</NAME>
<RETURNS>GtkLicense              </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_wrap_license</NAME>
<RETURNS>gboolean                </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_wrap_license</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, gboolean         wrap_license
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_website</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_website</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *website
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_website_label</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_website_label</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *website_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_authors</NAME>
<RETURNS>const gchar * const *</RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_authors</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar    **authors
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_documenters</NAME>
<RETURNS>const gchar * const *</RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_documenters</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar    **documenters
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_artists</NAME>
<RETURNS>const gchar * const *</RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_artists</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar    **artists
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_translator_credits</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_translator_credits</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *translator_credits
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_logo</NAME>
<RETURNS>GdkPixbuf              *</RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_logo</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, GdkPixbuf       *logo
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_get_logo_icon_name</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkAboutDialog  *about
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_set_logo_icon_name</NAME>
<RETURNS>void                    </RETURNS>
GtkAboutDialog  *about, const gchar     *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_about_dialog_add_credit_section</NAME>
<RETURNS>void                   </RETURNS>
GtkAboutDialog  *about, const gchar     *section_name, const gchar    **people
</FUNCTION>
<STRUCT>
<NAME>GtkAboutDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACCEL_GROUP</NAME>
#define GTK_TYPE_ACCEL_GROUP              (gtk_accel_group_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_GROUP</NAME>
#define GTK_ACCEL_GROUP(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_ACCEL_GROUP, GtkAccelGroup))
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_GROUP_CLASS</NAME>
#define GTK_ACCEL_GROUP_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCEL_GROUP, GtkAccelGroupClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCEL_GROUP</NAME>
#define GTK_IS_ACCEL_GROUP(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_ACCEL_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCEL_GROUP_CLASS</NAME>
#define GTK_IS_ACCEL_GROUP_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCEL_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_GROUP_GET_CLASS</NAME>
#define GTK_ACCEL_GROUP_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ACCEL_GROUP, GtkAccelGroupClass))
</MACRO>
<ENUM>
<NAME>GtkAccelFlags</NAME>
typedef enum
{
  GTK_ACCEL_VISIBLE        = 1 << 0,
  GTK_ACCEL_LOCKED         = 1 << 1,
  GTK_ACCEL_MASK           = 0x07
} GtkAccelFlags;
</ENUM>
<USER_FUNCTION>
<NAME>GtkAccelGroupActivate</NAME>
<RETURNS>gboolean </RETURNS>
GtkAccelGroup  *accel_group,
					   GObject        *acceleratable,
					   guint           keyval,
					   GdkModifierType modifier
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkAccelGroupFindFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkAccelKey    *key,
					   GClosure       *closure,
					   gpointer        data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkAccelGroup</NAME>
struct _GtkAccelGroup
{
  GObject               parent;
  GtkAccelGroupPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAccelGroupClass</NAME>
struct _GtkAccelGroupClass
{
  GObjectClass parent_class;

  /*< public >*/

  void	(*accel_changed)	(GtkAccelGroup	*accel_group,
				 guint           keyval,
				 GdkModifierType modifier,
				 GClosure       *accel_closure);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GtkAccelKey</NAME>
struct _GtkAccelKey
{
  guint           accel_key;
  GdkModifierType accel_mods;
  guint           accel_flags : 16;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_accel_group_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_new</NAME>
<RETURNS>GtkAccelGroup * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_get_is_locked</NAME>
<RETURNS>gboolean        </RETURNS>
GtkAccelGroup  *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_get_modifier_mask</NAME>
<RETURNS>GdkModifierType</RETURNS>
GtkAccelGroup  *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_lock</NAME>
<RETURNS>void 	       </RETURNS>
GtkAccelGroup  *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_unlock</NAME>
<RETURNS>void 	       </RETURNS>
GtkAccelGroup  *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_connect</NAME>
<RETURNS>void 	       </RETURNS>
GtkAccelGroup  *accel_group, guint	   accel_key, GdkModifierType accel_mods, GtkAccelFlags   accel_flags, GClosure	  *closure
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_connect_by_path</NAME>
<RETURNS>void            </RETURNS>
GtkAccelGroup  *accel_group, const gchar	  *accel_path, GClosure	  *closure
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_disconnect</NAME>
<RETURNS>gboolean        </RETURNS>
GtkAccelGroup  *accel_group, GClosure	  *closure
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_disconnect_key</NAME>
<RETURNS>gboolean        </RETURNS>
GtkAccelGroup  *accel_group, guint	   accel_key, GdkModifierType accel_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_activate</NAME>
<RETURNS>gboolean        </RETURNS>
GtkAccelGroup   *accel_group, GQuark	   accel_quark, GObject	  *acceleratable, guint	   accel_key, GdkModifierType accel_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_groups_activate</NAME>
<RETURNS>gboolean         </RETURNS>
GObject	*object, guint		 accel_key, GdkModifierType accel_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_groups_from_object</NAME>
<RETURNS>GSList *	        </RETURNS>
GObject	*object
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_find</NAME>
<RETURNS>GtkAccelKey *	</RETURNS>
GtkAccelGroup	      *accel_group, GtkAccelGroupFindFunc find_func, gpointer              data
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_from_accel_closure</NAME>
<RETURNS>GtkAccelGroup *	</RETURNS>
GClosure    *closure
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_valid</NAME>
<RETURNS>gboolean  </RETURNS>
guint	        keyval, GdkModifierType  modifiers
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_parse</NAME>
<RETURNS>void 	 </RETURNS>
const gchar     *accelerator, guint	       *accelerator_key, GdkModifierType *accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_parse_with_keycode</NAME>
<RETURNS>void  </RETURNS>
const gchar     *accelerator, guint           *accelerator_key, guint          **accelerator_codes, GdkModifierType *accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_name</NAME>
<RETURNS>gchar *	 </RETURNS>
guint	        accelerator_key, GdkModifierType  accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_name_with_keycode</NAME>
<RETURNS>gchar *	 </RETURNS>
GdkDisplay      *display, guint            accelerator_key, guint            keycode, GdkModifierType  accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_get_label</NAME>
<RETURNS>gchar *   </RETURNS>
guint           accelerator_key, GdkModifierType accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_get_label_with_keycode</NAME>
<RETURNS>gchar *   </RETURNS>
GdkDisplay      *display, guint            accelerator_key, guint            keycode, GdkModifierType  accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_set_default_mod_mask</NAME>
<RETURNS>void 	 </RETURNS>
GdkModifierType  default_mod_mask
</FUNCTION>
<FUNCTION>
<NAME>gtk_accelerator_get_default_mod_mask</NAME>
<RETURNS>GdkModifierType</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_group_query</NAME>
<RETURNS>GtkAccelGroupEntry *	</RETURNS>
GtkAccelGroup	*accel_group, guint		 accel_key, GdkModifierType accel_mods, guint          *n_entries
</FUNCTION>
<STRUCT>
<NAME>GtkAccelGroupEntry</NAME>
struct _GtkAccelGroupEntry
{
  GtkAccelKey  key;
  GClosure    *closure;
  GQuark       accel_path_quark;
};
</STRUCT>
<STRUCT>
<NAME>GtkAccelGroupPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACCEL_LABEL</NAME>
#define GTK_TYPE_ACCEL_LABEL		(gtk_accel_label_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_LABEL</NAME>
#define GTK_ACCEL_LABEL(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabel))
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_LABEL_CLASS</NAME>
#define GTK_ACCEL_LABEL_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCEL_LABEL, GtkAccelLabelClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCEL_LABEL</NAME>
#define GTK_IS_ACCEL_LABEL(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ACCEL_LABEL))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCEL_LABEL_CLASS</NAME>
#define GTK_IS_ACCEL_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCEL_LABEL))
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_LABEL_GET_CLASS</NAME>
#define GTK_ACCEL_LABEL_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ACCEL_LABEL, GtkAccelLabelClass))
</MACRO>
<STRUCT>
<NAME>GtkAccelLabel</NAME>
struct _GtkAccelLabel
{
  GtkLabel label;
  GtkAccelLabelPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAccelLabelClass</NAME>
struct _GtkAccelLabelClass
{
  GtkLabelClass	 parent_class;

  gchar		*signal_quote1;
  gchar		*signal_quote2;
  gchar		*mod_name_shift;
  gchar		*mod_name_control;
  gchar		*mod_name_alt;
  gchar		*mod_separator;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_accel_label_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar   *string
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_get_accel_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkAccelLabel *accel_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_get_accel_width</NAME>
<RETURNS>guint 	   </RETURNS>
GtkAccelLabel *accel_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_set_accel_widget</NAME>
<RETURNS>void 	   </RETURNS>
GtkAccelLabel *accel_label, GtkWidget	    *accel_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_set_accel_closure</NAME>
<RETURNS>void 	   </RETURNS>
GtkAccelLabel *accel_label, GClosure	    *accel_closure
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_refetch</NAME>
<RETURNS>gboolean    </RETURNS>
GtkAccelLabel *accel_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_set_accel</NAME>
<RETURNS>void        </RETURNS>
GtkAccelLabel   *accel_label, guint            accelerator_key, GdkModifierType  accelerator_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_label_get_accel</NAME>
<RETURNS>void        </RETURNS>
GtkAccelLabel   *accel_label, guint           *accelerator_key, GdkModifierType *accelerator_mods
</FUNCTION>
<STRUCT>
<NAME>GtkAccelLabelPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACCEL_MAP</NAME>
#define GTK_TYPE_ACCEL_MAP                (gtk_accel_map_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_MAP</NAME>
#define GTK_ACCEL_MAP(accel_map)	  (G_TYPE_CHECK_INSTANCE_CAST ((accel_map), GTK_TYPE_ACCEL_MAP, GtkAccelMap))
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_MAP_CLASS</NAME>
#define GTK_ACCEL_MAP_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCEL_MAP, GtkAccelMapClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCEL_MAP</NAME>
#define GTK_IS_ACCEL_MAP(accel_map)	  (G_TYPE_CHECK_INSTANCE_TYPE ((accel_map), GTK_TYPE_ACCEL_MAP))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCEL_MAP_CLASS</NAME>
#define GTK_IS_ACCEL_MAP_CLASS(klass)	  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCEL_MAP))
</MACRO>
<MACRO>
<NAME>GTK_ACCEL_MAP_GET_CLASS</NAME>
#define GTK_ACCEL_MAP_GET_CLASS(obj)      (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ACCEL_MAP, GtkAccelMapClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkAccelMapForeach</NAME>
<RETURNS>void </RETURNS>
gpointer	 data,
						 const gchar	*accel_path,
						 guint           accel_key,
						 GdkModifierType accel_mods,
						 gboolean	 changed
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_add_entry</NAME>
<RETURNS>void 	   </RETURNS>
const gchar		*accel_path, guint			 accel_key, GdkModifierType         accel_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_lookup_entry</NAME>
<RETURNS>gboolean    </RETURNS>
const gchar		*accel_path, GtkAccelKey		*key
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_change_entry</NAME>
<RETURNS>gboolean    </RETURNS>
const gchar		*accel_path, guint			 accel_key, GdkModifierType	 accel_mods, gboolean		 replace
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_load</NAME>
<RETURNS>void 	   </RETURNS>
const gchar		*file_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_save</NAME>
<RETURNS>void 	   </RETURNS>
const gchar		*file_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_foreach</NAME>
<RETURNS>void 	   </RETURNS>
gpointer		 data, GtkAccelMapForeach	 foreach_func
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_load_fd</NAME>
<RETURNS>void 	   </RETURNS>
gint			 fd
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_load_scanner</NAME>
<RETURNS>void 	   </RETURNS>
GScanner		*scanner
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_save_fd</NAME>
<RETURNS>void 	   </RETURNS>
gint			 fd
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_lock_path</NAME>
<RETURNS>void        </RETURNS>
const gchar            *accel_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_unlock_path</NAME>
<RETURNS>void        </RETURNS>
const gchar            *accel_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_add_filter</NAME>
<RETURNS>void 	</RETURNS>
const gchar		*filter_pattern
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_foreach_unfiltered</NAME>
<RETURNS>void 	</RETURNS>
gpointer		 data, GtkAccelMapForeach	 foreach_func
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_accel_map_get</NAME>
<RETURNS>GtkAccelMap  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkAccelMap</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkAccelMapClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACCESSIBLE</NAME>
#define GTK_TYPE_ACCESSIBLE                  (gtk_accessible_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACCESSIBLE</NAME>
#define GTK_ACCESSIBLE(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ACCESSIBLE, GtkAccessible))
</MACRO>
<MACRO>
<NAME>GTK_ACCESSIBLE_CLASS</NAME>
#define GTK_ACCESSIBLE_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACCESSIBLE, GtkAccessibleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCESSIBLE</NAME>
#define GTK_IS_ACCESSIBLE(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ACCESSIBLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACCESSIBLE_CLASS</NAME>
#define GTK_IS_ACCESSIBLE_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACCESSIBLE))
</MACRO>
<MACRO>
<NAME>GTK_ACCESSIBLE_GET_CLASS</NAME>
#define GTK_ACCESSIBLE_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ACCESSIBLE, GtkAccessibleClass))
</MACRO>
<STRUCT>
<NAME>GtkAccessible</NAME>
struct _GtkAccessible
{
  AtkObject parent;

  /*< private >*/
  GtkAccessiblePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAccessibleClass</NAME>
struct _GtkAccessibleClass
{
  AtkObjectClass parent_class;

  void (*connect_widget_destroyed) (GtkAccessible *accessible);

  void (*widget_set)               (GtkAccessible *accessible);
  void (*widget_unset)             (GtkAccessible *accessible);
  /* Padding for future expansion */
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_accessible_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_accessible_set_widget</NAME>
<RETURNS>void        </RETURNS>
GtkAccessible *accessible, GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_accessible_get_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkAccessible *accessible
</FUNCTION>
<FUNCTION>
<NAME>gtk_accessible_connect_widget_destroyed</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkAccessible *accessible
</FUNCTION>
<STRUCT>
<NAME>GtkAccessiblePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACTIONABLE</NAME>
#define GTK_TYPE_ACTIONABLE                                 (gtk_actionable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACTIONABLE</NAME>
#define GTK_ACTIONABLE(inst)                                (G_TYPE_CHECK_INSTANCE_CAST ((inst),                     \
                                                             GTK_TYPE_ACTIONABLE, GtkActionable))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTIONABLE</NAME>
#define GTK_IS_ACTIONABLE(inst)                             (G_TYPE_CHECK_INSTANCE_TYPE ((inst),                     \
                                                             GTK_TYPE_ACTIONABLE))
</MACRO>
<MACRO>
<NAME>GTK_ACTIONABLE_GET_IFACE</NAME>
#define GTK_ACTIONABLE_GET_IFACE(inst)                      (G_TYPE_INSTANCE_GET_INTERFACE ((inst),                  \
                                                             GTK_TYPE_ACTIONABLE, GtkActionableInterface))
</MACRO>
<STRUCT>
<NAME>GtkActionableInterface</NAME>
struct _GtkActionableInterface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  const gchar * (* get_action_name)             (GtkActionable *actionable);
  void          (* set_action_name)             (GtkActionable *actionable,
                                                 const gchar   *action_name);
  GVariant *    (* get_action_target_value)     (GtkActionable *actionable);
  void          (* set_action_target_value)     (GtkActionable *actionable,
                                                 GVariant      *target_value);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_actionable_get_type</NAME>
<RETURNS>GType                    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_actionable_get_action_name</NAME>
<RETURNS>const gchar  *           </RETURNS>
GtkActionable *actionable
</FUNCTION>
<FUNCTION>
<NAME>gtk_actionable_set_action_name</NAME>
<RETURNS>void                     </RETURNS>
GtkActionable *actionable, const gchar   *action_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_actionable_get_action_target_value</NAME>
<RETURNS>GVariant  *              </RETURNS>
GtkActionable *actionable
</FUNCTION>
<FUNCTION>
<NAME>gtk_actionable_set_action_target_value</NAME>
<RETURNS>void                     </RETURNS>
GtkActionable *actionable, GVariant      *target_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_actionable_set_action_target</NAME>
<RETURNS>void                     </RETURNS>
GtkActionable *actionable, const gchar   *format_string, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_actionable_set_detailed_action_name</NAME>
<RETURNS>void                     </RETURNS>
GtkActionable *actionable, const gchar   *detailed_action_name
</FUNCTION>
<STRUCT>
<NAME>GtkActionable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACTION_BAR</NAME>
#define GTK_TYPE_ACTION_BAR            (gtk_action_bar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACTION_BAR</NAME>
#define GTK_ACTION_BAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ACTION_BAR, GtkActionBar))
</MACRO>
<MACRO>
<NAME>GTK_ACTION_BAR_CLASS</NAME>
#define GTK_ACTION_BAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACTION_BAR, GtkActionBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTION_BAR</NAME>
#define GTK_IS_ACTION_BAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ACTION_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTION_BAR_CLASS</NAME>
#define GTK_IS_ACTION_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACTION_BAR))
</MACRO>
<MACRO>
<NAME>GTK_ACTION_BAR_GET_CLASS</NAME>
#define GTK_ACTION_BAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ACTION_BAR, GtkActionBarClass))
</MACRO>
<STRUCT>
<NAME>GtkActionBar</NAME>
struct _GtkActionBar
{
  /*< private >*/
  GtkBin bin;
};
</STRUCT>
<STRUCT>
<NAME>GtkActionBarClass</NAME>
struct _GtkActionBarClass
{
  /*< private >*/
  GtkBinClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_action_bar_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_bar_new</NAME>
<RETURNS>GtkWidget    *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_bar_get_center_widget</NAME>
<RETURNS>GtkWidget    *</RETURNS>
GtkActionBar *action_bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_bar_set_center_widget</NAME>
<RETURNS>void          </RETURNS>
GtkActionBar *action_bar, GtkWidget    *center_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_bar_pack_start</NAME>
<RETURNS>void          </RETURNS>
GtkActionBar *action_bar, GtkWidget    *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_bar_pack_end</NAME>
<RETURNS>void          </RETURNS>
GtkActionBar *action_bar, GtkWidget    *child
</FUNCTION>
<STRUCT>
<NAME>GtkActionBarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ADJUSTMENT</NAME>
#define GTK_TYPE_ADJUSTMENT                  (gtk_adjustment_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ADJUSTMENT</NAME>
#define GTK_ADJUSTMENT(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustment))
</MACRO>
<MACRO>
<NAME>GTK_ADJUSTMENT_CLASS</NAME>
#define GTK_ADJUSTMENT_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ADJUSTMENT, GtkAdjustmentClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ADJUSTMENT</NAME>
#define GTK_IS_ADJUSTMENT(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ADJUSTMENT))
</MACRO>
<MACRO>
<NAME>GTK_IS_ADJUSTMENT_CLASS</NAME>
#define GTK_IS_ADJUSTMENT_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ADJUSTMENT))
</MACRO>
<MACRO>
<NAME>GTK_ADJUSTMENT_GET_CLASS</NAME>
#define GTK_ADJUSTMENT_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ADJUSTMENT, GtkAdjustmentClass))
</MACRO>
<STRUCT>
<NAME>GtkAdjustment</NAME>
struct _GtkAdjustment
{
  GInitiallyUnowned parent_instance;

  GtkAdjustmentPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAdjustmentClass</NAME>
struct _GtkAdjustmentClass
{
  GInitiallyUnownedClass parent_class;

  void (* changed)       (GtkAdjustment *adjustment);
  void (* value_changed) (GtkAdjustment *adjustment);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_adjustment_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_new</NAME>
<RETURNS>GtkAdjustment *   </RETURNS>
gdouble          value, gdouble          lower, gdouble          upper, gdouble          step_increment, gdouble          page_increment, gdouble          page_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_changed</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_value_changed</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_clamp_page</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          lower, gdouble          upper
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_value</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_set_value</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          value
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_lower</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_set_lower</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          lower
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_upper</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_set_upper</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          upper
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_step_increment</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_set_step_increment</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          step_increment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_page_increment</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_set_page_increment</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          page_increment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_page_size</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_set_page_size</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          page_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_configure</NAME>
<RETURNS>void        </RETURNS>
GtkAdjustment   *adjustment, gdouble          value, gdouble          lower, gdouble          upper, gdouble          step_increment, gdouble          page_increment, gdouble          page_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_adjustment_get_minimum_increment</NAME>
<RETURNS>gdouble     </RETURNS>
GtkAdjustment   *adjustment
</FUNCTION>
<STRUCT>
<NAME>GtkAdjustmentPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_APP_CHOOSER</NAME>
#define GTK_TYPE_APP_CHOOSER    (gtk_app_chooser_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER</NAME>
#define GTK_APP_CHOOSER(obj)    (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_APP_CHOOSER, GtkAppChooser))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER</NAME>
#define GTK_IS_APP_CHOOSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_APP_CHOOSER))
</MACRO>
<FUNCTION>
<NAME>gtk_app_chooser_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_get_app_info</NAME>
<RETURNS>GAppInfo  * </RETURNS>
GtkAppChooser *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_get_content_type</NAME>
<RETURNS>gchar  *    </RETURNS>
GtkAppChooser *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_refresh</NAME>
<RETURNS>void        </RETURNS>
GtkAppChooser *self
</FUNCTION>
<STRUCT>
<NAME>GtkAppChooser</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_APP_CHOOSER_BUTTON</NAME>
#define GTK_TYPE_APP_CHOOSER_BUTTON            (gtk_app_chooser_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_BUTTON</NAME>
#define GTK_APP_CHOOSER_BUTTON(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_APP_CHOOSER_BUTTON, GtkAppChooserButton))
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_BUTTON_CLASS</NAME>
#define GTK_APP_CHOOSER_BUTTON_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_APP_CHOOSER_BUTTON, GtkAppChooserButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER_BUTTON</NAME>
#define GTK_IS_APP_CHOOSER_BUTTON(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_APP_CHOOSER_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER_BUTTON_CLASS</NAME>
#define GTK_IS_APP_CHOOSER_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_APP_CHOOSER_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_BUTTON_GET_CLASS</NAME>
#define GTK_APP_CHOOSER_BUTTON_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_APP_CHOOSER_BUTTON, GtkAppChooserButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkAppChooserButton</NAME>
struct _GtkAppChooserButton {
  GtkComboBox parent;

  /*< private >*/
  GtkAppChooserButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAppChooserButtonClass</NAME>
struct _GtkAppChooserButtonClass {
  GtkComboBoxClass parent_class;

  /*< public >*/

  void (* custom_item_activated) (GtkAppChooserButton *self,
                                  const gchar *item_name);

  /*< private >*/

  /* padding for future class expansion */
  gpointer padding[16];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_app_chooser_button_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
const gchar         *content_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_append_separator</NAME>
<RETURNS>void         </RETURNS>
GtkAppChooserButton *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_append_custom_item</NAME>
<RETURNS>void         </RETURNS>
GtkAppChooserButton *self, const gchar         *name, const gchar         *label, GIcon               *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_set_active_custom_item</NAME>
<RETURNS>void      </RETURNS>
GtkAppChooserButton *self, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_set_show_dialog_item</NAME>
<RETURNS>void      </RETURNS>
GtkAppChooserButton *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_get_show_dialog_item</NAME>
<RETURNS>gboolean  </RETURNS>
GtkAppChooserButton *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_set_heading</NAME>
<RETURNS>void      </RETURNS>
GtkAppChooserButton *self, const gchar         *heading
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_get_heading</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkAppChooserButton *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_set_show_default_item</NAME>
<RETURNS>void      </RETURNS>
GtkAppChooserButton *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_button_get_show_default_item</NAME>
<RETURNS>gboolean  </RETURNS>
GtkAppChooserButton *self
</FUNCTION>
<STRUCT>
<NAME>GtkAppChooserButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_APP_CHOOSER_DIALOG</NAME>
#define GTK_TYPE_APP_CHOOSER_DIALOG            (gtk_app_chooser_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_DIALOG</NAME>
#define GTK_APP_CHOOSER_DIALOG(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_APP_CHOOSER_DIALOG, GtkAppChooserDialog))
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_APP_CHOOSER_DIALOG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_APP_CHOOSER_DIALOG, GtkAppChooserDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER_DIALOG</NAME>
#define GTK_IS_APP_CHOOSER_DIALOG(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_APP_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_IS_APP_CHOOSER_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_APP_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_DIALOG_GET_CLASS</NAME>
#define GTK_APP_CHOOSER_DIALOG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_APP_CHOOSER_DIALOG, GtkAppChooserDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkAppChooserDialog</NAME>
struct _GtkAppChooserDialog {
  GtkDialog parent;

  /*< private >*/
  GtkAppChooserDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAppChooserDialogClass</NAME>
struct _GtkAppChooserDialogClass {
  GtkDialogClass parent_class;

  /*< private >*/

  /* padding for future class expansion */
  gpointer padding[16];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_app_chooser_dialog_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_dialog_new</NAME>
<RETURNS>GtkWidget  *   </RETURNS>
GtkWindow           *parent, GtkDialogFlags       flags, GFile               *file
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_dialog_new_for_content_type</NAME>
<RETURNS>GtkWidget  *   </RETURNS>
GtkWindow           *parent, GtkDialogFlags       flags, const gchar         *content_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_dialog_get_widget</NAME>
<RETURNS>GtkWidget  *   </RETURNS>
GtkAppChooserDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_dialog_set_heading</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserDialog *self, const gchar         *heading
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_dialog_get_heading</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkAppChooserDialog *self
</FUNCTION>
<STRUCT>
<NAME>GtkAppChooserDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_APP_CHOOSER_WIDGET</NAME>
#define GTK_TYPE_APP_CHOOSER_WIDGET            (gtk_app_chooser_widget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_WIDGET</NAME>
#define GTK_APP_CHOOSER_WIDGET(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_APP_CHOOSER_WIDGET, GtkAppChooserWidget))
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_APP_CHOOSER_WIDGET_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_APP_CHOOSER_WIDGET, GtkAppChooserWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER_WIDGET</NAME>
#define GTK_IS_APP_CHOOSER_WIDGET(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_APP_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_APP_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_IS_APP_CHOOSER_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_APP_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_APP_CHOOSER_WIDGET_GET_CLASS</NAME>
#define GTK_APP_CHOOSER_WIDGET_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_APP_CHOOSER_WIDGET, GtkAppChooserWidgetClass))
</MACRO>
<STRUCT>
<NAME>GtkAppChooserWidget</NAME>
struct _GtkAppChooserWidget {
  GtkBox parent;

  /*< private >*/
  GtkAppChooserWidgetPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAppChooserWidgetClass</NAME>
struct _GtkAppChooserWidgetClass {
  GtkBoxClass parent_class;

  /*< public >*/

  void (* application_selected)  (GtkAppChooserWidget *self,
                                  GAppInfo            *app_info);

  void (* application_activated) (GtkAppChooserWidget *self,
                                  GAppInfo            *app_info);

  void (* populate_popup)        (GtkAppChooserWidget *self,
                                  GtkMenu             *menu,
                                  GAppInfo            *app_info);

  /*< private >*/

  /* padding for future class expansion */
  gpointer padding[16];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_new</NAME>
<RETURNS>GtkWidget  *   </RETURNS>
const gchar         *content_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_set_show_default</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserWidget *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_show_default</NAME>
<RETURNS>gboolean       </RETURNS>
GtkAppChooserWidget *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_set_show_recommended</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserWidget *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_show_recommended</NAME>
<RETURNS>gboolean       </RETURNS>
GtkAppChooserWidget *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_set_show_fallback</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserWidget *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_show_fallback</NAME>
<RETURNS>gboolean       </RETURNS>
GtkAppChooserWidget *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_set_show_other</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserWidget *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_show_other</NAME>
<RETURNS>gboolean       </RETURNS>
GtkAppChooserWidget *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_set_show_all</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserWidget *self, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_show_all</NAME>
<RETURNS>gboolean       </RETURNS>
GtkAppChooserWidget *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_set_default_text</NAME>
<RETURNS>void           </RETURNS>
GtkAppChooserWidget *self, const gchar         *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_app_chooser_widget_get_default_text</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkAppChooserWidget *self
</FUNCTION>
<STRUCT>
<NAME>GtkAppChooserWidgetPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_APPLICATION</NAME>
#define GTK_TYPE_APPLICATION            (gtk_application_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_APPLICATION</NAME>
#define GTK_APPLICATION(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_APPLICATION, GtkApplication))
</MACRO>
<MACRO>
<NAME>GTK_APPLICATION_CLASS</NAME>
#define GTK_APPLICATION_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_APPLICATION, GtkApplicationClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_APPLICATION</NAME>
#define GTK_IS_APPLICATION(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_APPLICATION))
</MACRO>
<MACRO>
<NAME>GTK_IS_APPLICATION_CLASS</NAME>
#define GTK_IS_APPLICATION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_APPLICATION))
</MACRO>
<MACRO>
<NAME>GTK_APPLICATION_GET_CLASS</NAME>
#define GTK_APPLICATION_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_APPLICATION, GtkApplicationClass))
</MACRO>
<STRUCT>
<NAME>GtkApplication</NAME>
struct _GtkApplication
{
  GApplication parent;

  /*< private >*/
  GtkApplicationPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkApplicationClass</NAME>
struct _GtkApplicationClass
{
  GApplicationClass parent_class;

  /*< public >*/

  void (*window_added)   (GtkApplication *application,
                          GtkWindow      *window);
  void (*window_removed) (GtkApplication *application,
                          GtkWindow      *window);

  /*< private >*/
  gpointer padding[12];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_application_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_new</NAME>
<RETURNS>GtkApplication  * </RETURNS>
const gchar       *application_id, GApplicationFlags  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_add_window</NAME>
<RETURNS>void              </RETURNS>
GtkApplication    *application, GtkWindow         *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_remove_window</NAME>
<RETURNS>void              </RETURNS>
GtkApplication    *application, GtkWindow         *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_windows</NAME>
<RETURNS>GList  *          </RETURNS>
GtkApplication    *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_app_menu</NAME>
<RETURNS>GMenuModel  *     </RETURNS>
GtkApplication    *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_set_app_menu</NAME>
<RETURNS>void              </RETURNS>
GtkApplication    *application, GMenuModel        *app_menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_menubar</NAME>
<RETURNS>GMenuModel  *     </RETURNS>
GtkApplication    *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_set_menubar</NAME>
<RETURNS>void              </RETURNS>
GtkApplication    *application, GMenuModel        *menubar
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_add_accelerator</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkApplication  *application, const gchar     *accelerator, const gchar     *action_name, GVariant        *parameter
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_remove_accelerator</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkApplication *application, const gchar    *action_name, GVariant       *parameter
</FUNCTION>
<ENUM>
<NAME>GtkApplicationInhibitFlags</NAME>
typedef enum
{
  GTK_APPLICATION_INHIBIT_LOGOUT  = (1 << 0),
  GTK_APPLICATION_INHIBIT_SWITCH  = (1 << 1),
  GTK_APPLICATION_INHIBIT_SUSPEND = (1 << 2),
  GTK_APPLICATION_INHIBIT_IDLE    = (1 << 3)
} GtkApplicationInhibitFlags;
</ENUM>
<FUNCTION>
<NAME>gtk_application_inhibit</NAME>
<RETURNS>guint             </RETURNS>
GtkApplication             *application, GtkWindow                  *window, GtkApplicationInhibitFlags  flags, const gchar                *reason
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_uninhibit</NAME>
<RETURNS>void              </RETURNS>
GtkApplication             *application, guint                       cookie
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_is_inhibited</NAME>
<RETURNS>gboolean          </RETURNS>
GtkApplication             *application, GtkApplicationInhibitFlags  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_window_by_id</NAME>
<RETURNS>GtkWindow  *      </RETURNS>
GtkApplication             *application, guint                       id
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_active_window</NAME>
<RETURNS>GtkWindow  *      </RETURNS>
GtkApplication             *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_list_action_descriptions</NAME>
<RETURNS>gchar  **         </RETURNS>
GtkApplication       *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_accels_for_action</NAME>
<RETURNS>gchar  **         </RETURNS>
GtkApplication       *application, const gchar          *detailed_action_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_actions_for_accel</NAME>
<RETURNS>gchar  **         </RETURNS>
GtkApplication       *application, const gchar          *accel
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_set_accels_for_action</NAME>
<RETURNS>void              </RETURNS>
GtkApplication       *application, const gchar          *detailed_action_name, const gchar * const  *accels
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_prefers_app_menu</NAME>
<RETURNS>gboolean          </RETURNS>
GtkApplication       *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_get_menu_by_id</NAME>
<RETURNS>GMenu  *          </RETURNS>
GtkApplication       *application, const gchar          *id
</FUNCTION>
<STRUCT>
<NAME>GtkApplicationPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_APPLICATION_WINDOW</NAME>
#define GTK_TYPE_APPLICATION_WINDOW            (gtk_application_window_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_APPLICATION_WINDOW</NAME>
#define GTK_APPLICATION_WINDOW(inst)           (G_TYPE_CHECK_INSTANCE_CAST ((inst), \
                                                GTK_TYPE_APPLICATION_WINDOW, GtkApplicationWindow))
</MACRO>
<MACRO>
<NAME>GTK_APPLICATION_WINDOW_CLASS</NAME>
#define GTK_APPLICATION_WINDOW_CLASS(class)    (G_TYPE_CHECK_CLASS_CAST ((class),   \
                                                GTK_TYPE_APPLICATION_WINDOW, GtkApplicationWindowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_APPLICATION_WINDOW</NAME>
#define GTK_IS_APPLICATION_WINDOW(inst)        (G_TYPE_CHECK_INSTANCE_TYPE ((inst), \
                                                GTK_TYPE_APPLICATION_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_IS_APPLICATION_WINDOW_CLASS</NAME>
#define GTK_IS_APPLICATION_WINDOW_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class),   \
                                                GTK_TYPE_APPLICATION_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_APPLICATION_WINDOW_GET_CLASS</NAME>
#define GTK_APPLICATION_WINDOW_GET_CLASS(inst) (G_TYPE_INSTANCE_GET_CLASS ((inst),  \
                                                GTK_TYPE_APPLICATION_WINDOW, GtkApplicationWindowClass))
</MACRO>
<STRUCT>
<NAME>GtkApplicationWindow</NAME>
struct _GtkApplicationWindow
{
  GtkWindow parent_instance;

  /*< private >*/
  GtkApplicationWindowPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkApplicationWindowClass</NAME>
struct _GtkApplicationWindowClass
{
  GtkWindowClass parent_class;

  /*< private >*/
  gpointer padding[14];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_application_window_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_window_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkApplication      *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_window_set_show_menubar</NAME>
<RETURNS>void         </RETURNS>
GtkApplicationWindow *window, gboolean              show_menubar
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_window_get_show_menubar</NAME>
<RETURNS>gboolean     </RETURNS>
GtkApplicationWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_window_get_id</NAME>
<RETURNS>guint        </RETURNS>
GtkApplicationWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_window_set_help_overlay</NAME>
<RETURNS>void         </RETURNS>
GtkApplicationWindow *window, GtkShortcutsWindow   *help_overlay
</FUNCTION>
<FUNCTION>
<NAME>gtk_application_window_get_help_overlay</NAME>
<RETURNS>GtkShortcutsWindow  *</RETURNS>
GtkApplicationWindow *window
</FUNCTION>
<STRUCT>
<NAME>GtkApplicationWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ASPECT_FRAME</NAME>
#define GTK_TYPE_ASPECT_FRAME            (gtk_aspect_frame_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ASPECT_FRAME</NAME>
#define GTK_ASPECT_FRAME(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrame))
</MACRO>
<MACRO>
<NAME>GTK_ASPECT_FRAME_CLASS</NAME>
#define GTK_ASPECT_FRAME_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ASPECT_FRAME, GtkAspectFrameClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ASPECT_FRAME</NAME>
#define GTK_IS_ASPECT_FRAME(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ASPECT_FRAME))
</MACRO>
<MACRO>
<NAME>GTK_IS_ASPECT_FRAME_CLASS</NAME>
#define GTK_IS_ASPECT_FRAME_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ASPECT_FRAME))
</MACRO>
<MACRO>
<NAME>GTK_ASPECT_FRAME_GET_CLASS</NAME>
#define GTK_ASPECT_FRAME_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ASPECT_FRAME, GtkAspectFrameClass))
</MACRO>
<STRUCT>
<NAME>GtkAspectFrame</NAME>
struct _GtkAspectFrame
{
  GtkFrame frame;

  /*< private >*/
  GtkAspectFramePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAspectFrameClass</NAME>
struct _GtkAspectFrameClass
{
  GtkFrameClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_aspect_frame_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_aspect_frame_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *label, gfloat           xalign, gfloat           yalign, gfloat           ratio, gboolean         obey_child
</FUNCTION>
<FUNCTION>
<NAME>gtk_aspect_frame_set</NAME>
<RETURNS>void        </RETURNS>
GtkAspectFrame  *aspect_frame, gfloat           xalign, gfloat           yalign, gfloat           ratio, gboolean         obey_child
</FUNCTION>
<STRUCT>
<NAME>GtkAspectFramePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ASSISTANT</NAME>
#define GTK_TYPE_ASSISTANT         (gtk_assistant_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ASSISTANT</NAME>
#define GTK_ASSISTANT(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_ASSISTANT, GtkAssistant))
</MACRO>
<MACRO>
<NAME>GTK_ASSISTANT_CLASS</NAME>
#define GTK_ASSISTANT_CLASS(c)     (G_TYPE_CHECK_CLASS_CAST    ((c), GTK_TYPE_ASSISTANT, GtkAssistantClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ASSISTANT</NAME>
#define GTK_IS_ASSISTANT(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_ASSISTANT))
</MACRO>
<MACRO>
<NAME>GTK_IS_ASSISTANT_CLASS</NAME>
#define GTK_IS_ASSISTANT_CLASS(c)  (G_TYPE_CHECK_CLASS_TYPE    ((c), GTK_TYPE_ASSISTANT))
</MACRO>
<MACRO>
<NAME>GTK_ASSISTANT_GET_CLASS</NAME>
#define GTK_ASSISTANT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS  ((o), GTK_TYPE_ASSISTANT, GtkAssistantClass))
</MACRO>
<ENUM>
<NAME>GtkAssistantPageType</NAME>
typedef enum
{
  GTK_ASSISTANT_PAGE_CONTENT,
  GTK_ASSISTANT_PAGE_INTRO,
  GTK_ASSISTANT_PAGE_CONFIRM,
  GTK_ASSISTANT_PAGE_SUMMARY,
  GTK_ASSISTANT_PAGE_PROGRESS,
  GTK_ASSISTANT_PAGE_CUSTOM
} GtkAssistantPageType;
</ENUM>
<STRUCT>
<NAME>GtkAssistant</NAME>
struct _GtkAssistant
{
  GtkWindow  parent;

  /*< private >*/
  GtkAssistantPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAssistantClass</NAME>
struct _GtkAssistantClass
{
  GtkWindowClass parent_class;

  /*< public >*/

  void (* prepare) (GtkAssistant *assistant, GtkWidget *page);
  void (* apply)   (GtkAssistant *assistant);
  void (* close)   (GtkAssistant *assistant);
  void (* cancel)  (GtkAssistant *assistant);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
};
</STRUCT>
<USER_FUNCTION>
<NAME>GtkAssistantPageFunc</NAME>
<RETURNS>gint </RETURNS>
gint current_page, gpointer data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_new</NAME>
<RETURNS>GtkWidget             *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_next_page</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_previous_page</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_current_page</NAME>
<RETURNS>gint                   </RETURNS>
GtkAssistant         *assistant
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_current_page</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, gint                  page_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_n_pages</NAME>
<RETURNS>gint                   </RETURNS>
GtkAssistant         *assistant
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_nth_page</NAME>
<RETURNS>GtkWidget             *</RETURNS>
GtkAssistant         *assistant, gint                  page_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_prepend_page</NAME>
<RETURNS>gint                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_append_page</NAME>
<RETURNS>gint                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_insert_page</NAME>
<RETURNS>gint                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page, gint                  position
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_remove_page</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, gint                  page_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_forward_page_func</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkAssistantPageFunc  page_func, gpointer              data, GDestroyNotify        destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_page_type</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page, GtkAssistantPageType  type
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_page_type</NAME>
<RETURNS>GtkAssistantPageType   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_page_title</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page, const gchar          *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_page_title</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_page_header_image</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page, GdkPixbuf            *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_page_header_image</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf             *</RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_page_side_image</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page, GdkPixbuf            *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_page_side_image</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf             *</RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_page_complete</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page, gboolean              complete
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_page_complete</NAME>
<RETURNS>gboolean               </RETURNS>
GtkAssistant         *assistant, GtkWidget            *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_add_action_widget</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_remove_action_widget</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant         *assistant, GtkWidget            *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_update_buttons_state</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant *assistant
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_commit</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant *assistant
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_set_page_has_padding</NAME>
<RETURNS>void                   </RETURNS>
GtkAssistant *assistant, GtkWidget    *page, gboolean      has_padding
</FUNCTION>
<FUNCTION>
<NAME>gtk_assistant_get_page_has_padding</NAME>
<RETURNS>gboolean               </RETURNS>
GtkAssistant *assistant, GtkWidget    *page
</FUNCTION>
<STRUCT>
<NAME>GtkAssistantPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_BUTTON_BOX</NAME>
#define GTK_TYPE_BUTTON_BOX             (gtk_button_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BUTTON_BOX</NAME>
#define GTK_BUTTON_BOX(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBox))
</MACRO>
<MACRO>
<NAME>GTK_BUTTON_BOX_CLASS</NAME>
#define GTK_BUTTON_BOX_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_BUTTON_BOX, GtkButtonBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUTTON_BOX</NAME>
#define GTK_IS_BUTTON_BOX(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_BUTTON_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUTTON_BOX_CLASS</NAME>
#define GTK_IS_BUTTON_BOX_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BUTTON_BOX))
</MACRO>
<MACRO>
<NAME>GTK_BUTTON_BOX_GET_CLASS</NAME>
#define GTK_BUTTON_BOX_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BUTTON_BOX, GtkButtonBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkButtonBox</NAME>
struct _GtkButtonBox
{
  GtkBox box;

  /*< private >*/
  GtkButtonBoxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkButtonBoxClass</NAME>
struct _GtkButtonBoxClass
{
  GtkBoxClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkButtonBoxStyle</NAME>
typedef enum
{
  GTK_BUTTONBOX_SPREAD = 1,
  GTK_BUTTONBOX_EDGE,
  GTK_BUTTONBOX_START,
  GTK_BUTTONBOX_END,
  GTK_BUTTONBOX_CENTER,
  GTK_BUTTONBOX_EXPAND
} GtkButtonBoxStyle;
</ENUM>
<FUNCTION>
<NAME>gtk_button_box_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_new</NAME>
<RETURNS>GtkWidget        * </RETURNS>
GtkOrientation     orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_get_layout</NAME>
<RETURNS>GtkButtonBoxStyle  </RETURNS>
GtkButtonBox      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_set_layout</NAME>
<RETURNS>void               </RETURNS>
GtkButtonBox      *widget, GtkButtonBoxStyle  layout_style
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_get_child_secondary</NAME>
<RETURNS>gboolean           </RETURNS>
GtkButtonBox      *widget, GtkWidget         *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_set_child_secondary</NAME>
<RETURNS>void               </RETURNS>
GtkButtonBox      *widget, GtkWidget         *child, gboolean           is_secondary
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_get_child_non_homogeneous</NAME>
<RETURNS>gboolean           </RETURNS>
GtkButtonBox *widget, GtkWidget    *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_box_set_child_non_homogeneous</NAME>
<RETURNS>void               </RETURNS>
GtkButtonBox *widget, GtkWidget    *child, gboolean      non_homogeneous
</FUNCTION>
<STRUCT>
<NAME>GtkButtonBoxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_BIN</NAME>
#define GTK_TYPE_BIN                  (gtk_bin_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BIN</NAME>
#define GTK_BIN(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_BIN, GtkBin))
</MACRO>
<MACRO>
<NAME>GTK_BIN_CLASS</NAME>
#define GTK_BIN_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_BIN, GtkBinClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BIN</NAME>
#define GTK_IS_BIN(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_BIN))
</MACRO>
<MACRO>
<NAME>GTK_IS_BIN_CLASS</NAME>
#define GTK_IS_BIN_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BIN))
</MACRO>
<MACRO>
<NAME>GTK_BIN_GET_CLASS</NAME>
#define GTK_BIN_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BIN, GtkBinClass))
</MACRO>
<STRUCT>
<NAME>GtkBin</NAME>
struct _GtkBin
{
  GtkContainer container;

  /*< private >*/
  GtkBinPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkBinClass</NAME>
struct _GtkBinClass
{
  GtkContainerClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_bin_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_bin_get_child</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkBin *bin
</FUNCTION>
<STRUCT>
<NAME>GtkBinPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkBindingSet</NAME>
struct _GtkBindingSet
{
  gchar           *set_name;
  gint             priority;
  GSList          *widget_path_pspecs;
  GSList          *widget_class_pspecs;
  GSList          *class_branch_pspecs;
  GtkBindingEntry *entries;
  GtkBindingEntry *current;
  guint            parsed : 1;
};
</STRUCT>
<STRUCT>
<NAME>GtkBindingEntry</NAME>
struct _GtkBindingEntry
{
  /* key portion */
  guint             keyval;
  GdkModifierType   modifiers;

  GtkBindingSet    *binding_set;
  guint             destroyed     : 1;
  guint             in_emission   : 1;
  guint             marks_unbound : 1;
  GtkBindingEntry  *set_next;
  GtkBindingEntry  *hash_next;
  GtkBindingSignal *signals;
};
</STRUCT>
<STRUCT>
<NAME>GtkBindingArg</NAME>
struct _GtkBindingArg
{
  GType      arg_type;
  union {
    glong    long_data;
    gdouble  double_data;
    gchar   *string_data;
  } d;
};
</STRUCT>
<STRUCT>
<NAME>GtkBindingSignal</NAME>
struct _GtkBindingSignal
{
  GtkBindingSignal *next;
  gchar            *signal_name;
  guint             n_args;
  GtkBindingArg    *args;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_binding_set_new</NAME>
<RETURNS>GtkBindingSet  *</RETURNS>
const gchar         *set_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_set_by_class</NAME>
<RETURNS>GtkBindingSet  *</RETURNS>
gpointer             object_class
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_set_find</NAME>
<RETURNS>GtkBindingSet  *</RETURNS>
const gchar         *set_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_bindings_activate</NAME>
<RETURNS>gboolean        </RETURNS>
GObject             *object, guint                keyval, GdkModifierType      modifiers
</FUNCTION>
<FUNCTION>
<NAME>gtk_bindings_activate_event</NAME>
<RETURNS>gboolean        </RETURNS>
GObject             *object, GdkEventKey         *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_set_activate</NAME>
<RETURNS>gboolean        </RETURNS>
GtkBindingSet       *binding_set, guint                keyval, GdkModifierType      modifiers, GObject             *object
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_entry_skip</NAME>
<RETURNS>void            </RETURNS>
GtkBindingSet       *binding_set, guint                keyval, GdkModifierType      modifiers
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_entry_add_signal</NAME>
<RETURNS>void            </RETURNS>
GtkBindingSet       *binding_set, guint                keyval, GdkModifierType      modifiers, const gchar         *signal_name, guint                n_args, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_entry_add_signall</NAME>
<RETURNS>void            </RETURNS>
GtkBindingSet       *binding_set, guint                keyval, GdkModifierType      modifiers, const gchar         *signal_name, GSList              *binding_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_entry_add_signal_from_string</NAME>
<RETURNS>GTokenType  </RETURNS>
GtkBindingSet       *binding_set, const gchar         *signal_desc
</FUNCTION>
<FUNCTION>
<NAME>gtk_binding_entry_remove</NAME>
<RETURNS>void            </RETURNS>
GtkBindingSet       *binding_set, guint                keyval, GdkModifierType      modifiers
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_BORDER</NAME>
#define GTK_TYPE_BORDER (gtk_border_get_type ())
</MACRO>
<STRUCT>
<NAME>GtkBorder</NAME>
struct _GtkBorder
{
  gint16 left;
  gint16 right;
  gint16 top;
  gint16 bottom;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_border_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_border_new</NAME>
<RETURNS>GtkBorder  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_border_copy</NAME>
<RETURNS>GtkBorder  *</RETURNS>
const GtkBorder *border_
</FUNCTION>
<FUNCTION>
<NAME>gtk_border_free</NAME>
<RETURNS>void        </RETURNS>
GtkBorder       *border_
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_BOX</NAME>
#define GTK_TYPE_BOX            (gtk_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BOX</NAME>
#define GTK_BOX(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_BOX, GtkBox))
</MACRO>
<MACRO>
<NAME>GTK_BOX_CLASS</NAME>
#define GTK_BOX_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_BOX, GtkBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BOX</NAME>
#define GTK_IS_BOX(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_BOX_CLASS</NAME>
#define GTK_IS_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BOX))
</MACRO>
<MACRO>
<NAME>GTK_BOX_GET_CLASS</NAME>
#define GTK_BOX_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BOX, GtkBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkBox</NAME>
struct _GtkBox
{
  GtkContainer container;

  /*< private >*/
  GtkBoxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkBoxClass</NAME>
struct _GtkBoxClass
{
  GtkContainerClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_box_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_new</NAME>
<RETURNS>GtkWidget *  </RETURNS>
GtkOrientation  orientation, gint            spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_pack_start</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, GtkWidget      *child, gboolean        expand, gboolean        fill, guint           padding
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_pack_end</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, GtkWidget      *child, gboolean        expand, gboolean        fill, guint           padding
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_set_homogeneous</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, gboolean        homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_get_homogeneous</NAME>
<RETURNS>gboolean     </RETURNS>
GtkBox         *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_set_spacing</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, gint            spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_get_spacing</NAME>
<RETURNS>gint         </RETURNS>
GtkBox         *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_set_baseline_position</NAME>
<RETURNS>void         </RETURNS>
GtkBox             *box, GtkBaselinePosition position
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_get_baseline_position</NAME>
<RETURNS>GtkBaselinePosition  </RETURNS>
GtkBox         *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_reorder_child</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, GtkWidget      *child, gint            position
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_query_child_packing</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, GtkWidget      *child, gboolean       *expand, gboolean       *fill, guint          *padding, GtkPackType    *pack_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_set_child_packing</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, GtkWidget      *child, gboolean        expand, gboolean        fill, guint           padding, GtkPackType     pack_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_set_center_widget</NAME>
<RETURNS>void         </RETURNS>
GtkBox         *box, GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_get_center_widget</NAME>
<RETURNS>GtkWidget   *</RETURNS>
GtkBox         *box
</FUNCTION>
<STRUCT>
<NAME>GtkBoxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_BOX_GADGET</NAME>
#define GTK_TYPE_BOX_GADGET           (gtk_box_gadget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BOX_GADGET</NAME>
#define GTK_BOX_GADGET(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_BOX_GADGET, GtkBoxGadget))
</MACRO>
<MACRO>
<NAME>GTK_BOX_GADGET_CLASS</NAME>
#define GTK_BOX_GADGET_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_BOX_GADGET, GtkBoxGadgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BOX_GADGET</NAME>
#define GTK_IS_BOX_GADGET(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_BOX_GADGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_BOX_GADGET_CLASS</NAME>
#define GTK_IS_BOX_GADGET_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_BOX_GADGET))
</MACRO>
<MACRO>
<NAME>GTK_BOX_GADGET_GET_CLASS</NAME>
#define GTK_BOX_GADGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BOX_GADGET, GtkBoxGadgetClass))
</MACRO>
<STRUCT>
<NAME>GtkBoxGadget</NAME>
struct _GtkBoxGadget
{
  GtkCssGadget parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkBoxGadgetClass</NAME>
struct _GtkBoxGadgetClass
{
  GtkCssGadgetClass  parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_box_gadget_get_type</NAME>
<RETURNS>GType                    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_new</NAME>
<RETURNS>GtkCssGadget  *          </RETURNS>
const char             *name, GtkWidget              *owner, GtkCssGadget           *parent, GtkCssGadget           *next_sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_new_for_node</NAME>
<RETURNS>GtkCssGadget  *          </RETURNS>
GtkCssNode             *node, GtkWidget              *owner
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_orientation</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GtkOrientation          orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_draw_focus</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, gboolean                draw_focus
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_draw_reverse</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, gboolean                draw_reverse
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_allocate_reverse</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, gboolean                allocate_reverse
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_align_reverse</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, gboolean                align_reverse
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_insert_widget</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, int                     pos, GtkWidget              *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_remove_widget</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GtkWidget              *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_insert_gadget</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, int                     pos, GtkCssGadget           *cssgadget, gboolean                expand, GtkAlign                align
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_insert_gadget_before</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GtkCssGadget           *sibling, GtkCssGadget           *cssgadget, gboolean                expand, GtkAlign                align
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_insert_gadget_after</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GtkCssGadget           *sibling, GtkCssGadget           *cssgadget, gboolean                expand, GtkAlign                align
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_remove_gadget</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GtkCssGadget           *cssgadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_reverse_children</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_gadget_expand</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GObject                *object, gboolean                expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_box_gadget_set_gadget_align</NAME>
<RETURNS>void                     </RETURNS>
GtkBoxGadget           *gadget, GObject                *object, GtkAlign                align
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_BUILDABLE</NAME>
#define GTK_TYPE_BUILDABLE            (gtk_buildable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BUILDABLE</NAME>
#define GTK_BUILDABLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_BUILDABLE, GtkBuildable))
</MACRO>
<MACRO>
<NAME>GTK_BUILDABLE_CLASS</NAME>
#define GTK_BUILDABLE_CLASS(obj)      (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_BUILDABLE, GtkBuildableIface))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUILDABLE</NAME>
#define GTK_IS_BUILDABLE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_BUILDABLE))
</MACRO>
<MACRO>
<NAME>GTK_BUILDABLE_GET_IFACE</NAME>
#define GTK_BUILDABLE_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_BUILDABLE, GtkBuildableIface))
</MACRO>
<STRUCT>
<NAME>GtkBuildableIface</NAME>
struct _GtkBuildableIface
{
  GTypeInterface g_iface;

  /* virtual table */
  void          (* set_name)               (GtkBuildable  *buildable,
                                            const gchar   *name);
  const gchar * (* get_name)               (GtkBuildable  *buildable);
  void          (* add_child)              (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    GObject       *child,
					    const gchar   *type);
  void          (* set_buildable_property) (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    const gchar   *name,
					    const GValue  *value);
  GObject *     (* construct_child)        (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    const gchar   *name);
  gboolean      (* custom_tag_start)       (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    GObject       *child,
					    const gchar   *tagname,
					    GMarkupParser *parser,
					    gpointer      *data);
  void          (* custom_tag_end)         (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    GObject       *child,
					    const gchar   *tagname,
					    gpointer      *data);
  void          (* custom_finished)        (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    GObject       *child,
					    const gchar   *tagname,
					    gpointer       data);
  void          (* parser_finished)        (GtkBuildable  *buildable,
					    GtkBuilder    *builder);

  GObject *     (* get_internal_child)     (GtkBuildable  *buildable,
					    GtkBuilder    *builder,
					    const gchar   *childname);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_buildable_get_type</NAME>
<RETURNS>GType      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_set_name</NAME>
<RETURNS>void       </RETURNS>
GtkBuildable        *buildable, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_get_name</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkBuildable        *buildable
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_add_child</NAME>
<RETURNS>void       </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, GObject             *child, const gchar         *type
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_set_buildable_property</NAME>
<RETURNS>void       </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, const gchar         *name, const GValue        *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_construct_child</NAME>
<RETURNS>GObject  * </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_custom_tag_start</NAME>
<RETURNS>gboolean   </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, GObject             *child, const gchar         *tagname, GMarkupParser       *parser, gpointer            *data
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_custom_tag_end</NAME>
<RETURNS>void       </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, GObject             *child, const gchar         *tagname, gpointer            *data
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_custom_finished</NAME>
<RETURNS>void       </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, GObject             *child, const gchar         *tagname, gpointer             data
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_parser_finished</NAME>
<RETURNS>void       </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder
</FUNCTION>
<FUNCTION>
<NAME>gtk_buildable_get_internal_child</NAME>
<RETURNS>GObject  * </RETURNS>
GtkBuildable        *buildable, GtkBuilder          *builder, const gchar         *childname
</FUNCTION>
<STRUCT>
<NAME>GtkBuildable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_BUILDER</NAME>
#define GTK_TYPE_BUILDER                 (gtk_builder_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BUILDER</NAME>
#define GTK_BUILDER(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_BUILDER, GtkBuilder))
</MACRO>
<MACRO>
<NAME>GTK_BUILDER_CLASS</NAME>
#define GTK_BUILDER_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_BUILDER, GtkBuilderClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUILDER</NAME>
#define GTK_IS_BUILDER(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_BUILDER))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUILDER_CLASS</NAME>
#define GTK_IS_BUILDER_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BUILDER))
</MACRO>
<MACRO>
<NAME>GTK_BUILDER_GET_CLASS</NAME>
#define GTK_BUILDER_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BUILDER, GtkBuilderClass))
</MACRO>
<MACRO>
<NAME>GTK_BUILDER_ERROR</NAME>
#define GTK_BUILDER_ERROR                (gtk_builder_error_quark ())
</MACRO>
<ENUM>
<NAME>GtkBuilderError</NAME>
typedef enum
{
  GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION,
  GTK_BUILDER_ERROR_UNHANDLED_TAG,
  GTK_BUILDER_ERROR_MISSING_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_ATTRIBUTE,
  GTK_BUILDER_ERROR_INVALID_TAG,
  GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE,
  GTK_BUILDER_ERROR_INVALID_VALUE,
  GTK_BUILDER_ERROR_VERSION_MISMATCH,
  GTK_BUILDER_ERROR_DUPLICATE_ID,
  GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED,
  GTK_BUILDER_ERROR_TEMPLATE_MISMATCH,
  GTK_BUILDER_ERROR_INVALID_PROPERTY,
  GTK_BUILDER_ERROR_INVALID_SIGNAL,
  GTK_BUILDER_ERROR_INVALID_ID
} GtkBuilderError;
</ENUM>
<FUNCTION>
<NAME>gtk_builder_error_quark</NAME>
<RETURNS>GQuark  </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkBuilder</NAME>
struct _GtkBuilder
{
  GObject parent_instance;

  GtkBuilderPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkBuilderClass</NAME>
struct _GtkBuilderClass
{
  GObjectClass parent_class;
  
  GType (* get_type_from_name) (GtkBuilder *builder,
                                const char *type_name);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_builder_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_new</NAME>
<RETURNS>GtkBuilder *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_from_file</NAME>
<RETURNS>guint         </RETURNS>
GtkBuilder    *builder, const gchar   *filename, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_from_resource</NAME>
<RETURNS>guint         </RETURNS>
GtkBuilder    *builder, const gchar   *resource_path, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_from_string</NAME>
<RETURNS>guint         </RETURNS>
GtkBuilder    *builder, const gchar   *buffer, gsize          length, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_objects_from_file</NAME>
<RETURNS>guint         </RETURNS>
GtkBuilder    *builder, const gchar   *filename, gchar        **object_ids, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_objects_from_resource</NAME>
<RETURNS>guint         </RETURNS>
GtkBuilder    *builder, const gchar   *resource_path, gchar        **object_ids, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_objects_from_string</NAME>
<RETURNS>guint         </RETURNS>
GtkBuilder    *builder, const gchar   *buffer, gsize          length, gchar        **object_ids, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_get_object</NAME>
<RETURNS>GObject *     </RETURNS>
GtkBuilder    *builder, const gchar   *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_get_objects</NAME>
<RETURNS>GSList *      </RETURNS>
GtkBuilder    *builder
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_expose_object</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder    *builder, const gchar   *name, GObject       *object
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_connect_signals</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder    *builder, gpointer       user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_connect_signals_full</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder    *builder, GtkBuilderConnectFunc func, gpointer       user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_set_translation_domain</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder   	*builder, const gchar  	*domain
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_get_translation_domain</NAME>
<RETURNS>const gchar * </RETURNS>
GtkBuilder   	*builder
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_get_type_from_name</NAME>
<RETURNS>GType         </RETURNS>
GtkBuilder   	*builder, const char   	*type_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_value_from_string</NAME>
<RETURNS>gboolean      </RETURNS>
GtkBuilder    *builder, GParamSpec   	*pspec, const gchar  	*string, GValue       	*value, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_value_from_string_type</NAME>
<RETURNS>gboolean      </RETURNS>
GtkBuilder    *builder, GType        	 type, const gchar  	*string, GValue       	*value, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_new_from_file</NAME>
<RETURNS>GtkBuilder  * </RETURNS>
const gchar   *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_new_from_resource</NAME>
<RETURNS>GtkBuilder  * </RETURNS>
const gchar   *resource_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_new_from_string</NAME>
<RETURNS>GtkBuilder  * </RETURNS>
const gchar   *string, gssize         length
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_callback_symbol</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder    *builder, const gchar   *callback_name, GCallback      callback_symbol
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_add_callback_symbols</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder    *builder, const gchar   *first_callback_name, GCallback      first_callback_symbol, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_lookup_callback_symbol</NAME>
<RETURNS>GCallback     </RETURNS>
GtkBuilder    *builder, const gchar   *callback_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_set_application</NAME>
<RETURNS>void          </RETURNS>
GtkBuilder     *builder, GtkApplication *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_builder_get_application</NAME>
<RETURNS>GtkApplication  * </RETURNS>
GtkBuilder     *builder
</FUNCTION>
<MACRO>
<NAME>GTK_BUILDER_WARN_INVALID_CHILD_TYPE</NAME>
#define GTK_BUILDER_WARN_INVALID_CHILD_TYPE(object, type) \
  g_warning ("'%s' is not a valid child type of '%s'", type, g_type_name (G_OBJECT_TYPE (object)))
</MACRO>
<FUNCTION>
<NAME>gtk_builder_extend_with_template</NAME>
<RETURNS>guint      </RETURNS>
GtkBuilder    *builder, GtkWidget     *widget, GType          template_type,                                                          const gchar   *buffer, gsize          length, GError       **error
</FUNCTION>
<STRUCT>
<NAME>GtkBuilderPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_BUILTIN_ICON</NAME>
#define GTK_TYPE_BUILTIN_ICON           (gtk_builtin_icon_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BUILTIN_ICON</NAME>
#define GTK_BUILTIN_ICON(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_BUILTIN_ICON, GtkBuiltinIcon))
</MACRO>
<MACRO>
<NAME>GTK_BUILTIN_ICON_CLASS</NAME>
#define GTK_BUILTIN_ICON_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_BUILTIN_ICON, GtkBuiltinIconClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUILTIN_ICON</NAME>
#define GTK_IS_BUILTIN_ICON(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_BUILTIN_ICON))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUILTIN_ICON_CLASS</NAME>
#define GTK_IS_BUILTIN_ICON_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_BUILTIN_ICON))
</MACRO>
<MACRO>
<NAME>GTK_BUILTIN_ICON_GET_CLASS</NAME>
#define GTK_BUILTIN_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BUILTIN_ICON, GtkBuiltinIconClass))
</MACRO>
<STRUCT>
<NAME>GtkBuiltinIcon</NAME>
struct _GtkBuiltinIcon
{
  GtkCssGadget parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkBuiltinIconClass</NAME>
struct _GtkBuiltinIconClass
{
  GtkCssGadgetClass  parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_builtin_icon_get_type</NAME>
<RETURNS>GType                    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_new</NAME>
<RETURNS>GtkCssGadget  *          </RETURNS>
const char             *name, GtkWidget              *owner, GtkCssGadget           *parent, GtkCssGadget           *next_sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_new_for_node</NAME>
<RETURNS>GtkCssGadget  *          </RETURNS>
GtkCssNode             *node, GtkWidget              *owner
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_set_image</NAME>
<RETURNS>void                     </RETURNS>
GtkBuiltinIcon         *icon, GtkCssImageBuiltinType  image
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_get_image</NAME>
<RETURNS>GtkCssImageBuiltinType   </RETURNS>
GtkBuiltinIcon         *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_set_default_size</NAME>
<RETURNS>void                     </RETURNS>
GtkBuiltinIcon         *icon, int                     default_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_get_default_size</NAME>
<RETURNS>int                      </RETURNS>
GtkBuiltinIcon         *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_set_default_size_property</NAME>
<RETURNS>void                     </RETURNS>
GtkBuiltinIcon      *icon, const char             *property_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_builtin_icon_get_default_size_property</NAME>
<RETURNS>const char  *            </RETURNS>
GtkBuiltinIcon      *icon
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_BUTTON</NAME>
#define GTK_TYPE_BUTTON                 (gtk_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_BUTTON</NAME>
#define GTK_BUTTON(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_BUTTON, GtkButton))
</MACRO>
<MACRO>
<NAME>GTK_BUTTON_CLASS</NAME>
#define GTK_BUTTON_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_BUTTON, GtkButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUTTON</NAME>
#define GTK_IS_BUTTON(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_BUTTON_CLASS</NAME>
#define GTK_IS_BUTTON_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_BUTTON_GET_CLASS</NAME>
#define GTK_BUTTON_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_BUTTON, GtkButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkButton</NAME>
struct _GtkButton
{
  /*< private >*/
  GtkBin bin;

  GtkButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkButtonClass</NAME>
struct _GtkButtonClass
{
  GtkBinClass        parent_class;

  /*< public >*/

  void (* pressed)  (GtkButton *button);
  void (* released) (GtkButton *button);
  void (* clicked)  (GtkButton *button);
  void (* enter)    (GtkButton *button);
  void (* leave)    (GtkButton *button);
  void (* activate) (GtkButton *button);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_button_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_new</NAME>
<RETURNS>GtkWidget *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_new_with_label</NAME>
<RETURNS>GtkWidget *     </RETURNS>
const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_new_from_icon_name</NAME>
<RETURNS>GtkWidget *     </RETURNS>
const gchar    *icon_name, GtkIconSize     size
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget *     </RETURNS>
const gchar    *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_new_with_mnemonic</NAME>
<RETURNS>GtkWidget *     </RETURNS>
const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_clicked</NAME>
<RETURNS>void            </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_pressed</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_released</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_enter</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_leave</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_relief</NAME>
<RETURNS>void                   </RETURNS>
GtkButton      *button, GtkReliefStyle  relief
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_relief</NAME>
<RETURNS>GtkReliefStyle         </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_label</NAME>
<RETURNS>void                   </RETURNS>
GtkButton      *button, const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_label</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_use_underline</NAME>
<RETURNS>void                   </RETURNS>
GtkButton      *button, gboolean        use_underline
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_use_underline</NAME>
<RETURNS>gboolean               </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_use_stock</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkButton      *button, gboolean        use_stock
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_use_stock</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_focus_on_click</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkButton      *button, gboolean        focus_on_click
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_focus_on_click</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_alignment</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkButton      *button, gfloat          xalign, gfloat          yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_alignment</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkButton      *button, gfloat         *xalign, gfloat         *yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_image</NAME>
<RETURNS>void                   </RETURNS>
GtkButton      *button, GtkWidget      *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_image</NAME>
<RETURNS>GtkWidget *            </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_image_position</NAME>
<RETURNS>void                   </RETURNS>
GtkButton      *button, GtkPositionType position
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_image_position</NAME>
<RETURNS>GtkPositionType        </RETURNS>
GtkButton      *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_set_always_show_image</NAME>
<RETURNS>void                   </RETURNS>
GtkButton   *button, gboolean     always_show
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_always_show_image</NAME>
<RETURNS>gboolean               </RETURNS>
GtkButton   *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_button_get_event_window</NAME>
<RETURNS>GdkWindow *            </RETURNS>
GtkButton      *button
</FUNCTION>
<STRUCT>
<NAME>GtkButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CALENDAR</NAME>
#define GTK_TYPE_CALENDAR                  (gtk_calendar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CALENDAR</NAME>
#define GTK_CALENDAR(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CALENDAR, GtkCalendar))
</MACRO>
<MACRO>
<NAME>GTK_CALENDAR_CLASS</NAME>
#define GTK_CALENDAR_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CALENDAR, GtkCalendarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CALENDAR</NAME>
#define GTK_IS_CALENDAR(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CALENDAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_CALENDAR_CLASS</NAME>
#define GTK_IS_CALENDAR_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CALENDAR))
</MACRO>
<MACRO>
<NAME>GTK_CALENDAR_GET_CLASS</NAME>
#define GTK_CALENDAR_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CALENDAR, GtkCalendarClass))
</MACRO>
<ENUM>
<NAME>GtkCalendarDisplayOptions</NAME>
typedef enum
{
  GTK_CALENDAR_SHOW_HEADING		= 1 << 0,
  GTK_CALENDAR_SHOW_DAY_NAMES		= 1 << 1,
  GTK_CALENDAR_NO_MONTH_CHANGE		= 1 << 2,
  GTK_CALENDAR_SHOW_WEEK_NUMBERS	= 1 << 3,
  GTK_CALENDAR_SHOW_DETAILS		= 1 << 5
} GtkCalendarDisplayOptions;
</ENUM>
<USER_FUNCTION>
<NAME>GtkCalendarDetailFunc</NAME>
<RETURNS>gchar *</RETURNS>
GtkCalendar *calendar,
                                         guint        year,
                                         guint        month,
                                         guint        day,
                                         gpointer     user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkCalendar</NAME>
struct _GtkCalendar
{
  GtkWidget widget;

  GtkCalendarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCalendarClass</NAME>
struct _GtkCalendarClass
{
  GtkWidgetClass parent_class;
  
  /* Signal handlers */
  void (* month_changed)		(GtkCalendar *calendar);
  void (* day_selected)			(GtkCalendar *calendar);
  void (* day_selected_double_click)	(GtkCalendar *calendar);
  void (* prev_month)			(GtkCalendar *calendar);
  void (* next_month)			(GtkCalendar *calendar);
  void (* prev_year)			(GtkCalendar *calendar);
  void (* next_year)			(GtkCalendar *calendar);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_calendar_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_select_month</NAME>
<RETURNS>void        </RETURNS>
GtkCalendar *calendar, guint	      month, guint	      year
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_select_day</NAME>
<RETURNS>void 	   </RETURNS>
GtkCalendar *calendar, guint	      day
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_mark_day</NAME>
<RETURNS>void        </RETURNS>
GtkCalendar *calendar, guint	      day
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_unmark_day</NAME>
<RETURNS>void        </RETURNS>
GtkCalendar *calendar, guint	      day
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_clear_marks</NAME>
<RETURNS>void 	   </RETURNS>
GtkCalendar *calendar
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_set_display_options</NAME>
<RETURNS>void 	   </RETURNS>
GtkCalendar    	      *calendar, GtkCalendarDisplayOptions flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_get_display_options</NAME>
<RETURNS>GtkCalendarDisplayOptions</RETURNS>
GtkCalendar   	      *calendar
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_get_date</NAME>
<RETURNS>void 	   </RETURNS>
GtkCalendar *calendar, guint	     *year, guint	     *month, guint	     *day
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_set_detail_func</NAME>
<RETURNS>void        </RETURNS>
GtkCalendar           *calendar, GtkCalendarDetailFunc  func, gpointer               data, GDestroyNotify         destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_set_detail_width_chars</NAME>
<RETURNS>void        </RETURNS>
GtkCalendar    *calendar, gint            chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_set_detail_height_rows</NAME>
<RETURNS>void        </RETURNS>
GtkCalendar    *calendar, gint            rows
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_get_detail_width_chars</NAME>
<RETURNS>gint        </RETURNS>
GtkCalendar    *calendar
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_get_detail_height_rows</NAME>
<RETURNS>gint        </RETURNS>
GtkCalendar    *calendar
</FUNCTION>
<FUNCTION>
<NAME>gtk_calendar_get_day_is_marked</NAME>
<RETURNS>gboolean    </RETURNS>
GtkCalendar    *calendar, guint           day
</FUNCTION>
<STRUCT>
<NAME>GtkCalendarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_AREA</NAME>
#define GTK_TYPE_CELL_AREA                (gtk_cell_area_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA</NAME>
#define GTK_CELL_AREA(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_AREA, GtkCellArea))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_CLASS</NAME>
#define GTK_CELL_AREA_CLASS(klass)        (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_AREA, GtkCellAreaClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_AREA</NAME>
#define GTK_IS_CELL_AREA(obj)     (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_AREA))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_AREA_CLASS</NAME>
#define GTK_IS_CELL_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_AREA))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_GET_CLASS</NAME>
#define GTK_CELL_AREA_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_AREA, GtkCellAreaClass))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID</NAME>
#define GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID(object, property_id, pspec) \
  G_OBJECT_WARN_INVALID_PSPEC ((object), "cell property id", (property_id), (pspec))
</MACRO>
<USER_FUNCTION>
<NAME>GtkCellCallback</NAME>
<RETURNS>gboolean </RETURNS>
GtkCellRenderer  *renderer,
                                        gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkCellAllocCallback</NAME>
<RETURNS>gboolean </RETURNS>
GtkCellRenderer    *renderer,
                                             const GdkRectangle *cell_area,
                                             const GdkRectangle *cell_background,
                                             gpointer            data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkCellArea</NAME>
struct _GtkCellArea
{
  /*< private >*/
  GInitiallyUnowned parent_instance;

  GtkCellAreaPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellAreaClass</NAME>
struct _GtkCellAreaClass
{
  /*< private >*/
  GInitiallyUnownedClass parent_class;

  /*< public >*/

  /* Basic methods */
  void               (* add)                             (GtkCellArea             *area,
                                                          GtkCellRenderer         *renderer);
  void               (* remove)                          (GtkCellArea             *area,
                                                          GtkCellRenderer         *renderer);
  void               (* foreach)                         (GtkCellArea             *area,
                                                          GtkCellCallback          callback,
                                                          gpointer                 callback_data);
  void               (* foreach_alloc)                   (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          const GdkRectangle      *cell_area,
                                                          const GdkRectangle      *background_area,
                                                          GtkCellAllocCallback     callback,
                                                          gpointer                 callback_data);
  gint               (* event)                           (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          GdkEvent                *event,
                                                          const GdkRectangle      *cell_area,
                                                          GtkCellRendererState     flags);
  void               (* render)                          (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          cairo_t                 *cr,
                                                          const GdkRectangle      *background_area,
                                                          const GdkRectangle      *cell_area,
                                                          GtkCellRendererState     flags,
                                                          gboolean                 paint_focus);
  void               (* apply_attributes)                (GtkCellArea             *area,
                                                          GtkTreeModel            *tree_model,
                                                          GtkTreeIter             *iter,
                                                          gboolean                 is_expander,
                                                          gboolean                 is_expanded);

  /* Geometry */
  GtkCellAreaContext *(* create_context)                 (GtkCellArea             *area);
  GtkCellAreaContext *(* copy_context)                   (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context);
  GtkSizeRequestMode (* get_request_mode)                (GtkCellArea             *area);
  void               (* get_preferred_width)             (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          gint                    *minimum_width,
                                                          gint                    *natural_width);
  void               (* get_preferred_height_for_width)  (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          gint                     width,
                                                          gint                    *minimum_height,
                                                          gint                    *natural_height);
  void               (* get_preferred_height)            (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          gint                    *minimum_height,
                                                          gint                    *natural_height);
  void               (* get_preferred_width_for_height)  (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          gint                     height,
                                                          gint                    *minimum_width,
                                                          gint                    *natural_width);

  /* Cell Properties */
  void               (* set_cell_property)               (GtkCellArea             *area,
                                                          GtkCellRenderer         *renderer,
                                                          guint                    property_id,
                                                          const GValue            *value,
                                                          GParamSpec              *pspec);
  void               (* get_cell_property)               (GtkCellArea             *area,
                                                          GtkCellRenderer         *renderer,
                                                          guint                    property_id,
                                                          GValue                  *value,
                                                          GParamSpec              *pspec);

  /* Focus */
  gboolean           (* focus)                           (GtkCellArea             *area,
                                                          GtkDirectionType         direction);
  gboolean           (* is_activatable)                  (GtkCellArea             *area);
  gboolean           (* activate)                        (GtkCellArea             *area,
                                                          GtkCellAreaContext      *context,
                                                          GtkWidget               *widget,
                                                          const GdkRectangle      *cell_area,
                                                          GtkCellRendererState     flags,
                                                          gboolean                 edit_only);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_area_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_add</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_remove</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_has_renderer</NAME>
<RETURNS>gboolean               </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_foreach</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellCallback       callback, gpointer              callback_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_foreach_alloc</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellAreaContext   *context, GtkWidget            *widget, const GdkRectangle   *cell_area, const GdkRectangle   *background_area, GtkCellAllocCallback  callback, gpointer              callback_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_event</NAME>
<RETURNS>gint                   </RETURNS>
GtkCellArea          *area, GtkCellAreaContext   *context, GtkWidget            *widget, GdkEvent             *event, const GdkRectangle   *cell_area, GtkCellRendererState  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_render</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellAreaContext   *context, GtkWidget            *widget, cairo_t              *cr, const GdkRectangle   *background_area, const GdkRectangle   *cell_area, GtkCellRendererState  flags, gboolean              paint_focus
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_cell_allocation</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellAreaContext   *context, GtkWidget            *widget, GtkCellRenderer      *renderer, const GdkRectangle   *cell_area, GdkRectangle         *allocation
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_cell_at_position</NAME>
<RETURNS>GtkCellRenderer       *</RETURNS>
GtkCellArea          *area, GtkCellAreaContext   *context, GtkWidget            *widget, const GdkRectangle   *cell_area, gint                  x, gint                  y, GdkRectangle         *alloc_area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_create_context</NAME>
<RETURNS>GtkCellAreaContext    *</RETURNS>
GtkCellArea        *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_copy_context</NAME>
<RETURNS>GtkCellAreaContext    *</RETURNS>
GtkCellArea        *area, GtkCellAreaContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_request_mode</NAME>
<RETURNS>GtkSizeRequestMode     </RETURNS>
GtkCellArea        *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_preferred_width</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellAreaContext *context, GtkWidget          *widget, gint               *minimum_width, gint               *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_preferred_height_for_width</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellAreaContext *context, GtkWidget          *widget, gint                width, gint               *minimum_height, gint               *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_preferred_height</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellAreaContext *context, GtkWidget          *widget, gint               *minimum_height, gint               *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_preferred_width_for_height</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellAreaContext *context, GtkWidget          *widget, gint                height, gint               *minimum_width, gint               *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_current_path_string</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkCellArea        *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_apply_attributes</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkTreeModel       *tree_model, GtkTreeIter        *iter, gboolean            is_expander, gboolean            is_expanded
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_attribute_connect</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *attribute, gint                column
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_attribute_disconnect</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *attribute
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_attribute_get_column</NAME>
<RETURNS>gint                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *attribute
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_class_install_cell_property</NAME>
<RETURNS>void                   </RETURNS>
GtkCellAreaClass   *aclass, guint               property_id, GParamSpec         *pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_class_find_cell_property</NAME>
<RETURNS>GParamSpec *           </RETURNS>
GtkCellAreaClass   *aclass, const gchar        *property_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_class_list_cell_properties</NAME>
<RETURNS>GParamSpec **          </RETURNS>
GtkCellAreaClass   *aclass, guint                   *n_properties
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_add_with_properties</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar     *first_prop_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_cell_set</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *first_prop_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_cell_get</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *first_prop_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_cell_set_valist</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *first_property_name, va_list             var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_cell_get_valist</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *first_property_name, va_list             var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_cell_set_property</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *property_name, const GValue       *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_cell_get_property</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, const gchar        *property_name, GValue             *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_is_activatable</NAME>
<RETURNS>gboolean               </RETURNS>
GtkCellArea         *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_activate</NAME>
<RETURNS>gboolean               </RETURNS>
GtkCellArea         *area, GtkCellAreaContext  *context, GtkWidget           *widget, const GdkRectangle  *cell_area, GtkCellRendererState flags, gboolean             edit_only
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_focus</NAME>
<RETURNS>gboolean               </RETURNS>
GtkCellArea         *area, GtkDirectionType     direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_set_focus_cell</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_focus_cell</NAME>
<RETURNS>GtkCellRenderer       *</RETURNS>
GtkCellArea          *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_add_focus_sibling</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer, GtkCellRenderer      *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_remove_focus_sibling</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer, GtkCellRenderer      *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_is_focus_sibling</NAME>
<RETURNS>gboolean               </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer, GtkCellRenderer      *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_focus_siblings</NAME>
<RETURNS>const GList  *         </RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_focus_from_sibling</NAME>
<RETURNS>GtkCellRenderer       *</RETURNS>
GtkCellArea          *area, GtkCellRenderer      *renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_edited_cell</NAME>
<RETURNS>GtkCellRenderer       *</RETURNS>
GtkCellArea          *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_get_edit_widget</NAME>
<RETURNS>GtkCellEditable       *</RETURNS>
GtkCellArea          *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_activate_cell</NAME>
<RETURNS>gboolean               </RETURNS>
GtkCellArea          *area, GtkWidget            *widget, GtkCellRenderer      *renderer, GdkEvent             *event, const GdkRectangle   *cell_area, GtkCellRendererState  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_stop_editing</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea          *area, gboolean              canceled
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_inner_cell_area</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkWidget          *widget, const GdkRectangle *cell_area, GdkRectangle       *inner_area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_request_renderer</NAME>
<RETURNS>void                   </RETURNS>
GtkCellArea        *area, GtkCellRenderer    *renderer, GtkOrientation      orientation, GtkWidget          *widget, gint                for_size, gint               *minimum_size, gint               *natural_size
</FUNCTION>
<STRUCT>
<NAME>GtkCellAreaContext</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkCellAreaPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_AREA_BOX</NAME>
#define GTK_TYPE_CELL_AREA_BOX            (gtk_cell_area_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_BOX</NAME>
#define GTK_CELL_AREA_BOX(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_AREA_BOX, GtkCellAreaBox))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_BOX_CLASS</NAME>
#define GTK_CELL_AREA_BOX_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_AREA_BOX, GtkCellAreaBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_AREA_BOX</NAME>
#define GTK_IS_CELL_AREA_BOX(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_AREA_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_AREA_BOX_CLASS</NAME>
#define GTK_IS_CELL_AREA_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_AREA_BOX))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_BOX_GET_CLASS</NAME>
#define GTK_CELL_AREA_BOX_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_AREA_BOX, GtkCellAreaBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkCellAreaBox</NAME>
struct _GtkCellAreaBox
{
  /*< private >*/
  GtkCellArea parent_instance;

  GtkCellAreaBoxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellAreaBoxClass</NAME>
struct _GtkCellAreaBoxClass
{
  /*< private >*/
  GtkCellAreaClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_area_box_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_box_new</NAME>
<RETURNS>GtkCellArea  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_box_pack_start</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaBox  *box, GtkCellRenderer *renderer, gboolean         expand, gboolean         align, gboolean         fixed
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_box_pack_end</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaBox  *box, GtkCellRenderer *renderer, gboolean         expand, gboolean         align, gboolean         fixed
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_box_get_spacing</NAME>
<RETURNS>gint          </RETURNS>
GtkCellAreaBox  *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_box_set_spacing</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaBox  *box, gint             spacing
</FUNCTION>
<STRUCT>
<NAME>GtkCellAreaBoxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_AREA_CONTEXT</NAME>
#define GTK_TYPE_CELL_AREA_CONTEXT            (gtk_cell_area_context_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_CONTEXT</NAME>
#define GTK_CELL_AREA_CONTEXT(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_AREA_CONTEXT, GtkCellAreaContext))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_CONTEXT_CLASS</NAME>
#define GTK_CELL_AREA_CONTEXT_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_AREA_CONTEXT, GtkCellAreaContextClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_AREA_CONTEXT</NAME>
#define GTK_IS_CELL_AREA_CONTEXT(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_AREA_CONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_AREA_CONTEXT_CLASS</NAME>
#define GTK_IS_CELL_AREA_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_AREA_CONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_CELL_AREA_CONTEXT_GET_CLASS</NAME>
#define GTK_CELL_AREA_CONTEXT_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_AREA_CONTEXT, GtkCellAreaContextClass))
</MACRO>
<STRUCT>
<NAME>GtkCellAreaContext</NAME>
struct _GtkCellAreaContext
{
  /*< private >*/
  GObject parent_instance;

  GtkCellAreaContextPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellAreaContextClass</NAME>
struct _GtkCellAreaContextClass
{
  /*< private >*/
  GObjectClass parent_class;

  /*< public >*/
  void    (* allocate)                       (GtkCellAreaContext *context,
                                              gint                width,
                                              gint                height);
  void    (* reset)                          (GtkCellAreaContext *context);
  void    (* get_preferred_height_for_width) (GtkCellAreaContext *context,
                                              gint                width,
                                              gint               *minimum_height,
                                              gint               *natural_height);
  void    (* get_preferred_width_for_height) (GtkCellAreaContext *context,
                                              gint                height,
                                              gint               *minimum_width,
                                              gint               *natural_width);

  /*< private >*/
  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_area_context_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_get_area</NAME>
<RETURNS>GtkCellArea  *</RETURNS>
GtkCellAreaContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_allocate</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_reset</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_get_preferred_width</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint               *minimum_width, gint               *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_get_preferred_height</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint               *minimum_height, gint               *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_get_preferred_height_for_width</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint                width, gint               *minimum_height, gint               *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_get_preferred_width_for_height</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint                height, gint               *minimum_width, gint               *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_get_allocation</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint               *width, gint               *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_push_preferred_width</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint                minimum_width, gint                natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_area_context_push_preferred_height</NAME>
<RETURNS>void          </RETURNS>
GtkCellAreaContext *context, gint                minimum_height, gint                natural_height
</FUNCTION>
<STRUCT>
<NAME>GtkCellAreaContextPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_EDITABLE</NAME>
#define GTK_TYPE_CELL_EDITABLE            (gtk_cell_editable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_EDITABLE</NAME>
#define GTK_CELL_EDITABLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditable))
</MACRO>
<MACRO>
<NAME>GTK_CELL_EDITABLE_CLASS</NAME>
#define GTK_CELL_EDITABLE_CLASS(obj)      (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditableIface))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_EDITABLE</NAME>
#define GTK_IS_CELL_EDITABLE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_EDITABLE))
</MACRO>
<MACRO>
<NAME>GTK_CELL_EDITABLE_GET_IFACE</NAME>
#define GTK_CELL_EDITABLE_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_CELL_EDITABLE, GtkCellEditableIface))
</MACRO>
<STRUCT>
<NAME>GtkCellEditableIface</NAME>
struct _GtkCellEditableIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* signals */
  void (* editing_done)  (GtkCellEditable *cell_editable);
  void (* remove_widget) (GtkCellEditable *cell_editable);

  /* virtual table */
  void (* start_editing) (GtkCellEditable *cell_editable,
			  GdkEvent        *event);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_editable_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_editable_start_editing</NAME>
<RETURNS>void   </RETURNS>
GtkCellEditable *cell_editable, GdkEvent        *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_editable_editing_done</NAME>
<RETURNS>void   </RETURNS>
GtkCellEditable *cell_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_editable_remove_widget</NAME>
<RETURNS>void   </RETURNS>
GtkCellEditable *cell_editable
</FUNCTION>
<STRUCT>
<NAME>GtkCellEditable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_LAYOUT</NAME>
#define GTK_TYPE_CELL_LAYOUT            (gtk_cell_layout_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_LAYOUT</NAME>
#define GTK_CELL_LAYOUT(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_LAYOUT, GtkCellLayout))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_LAYOUT</NAME>
#define GTK_IS_CELL_LAYOUT(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_LAYOUT))
</MACRO>
<MACRO>
<NAME>GTK_CELL_LAYOUT_GET_IFACE</NAME>
#define GTK_CELL_LAYOUT_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_CELL_LAYOUT, GtkCellLayoutIface))
</MACRO>
<USER_FUNCTION>
<NAME>GtkCellLayoutDataFunc</NAME>
<RETURNS>void </RETURNS>
GtkCellLayout   *cell_layout,
                                        GtkCellRenderer *cell,
                                        GtkTreeModel    *tree_model,
                                        GtkTreeIter     *iter,
                                        gpointer         data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkCellLayoutIface</NAME>
struct _GtkCellLayoutIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* Virtual Table */
  void (* pack_start)         (GtkCellLayout         *cell_layout,
                               GtkCellRenderer       *cell,
                               gboolean               expand);
  void (* pack_end)           (GtkCellLayout         *cell_layout,
                               GtkCellRenderer       *cell,
                               gboolean               expand);
  void (* clear)              (GtkCellLayout         *cell_layout);
  void (* add_attribute)      (GtkCellLayout         *cell_layout,
                               GtkCellRenderer       *cell,
                               const gchar           *attribute,
                               gint                   column);
  void (* set_cell_data_func) (GtkCellLayout         *cell_layout,
                               GtkCellRenderer       *cell,
                               GtkCellLayoutDataFunc  func,
                               gpointer               func_data,
                               GDestroyNotify         destroy);
  void (* clear_attributes)   (GtkCellLayout         *cell_layout,
                               GtkCellRenderer       *cell);
  void (* reorder)            (GtkCellLayout         *cell_layout,
                               GtkCellRenderer       *cell,
                               gint                   position);
  GList* (* get_cells)        (GtkCellLayout         *cell_layout);

  GtkCellArea *(* get_area)   (GtkCellLayout         *cell_layout);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_layout_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_pack_start</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell, gboolean               expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_pack_end</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell, gboolean               expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_get_cells</NAME>
<RETURNS>GList  *</RETURNS>
GtkCellLayout         *cell_layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_clear</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_set_attributes</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_add_attribute</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell, const gchar           *attribute, gint                   column
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_set_cell_data_func</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell, GtkCellLayoutDataFunc  func, gpointer               func_data, GDestroyNotify         destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_clear_attributes</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_reorder</NAME>
<RETURNS>void   </RETURNS>
GtkCellLayout         *cell_layout, GtkCellRenderer       *cell, gint                   position
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_layout_get_area</NAME>
<RETURNS>GtkCellArea  *</RETURNS>
GtkCellLayout         *cell_layout
</FUNCTION>
<STRUCT>
<NAME>GtkCellLayout</NAME>
</STRUCT>
<ENUM>
<NAME>GtkCellRendererState</NAME>
typedef enum
{
  GTK_CELL_RENDERER_SELECTED    = 1 << 0,
  GTK_CELL_RENDERER_PRELIT      = 1 << 1,
  GTK_CELL_RENDERER_INSENSITIVE = 1 << 2,
  /* this flag means the cell is in the sort column/row */
  GTK_CELL_RENDERER_SORTED      = 1 << 3,
  GTK_CELL_RENDERER_FOCUSED     = 1 << 4,
  GTK_CELL_RENDERER_EXPANDABLE  = 1 << 5,
  GTK_CELL_RENDERER_EXPANDED    = 1 << 6
} GtkCellRendererState;
</ENUM>
<ENUM>
<NAME>GtkCellRendererMode</NAME>
typedef enum
{
  GTK_CELL_RENDERER_MODE_INERT,
  GTK_CELL_RENDERER_MODE_ACTIVATABLE,
  GTK_CELL_RENDERER_MODE_EDITABLE
} GtkCellRendererMode;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER</NAME>
#define GTK_TYPE_CELL_RENDERER		  (gtk_cell_renderer_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER</NAME>
#define GTK_CELL_RENDERER(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER, GtkCellRenderer))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_CLASS</NAME>
#define GTK_CELL_RENDERER_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER, GtkCellRendererClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER</NAME>
#define GTK_IS_CELL_RENDERER(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER, GtkCellRendererClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRenderer</NAME>
struct _GtkCellRenderer
{
  GInitiallyUnowned parent_instance;

  /*< private >*/
  GtkCellRendererPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererClass</NAME>
struct _GtkCellRendererClass
{
  /*< private >*/
  GInitiallyUnownedClass parent_class;

  /*< public >*/

  /* vtable - not signals */
  GtkSizeRequestMode (* get_request_mode)                (GtkCellRenderer      *cell);
  void               (* get_preferred_width)             (GtkCellRenderer      *cell,
                                                          GtkWidget            *widget,
                                                          gint                 *minimum_size,
                                                          gint                 *natural_size);
  void               (* get_preferred_height_for_width)  (GtkCellRenderer      *cell,
                                                          GtkWidget            *widget,
                                                          gint                  width,
                                                          gint                 *minimum_height,
                                                          gint                 *natural_height);
  void               (* get_preferred_height)            (GtkCellRenderer      *cell,
                                                          GtkWidget            *widget,
                                                          gint                 *minimum_size,
                                                          gint                 *natural_size);
  void               (* get_preferred_width_for_height)  (GtkCellRenderer      *cell,
                                                          GtkWidget            *widget,
                                                          gint                  height,
                                                          gint                 *minimum_width,
                                                          gint                 *natural_width);
  void               (* get_aligned_area)                (GtkCellRenderer      *cell,
                                                          GtkWidget            *widget,
							  GtkCellRendererState  flags,
                                                          const GdkRectangle   *cell_area,
                                                          GdkRectangle         *aligned_area);
  void               (* get_size)                        (GtkCellRenderer      *cell,
                                                          GtkWidget            *widget,
                                                          const GdkRectangle   *cell_area,
                                                          gint                 *x_offset,
                                                          gint                 *y_offset,
                                                          gint                 *width,
                                                          gint                 *height);
  void               (* render)                          (GtkCellRenderer      *cell,
                                                          cairo_t              *cr,
                                                          GtkWidget            *widget,
                                                          const GdkRectangle   *background_area,
                                                          const GdkRectangle   *cell_area,
                                                          GtkCellRendererState  flags);
  gboolean           (* activate)                        (GtkCellRenderer      *cell,
                                                          GdkEvent             *event,
                                                          GtkWidget            *widget,
                                                          const gchar          *path,
                                                          const GdkRectangle   *background_area,
                                                          const GdkRectangle   *cell_area,
                                                          GtkCellRendererState  flags);
  GtkCellEditable *  (* start_editing)                   (GtkCellRenderer      *cell,
                                                          GdkEvent             *event,
                                                          GtkWidget            *widget,
                                                          const gchar          *path,
                                                          const GdkRectangle   *background_area,
                                                          const GdkRectangle   *cell_area,
                                                          GtkCellRendererState  flags);

  /* Signals */
  void (* editing_canceled) (GtkCellRenderer *cell);
  void (* editing_started)  (GtkCellRenderer *cell,
			     GtkCellEditable *editable,
			     const gchar     *path);

  /*< private >*/

  GtkCellRendererClassPrivate *priv;

  /* Padding for future expansion */
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_request_mode</NAME>
<RETURNS>GtkSizeRequestMode  </RETURNS>
GtkCellRenderer    *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_preferred_width</NAME>
<RETURNS>void                </RETURNS>
GtkCellRenderer    *cell, GtkWidget          *widget, gint               *minimum_size, gint               *natural_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_preferred_height_for_width</NAME>
<RETURNS>void                </RETURNS>
GtkCellRenderer    *cell, GtkWidget          *widget, gint                width, gint               *minimum_height, gint               *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_preferred_height</NAME>
<RETURNS>void                </RETURNS>
GtkCellRenderer    *cell, GtkWidget          *widget, gint               *minimum_size, gint               *natural_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_preferred_width_for_height</NAME>
<RETURNS>void                </RETURNS>
GtkCellRenderer    *cell, GtkWidget          *widget, gint                height, gint               *minimum_width, gint               *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_preferred_size</NAME>
<RETURNS>void                </RETURNS>
GtkCellRenderer    *cell, GtkWidget          *widget, GtkRequisition     *minimum_size, GtkRequisition     *natural_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_aligned_area</NAME>
<RETURNS>void                </RETURNS>
GtkCellRenderer    *cell, GtkWidget          *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle       *aligned_area
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_size</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, GtkWidget            *widget, const GdkRectangle   *cell_area, gint                 *x_offset, gint                 *y_offset, gint                 *width, gint                 *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_render</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, cairo_t              *cr, GtkWidget            *widget, const GdkRectangle   *background_area, const GdkRectangle   *cell_area, GtkCellRendererState  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_activate</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCellRenderer      *cell, GdkEvent             *event, GtkWidget            *widget, const gchar          *path, const GdkRectangle   *background_area, const GdkRectangle   *cell_area, GtkCellRendererState  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_start_editing</NAME>
<RETURNS>GtkCellEditable  *</RETURNS>
GtkCellRenderer      *cell, GdkEvent             *event, GtkWidget            *widget, const gchar          *path, const GdkRectangle   *background_area, const GdkRectangle   *cell_area, GtkCellRendererState  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_set_fixed_size</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gint                  width, gint                  height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_fixed_size</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gint                 *width, gint                 *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_set_alignment</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gfloat                xalign, gfloat                yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_alignment</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gfloat               *xalign, gfloat               *yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_set_padding</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gint                  xpad, gint                  ypad
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_padding</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gint                 *xpad, gint                 *ypad
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_set_visible</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gboolean              visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_visible</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCellRenderer      *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_set_sensitive</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gboolean              sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_sensitive</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCellRenderer      *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_is_activatable</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCellRenderer      *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_stop_editing</NAME>
<RETURNS>void              </RETURNS>
GtkCellRenderer      *cell, gboolean              canceled
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_get_state</NAME>
<RETURNS>GtkStateFlags    </RETURNS>
GtkCellRenderer      *cell, GtkWidget            *widget, GtkCellRendererState  cell_state
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_class_set_accessible_type</NAME>
<RETURNS>void  </RETURNS>
GtkCellRendererClass *renderer_class, GType                 type
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererClassPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_ACCEL</NAME>
#define GTK_TYPE_CELL_RENDERER_ACCEL            (gtk_cell_renderer_accel_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_ACCEL</NAME>
#define GTK_CELL_RENDERER_ACCEL(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_ACCEL, GtkCellRendererAccel))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_ACCEL_CLASS</NAME>
#define GTK_CELL_RENDERER_ACCEL_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_ACCEL, GtkCellRendererAccelClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_ACCEL</NAME>
#define GTK_IS_CELL_RENDERER_ACCEL(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_ACCEL))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_ACCEL_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_ACCEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_ACCEL))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_ACCEL_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_ACCEL_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_ACCEL, GtkCellRendererAccelClass))
</MACRO>
<ENUM>
<NAME>GtkCellRendererAccelMode</NAME>
typedef enum
{
  GTK_CELL_RENDERER_ACCEL_MODE_GTK,
  GTK_CELL_RENDERER_ACCEL_MODE_OTHER
} GtkCellRendererAccelMode;
</ENUM>
<STRUCT>
<NAME>GtkCellRendererAccel</NAME>
struct _GtkCellRendererAccel
{
  GtkCellRendererText parent;

  /*< private >*/
  GtkCellRendererAccelPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererAccelClass</NAME>
struct _GtkCellRendererAccelClass
{
  GtkCellRendererTextClass parent_class;

  void (* accel_edited)  (GtkCellRendererAccel *accel,
		 	  const gchar          *path_string,
			  guint                 accel_key,
			  GdkModifierType       accel_mods,
			  guint                 hardware_keycode);

  void (* accel_cleared) (GtkCellRendererAccel *accel,
			  const gchar          *path_string);

  /* Padding for future expansion */
  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_accel_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_accel_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererAccelPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_COMBO</NAME>
#define GTK_TYPE_CELL_RENDERER_COMBO		(gtk_cell_renderer_combo_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_COMBO</NAME>
#define GTK_CELL_RENDERER_COMBO(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_COMBO, GtkCellRendererCombo))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_COMBO_CLASS</NAME>
#define GTK_CELL_RENDERER_COMBO_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_COMBO, GtkCellRendererComboClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_COMBO</NAME>
#define GTK_IS_CELL_RENDERER_COMBO(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_COMBO))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_COMBO_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_COMBO_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_COMBO))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_COMBO_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_COMBO_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_COMBO, GtkCellRendererTextClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererCombo</NAME>
struct _GtkCellRendererCombo
{
  GtkCellRendererText parent;

  /*< private >*/
  GtkCellRendererComboPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererComboClass</NAME>
struct _GtkCellRendererComboClass
{
  GtkCellRendererTextClass parent;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_combo_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_combo_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererComboPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_PIXBUF</NAME>
#define GTK_TYPE_CELL_RENDERER_PIXBUF			(gtk_cell_renderer_pixbuf_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_PIXBUF</NAME>
#define GTK_CELL_RENDERER_PIXBUF(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbuf))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_PIXBUF_CLASS</NAME>
#define GTK_CELL_RENDERER_PIXBUF_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbufClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_PIXBUF</NAME>
#define GTK_IS_CELL_RENDERER_PIXBUF(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_PIXBUF))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_PIXBUF_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_PIXBUF_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_PIXBUF))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_PIXBUF_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_PIXBUF_GET_CLASS(obj)         (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_PIXBUF, GtkCellRendererPixbufClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererPixbuf</NAME>
struct _GtkCellRendererPixbuf
{
  GtkCellRenderer parent;

  /*< private >*/
  GtkCellRendererPixbufPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererPixbufClass</NAME>
struct _GtkCellRendererPixbufClass
{
  GtkCellRendererClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_pixbuf_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_pixbuf_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererPixbufPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_PROGRESS</NAME>
#define GTK_TYPE_CELL_RENDERER_PROGRESS (gtk_cell_renderer_progress_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_PROGRESS</NAME>
#define GTK_CELL_RENDERER_PROGRESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_PROGRESS, GtkCellRendererProgress))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_PROGRESS_CLASS</NAME>
#define GTK_CELL_RENDERER_PROGRESS_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_PROGRESS, GtkCellRendererProgressClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_PROGRESS</NAME>
#define GTK_IS_CELL_RENDERER_PROGRESS(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_PROGRESS))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_PROGRESS_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_PROGRESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_PROGRESS))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_PROGRESS_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_PROGRESS_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_PROGRESS, GtkCellRendererProgressClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererProgress</NAME>
struct _GtkCellRendererProgress
{
  GtkCellRenderer parent_instance;

  /*< private >*/
  GtkCellRendererProgressPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererProgressClass</NAME>
struct _GtkCellRendererProgressClass
{
  GtkCellRendererClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_progress_get_type</NAME>
<RETURNS>GType 		 </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_progress_new</NAME>
<RETURNS>GtkCellRenderer * </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererProgressPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_SPIN</NAME>
#define GTK_TYPE_CELL_RENDERER_SPIN		(gtk_cell_renderer_spin_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_SPIN</NAME>
#define GTK_CELL_RENDERER_SPIN(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_SPIN, GtkCellRendererSpin))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_SPIN_CLASS</NAME>
#define GTK_CELL_RENDERER_SPIN_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_SPIN, GtkCellRendererSpinClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_SPIN</NAME>
#define GTK_IS_CELL_RENDERER_SPIN(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_SPIN))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_SPIN_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_SPIN_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_SPIN))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_SPIN_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_SPIN_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_SPIN, GtkCellRendererTextClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererSpin</NAME>
struct _GtkCellRendererSpin
{
  GtkCellRendererText parent;

  /*< private >*/
  GtkCellRendererSpinPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererSpinClass</NAME>
struct _GtkCellRendererSpinClass
{
  GtkCellRendererTextClass parent;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_spin_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_spin_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererSpinPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_SPINNER</NAME>
#define GTK_TYPE_CELL_RENDERER_SPINNER            (gtk_cell_renderer_spinner_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_SPINNER</NAME>
#define GTK_CELL_RENDERER_SPINNER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_SPINNER, GtkCellRendererSpinner))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_SPINNER_CLASS</NAME>
#define GTK_CELL_RENDERER_SPINNER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_SPINNER, GtkCellRendererSpinnerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_SPINNER</NAME>
#define GTK_IS_CELL_RENDERER_SPINNER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_SPINNER))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_SPINNER_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_SPINNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_SPINNER))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_SPINNER_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_SPINNER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_SPINNER, GtkCellRendererSpinnerClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererSpinner</NAME>
struct _GtkCellRendererSpinner
{
  GtkCellRenderer                parent;

  /*< private >*/
  GtkCellRendererSpinnerPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererSpinnerClass</NAME>
struct _GtkCellRendererSpinnerClass
{
  GtkCellRendererClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_spinner_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_spinner_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererSpinnerPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_TEXT</NAME>
#define GTK_TYPE_CELL_RENDERER_TEXT		(gtk_cell_renderer_text_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_TEXT</NAME>
#define GTK_CELL_RENDERER_TEXT(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererText))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_TEXT_CLASS</NAME>
#define GTK_CELL_RENDERER_TEXT_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererTextClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_TEXT</NAME>
#define GTK_IS_CELL_RENDERER_TEXT(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_TEXT))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_TEXT_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_TEXT_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_TEXT))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_TEXT_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_TEXT_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_TEXT, GtkCellRendererTextClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererText</NAME>
struct _GtkCellRendererText
{
  GtkCellRenderer parent;

  /*< private >*/
  GtkCellRendererTextPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererTextClass</NAME>
struct _GtkCellRendererTextClass
{
  GtkCellRendererClass parent_class;

  void (* edited) (GtkCellRendererText *cell_renderer_text,
		   const gchar         *path,
		   const gchar         *new_text);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_text_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_text_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_text_set_fixed_height_from_font</NAME>
<RETURNS>void              </RETURNS>
GtkCellRendererText *renderer, gint                 number_of_rows
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererTextPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_RENDERER_TOGGLE</NAME>
#define GTK_TYPE_CELL_RENDERER_TOGGLE			(gtk_cell_renderer_toggle_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_TOGGLE</NAME>
#define GTK_CELL_RENDERER_TOGGLE(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggle))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_TOGGLE_CLASS</NAME>
#define GTK_CELL_RENDERER_TOGGLE_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_TOGGLE</NAME>
#define GTK_IS_CELL_RENDERER_TOGGLE(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_RENDERER_TOGGLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_RENDERER_TOGGLE_CLASS</NAME>
#define GTK_IS_CELL_RENDERER_TOGGLE_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CELL_RENDERER_TOGGLE))
</MACRO>
<MACRO>
<NAME>GTK_CELL_RENDERER_TOGGLE_GET_CLASS</NAME>
#define GTK_CELL_RENDERER_TOGGLE_GET_CLASS(obj)         (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CELL_RENDERER_TOGGLE, GtkCellRendererToggleClass))
</MACRO>
<STRUCT>
<NAME>GtkCellRendererToggle</NAME>
struct _GtkCellRendererToggle
{
  GtkCellRenderer parent;

  /*< private >*/
  GtkCellRendererTogglePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellRendererToggleClass</NAME>
struct _GtkCellRendererToggleClass
{
  GtkCellRendererClass parent_class;

  void (* toggled) (GtkCellRendererToggle *cell_renderer_toggle,
		    const gchar                 *path);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_new</NAME>
<RETURNS>GtkCellRenderer  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_get_radio</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCellRendererToggle *toggle
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_set_radio</NAME>
<RETURNS>void              </RETURNS>
GtkCellRendererToggle *toggle, gboolean               radio
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_get_active</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCellRendererToggle *toggle
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_set_active</NAME>
<RETURNS>void             </RETURNS>
GtkCellRendererToggle *toggle, gboolean               setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_get_activatable</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCellRendererToggle *toggle
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_renderer_toggle_set_activatable</NAME>
<RETURNS>void             </RETURNS>
GtkCellRendererToggle *toggle, gboolean               setting
</FUNCTION>
<STRUCT>
<NAME>GtkCellRendererTogglePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CELL_VIEW</NAME>
#define GTK_TYPE_CELL_VIEW                (gtk_cell_view_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CELL_VIEW</NAME>
#define GTK_CELL_VIEW(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CELL_VIEW, GtkCellView))
</MACRO>
<MACRO>
<NAME>GTK_CELL_VIEW_CLASS</NAME>
#define GTK_CELL_VIEW_CLASS(vtable)       (G_TYPE_CHECK_CLASS_CAST ((vtable), GTK_TYPE_CELL_VIEW, GtkCellViewClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_VIEW</NAME>
#define GTK_IS_CELL_VIEW(obj)             (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CELL_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_IS_CELL_VIEW_CLASS</NAME>
#define GTK_IS_CELL_VIEW_CLASS(vtable)    (G_TYPE_CHECK_CLASS_TYPE ((vtable), GTK_TYPE_CELL_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_CELL_VIEW_GET_CLASS</NAME>
#define GTK_CELL_VIEW_GET_CLASS(inst)     (G_TYPE_INSTANCE_GET_CLASS ((inst), GTK_TYPE_CELL_VIEW, GtkCellViewClass))
</MACRO>
<STRUCT>
<NAME>GtkCellView</NAME>
struct _GtkCellView
{
  GtkWidget parent_instance;

  /*< private >*/
  GtkCellViewPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCellViewClass</NAME>
struct _GtkCellViewClass
{
  GtkWidgetClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_cell_view_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_new</NAME>
<RETURNS>GtkWidget         *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_new_with_context</NAME>
<RETURNS>GtkWidget         *</RETURNS>
GtkCellArea        *area, GtkCellAreaContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_new_with_text</NAME>
<RETURNS>GtkWidget         *</RETURNS>
const gchar     *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_new_with_markup</NAME>
<RETURNS>GtkWidget         *</RETURNS>
const gchar     *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_new_with_pixbuf</NAME>
<RETURNS>GtkWidget         *</RETURNS>
GdkPixbuf       *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_set_model</NAME>
<RETURNS>void               </RETURNS>
GtkCellView     *cell_view, GtkTreeModel    *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_get_model</NAME>
<RETURNS>GtkTreeModel      *</RETURNS>
GtkCellView     *cell_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_set_displayed_row</NAME>
<RETURNS>void               </RETURNS>
GtkCellView     *cell_view, GtkTreePath     *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_get_displayed_row</NAME>
<RETURNS>GtkTreePath       *</RETURNS>
GtkCellView     *cell_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_set_background_rgba</NAME>
<RETURNS>void               </RETURNS>
GtkCellView     *cell_view, const GdkRGBA   *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_get_draw_sensitive</NAME>
<RETURNS>gboolean           </RETURNS>
GtkCellView     *cell_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_set_draw_sensitive</NAME>
<RETURNS>void               </RETURNS>
GtkCellView     *cell_view, gboolean         draw_sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_get_fit_model</NAME>
<RETURNS>gboolean           </RETURNS>
GtkCellView     *cell_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_set_fit_model</NAME>
<RETURNS>void               </RETURNS>
GtkCellView     *cell_view, gboolean         fit_model
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_get_size_of_row</NAME>
<DEPRECATED/>
<RETURNS>gboolean           </RETURNS>
GtkCellView     *cell_view, GtkTreePath     *path, GtkRequisition  *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_cell_view_set_background_color</NAME>
<DEPRECATED/>
<RETURNS>void               </RETURNS>
GtkCellView     *cell_view, const GdkColor  *color
</FUNCTION>
<STRUCT>
<NAME>GtkCellViewPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CHECK_BUTTON</NAME>
#define GTK_TYPE_CHECK_BUTTON                  (gtk_check_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CHECK_BUTTON</NAME>
#define GTK_CHECK_BUTTON(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButton))
</MACRO>
<MACRO>
<NAME>GTK_CHECK_BUTTON_CLASS</NAME>
#define GTK_CHECK_BUTTON_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CHECK_BUTTON, GtkCheckButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CHECK_BUTTON</NAME>
#define GTK_IS_CHECK_BUTTON(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CHECK_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_CHECK_BUTTON_CLASS</NAME>
#define GTK_IS_CHECK_BUTTON_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CHECK_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_CHECK_BUTTON_GET_CLASS</NAME>
#define GTK_CHECK_BUTTON_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CHECK_BUTTON, GtkCheckButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkCheckButton</NAME>
struct _GtkCheckButton
{
  GtkToggleButton toggle_button;
};
</STRUCT>
<STRUCT>
<NAME>GtkCheckButtonClass</NAME>
struct _GtkCheckButtonClass
{
  GtkToggleButtonClass parent_class;

  void (* draw_indicator) (GtkCheckButton *check_button,
			   cairo_t        *cr);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_check_button_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_button_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_button_new_with_label</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_button_new_with_mnemonic</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_button_get_indicator_node</NAME>
<RETURNS>GtkCssNode  *</RETURNS>
GtkCheckButton *check_button
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CHECK_MENU_ITEM</NAME>
#define GTK_TYPE_CHECK_MENU_ITEM            (gtk_check_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CHECK_MENU_ITEM</NAME>
#define GTK_CHECK_MENU_ITEM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItem))
</MACRO>
<MACRO>
<NAME>GTK_CHECK_MENU_ITEM_CLASS</NAME>
#define GTK_CHECK_MENU_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CHECK_MENU_ITEM</NAME>
#define GTK_IS_CHECK_MENU_ITEM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CHECK_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_CHECK_MENU_ITEM_CLASS</NAME>
#define GTK_IS_CHECK_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CHECK_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_CHECK_MENU_ITEM_GET_CLASS</NAME>
#define GTK_CHECK_MENU_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CHECK_MENU_ITEM, GtkCheckMenuItemClass))
</MACRO>
<STRUCT>
<NAME>GtkCheckMenuItem</NAME>
struct _GtkCheckMenuItem
{
  GtkMenuItem menu_item;

  /*< private >*/
  GtkCheckMenuItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCheckMenuItemClass</NAME>
struct _GtkCheckMenuItemClass
{
  GtkMenuItemClass parent_class;

  /*< public >*/

  void (* toggled)	  (GtkCheckMenuItem *check_menu_item);
  void (* draw_indicator) (GtkCheckMenuItem *check_menu_item,
			   cairo_t          *cr);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_check_menu_item_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_new_with_label</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_new_with_mnemonic</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_set_active</NAME>
<RETURNS>void        </RETURNS>
GtkCheckMenuItem *check_menu_item, gboolean          is_active
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_get_active</NAME>
<RETURNS>gboolean    </RETURNS>
GtkCheckMenuItem *check_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_toggled</NAME>
<RETURNS>void        </RETURNS>
GtkCheckMenuItem *check_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_set_inconsistent</NAME>
<RETURNS>void        </RETURNS>
GtkCheckMenuItem *check_menu_item, gboolean          setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_get_inconsistent</NAME>
<RETURNS>gboolean    </RETURNS>
GtkCheckMenuItem *check_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_set_draw_as_radio</NAME>
<RETURNS>void        </RETURNS>
GtkCheckMenuItem *check_menu_item, gboolean          draw_as_radio
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_menu_item_get_draw_as_radio</NAME>
<RETURNS>gboolean    </RETURNS>
GtkCheckMenuItem *check_menu_item
</FUNCTION>
<STRUCT>
<NAME>GtkCheckMenuItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CLIPBOARD</NAME>
#define GTK_TYPE_CLIPBOARD            (gtk_clipboard_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CLIPBOARD</NAME>
#define GTK_CLIPBOARD(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CLIPBOARD, GtkClipboard))
</MACRO>
<MACRO>
<NAME>GTK_IS_CLIPBOARD</NAME>
#define GTK_IS_CLIPBOARD(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CLIPBOARD))
</MACRO>
<USER_FUNCTION>
<NAME>GtkClipboardReceivedFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
					           GtkSelectionData *selection_data,
					           gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardTextReceivedFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
					           const gchar      *text,
					           gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardRichTextReceivedFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
                                                   GdkAtom           format,
					           const guint8     *text,
                                                   gsize             length,
					           gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardImageReceivedFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
						   GdkPixbuf        *pixbuf,
						   gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardURIReceivedFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
						   gchar           **uris,
						   gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardTargetsReceivedFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
					           GdkAtom          *atoms,
						   gint              n_atoms,
					           gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardGetFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
					       GtkSelectionData *selection_data,
					       guint             info,
					       gpointer          user_data_or_owner
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkClipboardClearFunc</NAME>
<RETURNS>void </RETURNS>
GtkClipboard     *clipboard,
					       gpointer          user_data_or_owner
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get_for_display</NAME>
<RETURNS>GtkClipboard  *</RETURNS>
GdkDisplay   *display, GdkAtom       selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get</NAME>
<RETURNS>GtkClipboard  *</RETURNS>
GdkAtom       selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get_default</NAME>
<RETURNS>GtkClipboard  *</RETURNS>
GdkDisplay    *display
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get_display</NAME>
<RETURNS>GdkDisplay    *</RETURNS>
GtkClipboard *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_set_with_data</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard          *clipboard, const GtkTargetEntry  *targets, guint                  n_targets, GtkClipboardGetFunc    get_func, GtkClipboardClearFunc  clear_func, gpointer               user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_set_with_owner</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard          *clipboard, const GtkTargetEntry  *targets, guint                  n_targets, GtkClipboardGetFunc    get_func, GtkClipboardClearFunc  clear_func, GObject               *owner
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get_owner</NAME>
<RETURNS>GObject  *</RETURNS>
GtkClipboard          *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_clear</NAME>
<RETURNS>void      </RETURNS>
GtkClipboard          *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_set_text</NAME>
<RETURNS>void      </RETURNS>
GtkClipboard          *clipboard, const gchar           *text, gint                   len
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_set_image</NAME>
<RETURNS>void      </RETURNS>
GtkClipboard          *clipboard, GdkPixbuf             *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_request_contents</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard                     *clipboard, GdkAtom                           target, GtkClipboardReceivedFunc          callback, gpointer                          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_request_text</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard                     *clipboard, GtkClipboardTextReceivedFunc      callback, gpointer                          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_request_rich_text</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard                     *clipboard, GtkTextBuffer                    *buffer, GtkClipboardRichTextReceivedFunc  callback, gpointer                          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_request_image</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard                     *clipboard, GtkClipboardImageReceivedFunc     callback, gpointer                          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_request_uris</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard                     *clipboard, GtkClipboardURIReceivedFunc       callback, gpointer                          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_request_targets</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard                     *clipboard, GtkClipboardTargetsReceivedFunc   callback, gpointer                          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_for_contents</NAME>
<RETURNS>GtkSelectionData  *</RETURNS>
GtkClipboard  *clipboard, GdkAtom        target
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_for_text</NAME>
<RETURNS>gchar  *           </RETURNS>
GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_for_rich_text</NAME>
<RETURNS>guint8  *          </RETURNS>
GtkClipboard  *clipboard, GtkTextBuffer *buffer, GdkAtom       *format, gsize         *length
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_for_image</NAME>
<RETURNS>GdkPixbuf  *       </RETURNS>
GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_for_uris</NAME>
<RETURNS>gchar  **          </RETURNS>
GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_for_targets</NAME>
<RETURNS>gboolean           </RETURNS>
GtkClipboard  *clipboard, GdkAtom      **targets, gint          *n_targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_is_text_available</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_is_rich_text_available</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard  *clipboard, GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_is_image_available</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_is_uris_available</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_wait_is_target_available</NAME>
<RETURNS>gboolean  </RETURNS>
GtkClipboard  *clipboard, GdkAtom        target
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_set_can_store</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard         *clipboard, const GtkTargetEntry *targets, gint                  n_targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_store</NAME>
<RETURNS>void  </RETURNS>
GtkClipboard   *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_clipboard_get_selection</NAME>
<RETURNS>GdkAtom  </RETURNS>
GtkClipboard *clipboard
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_COLOR_BUTTON</NAME>
#define GTK_TYPE_COLOR_BUTTON             (gtk_color_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COLOR_BUTTON</NAME>
#define GTK_COLOR_BUTTON(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COLOR_BUTTON, GtkColorButton))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_BUTTON_CLASS</NAME>
#define GTK_COLOR_BUTTON_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_BUTTON, GtkColorButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_BUTTON</NAME>
#define GTK_IS_COLOR_BUTTON(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COLOR_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_BUTTON_CLASS</NAME>
#define GTK_IS_COLOR_BUTTON_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_BUTTON_GET_CLASS</NAME>
#define GTK_COLOR_BUTTON_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_COLOR_BUTTON, GtkColorButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkColorButton</NAME>
struct _GtkColorButton {
  GtkButton button;

  /*< private >*/
  GtkColorButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkColorButtonClass</NAME>
struct _GtkColorButtonClass {
  GtkButtonClass parent_class;

  void (* color_set) (GtkColorButton *cp);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_color_button_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_new</NAME>
<RETURNS>GtkWidget  *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_new_with_rgba</NAME>
<RETURNS>GtkWidget  *  </RETURNS>
const GdkRGBA  *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_set_title</NAME>
<RETURNS>void          </RETURNS>
GtkColorButton *button, const gchar    *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_get_title</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkColorButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_new_with_color</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
const GdkColor *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_set_color</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkColorButton *button, const GdkColor *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_get_color</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkColorButton *button, GdkColor       *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_set_alpha</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkColorButton *button, guint16         alpha
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_get_alpha</NAME>
<DEPRECATED/>
<RETURNS>guint16     </RETURNS>
GtkColorButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_set_use_alpha</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkColorButton *button, gboolean        use_alpha
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_get_use_alpha</NAME>
<DEPRECATED/>
<RETURNS>gboolean      </RETURNS>
GtkColorButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_set_rgba</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkColorButton *button, const GdkRGBA  *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_button_get_rgba</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkColorButton *button, GdkRGBA        *rgba
</FUNCTION>
<STRUCT>
<NAME>GtkColorButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_COLOR_CHOOSER</NAME>
#define GTK_TYPE_COLOR_CHOOSER                  (gtk_color_chooser_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER</NAME>
#define GTK_COLOR_CHOOSER(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COLOR_CHOOSER, GtkColorChooser))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_CHOOSER</NAME>
#define GTK_IS_COLOR_CHOOSER(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COLOR_CHOOSER))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_GET_IFACE</NAME>
#define GTK_COLOR_CHOOSER_GET_IFACE(inst)       (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_COLOR_CHOOSER, GtkColorChooserInterface))
</MACRO>
<STRUCT>
<NAME>GtkColorChooserInterface</NAME>
struct _GtkColorChooserInterface
{
  GTypeInterface base_interface;

  /* Methods */
  void (* get_rgba)    (GtkColorChooser *chooser,
                        GdkRGBA         *color);
  void (* set_rgba)    (GtkColorChooser *chooser,
                        const GdkRGBA   *color);

  void (* add_palette) (GtkColorChooser *chooser,
                        GtkOrientation   orientation,
                        gint             colors_per_line,
                        gint             n_colors,
                        GdkRGBA         *colors);

  /* Signals */
  void (* color_activated) (GtkColorChooser *chooser,
                            const GdkRGBA   *color);

  /* Padding */
  gpointer padding[12];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_color_chooser_get_type</NAME>
<RETURNS>GType     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_get_rgba</NAME>
<RETURNS>void      </RETURNS>
GtkColorChooser *chooser, GdkRGBA         *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_set_rgba</NAME>
<RETURNS>void      </RETURNS>
GtkColorChooser *chooser, const GdkRGBA   *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_get_use_alpha</NAME>
<RETURNS>gboolean  </RETURNS>
GtkColorChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_set_use_alpha</NAME>
<RETURNS>void      </RETURNS>
GtkColorChooser *chooser, gboolean         use_alpha
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_add_palette</NAME>
<RETURNS>void      </RETURNS>
GtkColorChooser *chooser, GtkOrientation   orientation, gint             colors_per_line, gint             n_colors, GdkRGBA         *colors
</FUNCTION>
<STRUCT>
<NAME>GtkColorChooser</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_COLOR_CHOOSER_DIALOG</NAME>
#define GTK_TYPE_COLOR_CHOOSER_DIALOG              (gtk_color_chooser_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_DIALOG</NAME>
#define GTK_COLOR_CHOOSER_DIALOG(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG, GtkColorChooserDialog))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_COLOR_CHOOSER_DIALOG_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_CHOOSER_DIALOG, GtkColorChooserDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_CHOOSER_DIALOG</NAME>
#define GTK_IS_COLOR_CHOOSER_DIALOG(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_IS_COLOR_CHOOSER_DIALOG_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_DIALOG_GET_CLASS</NAME>
#define GTK_COLOR_CHOOSER_DIALOG_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_COLOR_CHOOSER_DIALOG, GtkColorChooserDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkColorChooserDialog</NAME>
struct _GtkColorChooserDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkColorChooserDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkColorChooserDialogClass</NAME>
struct _GtkColorChooserDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_color_chooser_dialog_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_dialog_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
const gchar *title, GtkWindow   *parent
</FUNCTION>
<STRUCT>
<NAME>GtkColorChooserDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_COLOR_CHOOSER_WIDGET</NAME>
#define GTK_TYPE_COLOR_CHOOSER_WIDGET              (gtk_color_chooser_widget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_WIDGET</NAME>
#define GTK_COLOR_CHOOSER_WIDGET(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET, GtkColorChooserWidget))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_COLOR_CHOOSER_WIDGET_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_CHOOSER_WIDGET, GtkColorChooserWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_CHOOSER_WIDGET</NAME>
#define GTK_IS_COLOR_CHOOSER_WIDGET(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_IS_COLOR_CHOOSER_WIDGET_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_CHOOSER_WIDGET_GET_CLASS</NAME>
#define GTK_COLOR_CHOOSER_WIDGET_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_COLOR_CHOOSER_WIDGET, GtkColorChooserWidgetClass))
</MACRO>
<STRUCT>
<NAME>GtkColorChooserWidget</NAME>
struct _GtkColorChooserWidget
{
  GtkBox parent_instance;

  /*< private >*/
  GtkColorChooserWidgetPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkColorChooserWidgetClass</NAME>
struct _GtkColorChooserWidgetClass
{
  GtkBoxClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_color_chooser_widget_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_chooser_widget_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkColorChooserWidgetPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_hsv_to_rgb</NAME>
<RETURNS>void  </RETURNS>
gdouble  h, gdouble  s, gdouble  v, gdouble *r, gdouble *g, gdouble *b
</FUNCTION>
<FUNCTION>
<NAME>gtk_rgb_to_hsv</NAME>
<RETURNS>void  </RETURNS>
gdouble  r, gdouble  g, gdouble  b, gdouble *h, gdouble *s, gdouble *v
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_COMBO_BOX</NAME>
#define GTK_TYPE_COMBO_BOX             (gtk_combo_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COMBO_BOX</NAME>
#define GTK_COMBO_BOX(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COMBO_BOX, GtkComboBox))
</MACRO>
<MACRO>
<NAME>GTK_COMBO_BOX_CLASS</NAME>
#define GTK_COMBO_BOX_CLASS(vtable)    (G_TYPE_CHECK_CLASS_CAST ((vtable), GTK_TYPE_COMBO_BOX, GtkComboBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COMBO_BOX</NAME>
#define GTK_IS_COMBO_BOX(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COMBO_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_COMBO_BOX_CLASS</NAME>
#define GTK_IS_COMBO_BOX_CLASS(vtable) (G_TYPE_CHECK_CLASS_TYPE ((vtable), GTK_TYPE_COMBO_BOX))
</MACRO>
<MACRO>
<NAME>GTK_COMBO_BOX_GET_CLASS</NAME>
#define GTK_COMBO_BOX_GET_CLASS(inst)  (G_TYPE_INSTANCE_GET_CLASS ((inst), GTK_TYPE_COMBO_BOX, GtkComboBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkComboBox</NAME>
struct _GtkComboBox
{
  GtkBin parent_instance;

  /*< private >*/
  GtkComboBoxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkComboBoxClass</NAME>
struct _GtkComboBoxClass
{
  GtkBinClass parent_class;

  /*< public >*/

  /* signals */
  void     (* changed)           (GtkComboBox *combo_box);
  gchar   *(* format_entry_text) (GtkComboBox *combo_box,
                                  const gchar *path);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_combo_box_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_new</NAME>
<RETURNS>GtkWidget     *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_new_with_area</NAME>
<RETURNS>GtkWidget     *</RETURNS>
GtkCellArea  *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_new_with_area_and_entry</NAME>
<RETURNS>GtkWidget     *</RETURNS>
GtkCellArea  *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_new_with_entry</NAME>
<RETURNS>GtkWidget     *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_new_with_model</NAME>
<RETURNS>GtkWidget     *</RETURNS>
GtkTreeModel *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_new_with_model_and_entry</NAME>
<RETURNS>GtkWidget     *</RETURNS>
GtkTreeModel *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_wrap_width</NAME>
<RETURNS>gint           </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_wrap_width</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox *combo_box, gint         width
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_row_span_column</NAME>
<RETURNS>gint           </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_row_span_column</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox *combo_box, gint         row_span
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_column_span_column</NAME>
<RETURNS>gint           </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_column_span_column</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox *combo_box, gint         column_span
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_add_tearoffs</NAME>
<DEPRECATED/>
<RETURNS>gboolean       </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_add_tearoffs</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkComboBox *combo_box, gboolean     add_tearoffs
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_title</NAME>
<DEPRECATED/>
<RETURNS>const gchar  * </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_title</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkComboBox *combo_box, const gchar *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_focus_on_click</NAME>
<DEPRECATED/>
<RETURNS>gboolean       </RETURNS>
GtkComboBox *combo
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_focus_on_click</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkComboBox *combo, gboolean     focus_on_click
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_active</NAME>
<RETURNS>gint           </RETURNS>
GtkComboBox     *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_active</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox     *combo_box, gint             index_
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_active_iter</NAME>
<RETURNS>gboolean       </RETURNS>
GtkComboBox     *combo_box, GtkTreeIter     *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_active_iter</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox     *combo_box, GtkTreeIter     *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_model</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox     *combo_box, GtkTreeModel    *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_model</NAME>
<RETURNS>GtkTreeModel  *</RETURNS>
GtkComboBox     *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_row_separator_func</NAME>
<RETURNS>GtkTreeViewRowSeparatorFunc  </RETURNS>
GtkComboBox                *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_row_separator_func</NAME>
<RETURNS>void                         </RETURNS>
GtkComboBox                *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer                    data, GDestroyNotify              destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_button_sensitivity</NAME>
<RETURNS>void                </RETURNS>
GtkComboBox        *combo_box, GtkSensitivityType  sensitivity
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_button_sensitivity</NAME>
<RETURNS>GtkSensitivityType  </RETURNS>
GtkComboBox        *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_has_entry</NAME>
<RETURNS>gboolean            </RETURNS>
GtkComboBox        *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_entry_text_column</NAME>
<RETURNS>void                </RETURNS>
GtkComboBox        *combo_box, gint                text_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_entry_text_column</NAME>
<RETURNS>gint                </RETURNS>
GtkComboBox        *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_popup_fixed_width</NAME>
<RETURNS>void                </RETURNS>
GtkComboBox      *combo_box, gboolean          fixed
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_popup_fixed_width</NAME>
<RETURNS>gboolean            </RETURNS>
GtkComboBox      *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_popup</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox     *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_popup_for_device</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox     *combo_box, GdkDevice       *device
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_popdown</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox     *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_popup_accessible</NAME>
<RETURNS>AtkObject  *   </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_id_column</NAME>
<RETURNS>gint           </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_id_column</NAME>
<RETURNS>void           </RETURNS>
GtkComboBox *combo_box, gint         id_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_get_active_id</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkComboBox *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_set_active_id</NAME>
<RETURNS>gboolean       </RETURNS>
GtkComboBox *combo_box, const gchar *active_id
</FUNCTION>
<STRUCT>
<NAME>GtkComboBoxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_COMBO_BOX_TEXT</NAME>
#define GTK_TYPE_COMBO_BOX_TEXT                 (gtk_combo_box_text_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COMBO_BOX_TEXT</NAME>
#define GTK_COMBO_BOX_TEXT(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COMBO_BOX_TEXT, GtkComboBoxText))
</MACRO>
<MACRO>
<NAME>GTK_COMBO_BOX_TEXT_CLASS</NAME>
#define GTK_COMBO_BOX_TEXT_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_COMBO_BOX_TEXT, GtkComboBoxTextClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COMBO_BOX_TEXT</NAME>
#define GTK_IS_COMBO_BOX_TEXT(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COMBO_BOX_TEXT))
</MACRO>
<MACRO>
<NAME>GTK_IS_COMBO_BOX_TEXT_CLASS</NAME>
#define GTK_IS_COMBO_BOX_TEXT_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COMBO_BOX_TEXT))
</MACRO>
<MACRO>
<NAME>GTK_COMBO_BOX_TEXT_GET_CLASS</NAME>
#define GTK_COMBO_BOX_TEXT_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_COMBO_BOX_TEXT, GtkComboBoxTextClass))
</MACRO>
<STRUCT>
<NAME>GtkComboBoxText</NAME>
struct _GtkComboBoxText
{
  /*< private >*/
  GtkComboBox parent_instance;

  GtkComboBoxTextPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkComboBoxTextClass</NAME>
struct _GtkComboBoxTextClass
{
  GtkComboBoxClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_combo_box_text_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_new</NAME>
<RETURNS>GtkWidget *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_new_with_entry</NAME>
<RETURNS>GtkWidget *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_append_text</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, const gchar         *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_insert_text</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, gint                 position, const gchar         *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_prepend_text</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, const gchar         *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_remove</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, gint                 position
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_remove_all</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_get_active_text</NAME>
<RETURNS>gchar         *</RETURNS>
GtkComboBoxText     *combo_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_insert</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, gint                 position, const gchar         *id, const gchar         *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_append</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, const gchar         *id, const gchar         *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_combo_box_text_prepend</NAME>
<RETURNS>void           </RETURNS>
GtkComboBoxText     *combo_box, const gchar         *id, const gchar         *text
</FUNCTION>
<STRUCT>
<NAME>GtkComboBoxTextPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkComposeTable</NAME>
struct _GtkComposeTable
{
  guint16 *data;
  gint max_seq_len;
  gint n_seqs;
  guint32 id;
};
</STRUCT>
<STRUCT>
<NAME>GtkComposeTableCompact</NAME>
struct _GtkComposeTableCompact
{
  const guint16 *data;
  gint max_seq_len;
  gint n_index_size;
  gint n_index_stride;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_compose_table_new_with_file</NAME>
<RETURNS>GtkComposeTable  * </RETURNS>
const gchar   *compose_file
</FUNCTION>
<FUNCTION>
<NAME>gtk_compose_table_list_add_array</NAME>
<RETURNS>GSList  *</RETURNS>
GSList        *compose_tables, const guint16 *data, gint           max_seq_len, gint           n_seqs
</FUNCTION>
<FUNCTION>
<NAME>gtk_compose_table_list_add_file</NAME>
<RETURNS>GSList  *</RETURNS>
GSList        *compose_tables, const gchar   *compose_file
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CONTAINER</NAME>
#define GTK_TYPE_CONTAINER              (gtk_container_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CONTAINER</NAME>
#define GTK_CONTAINER(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CONTAINER, GtkContainer))
</MACRO>
<MACRO>
<NAME>GTK_CONTAINER_CLASS</NAME>
#define GTK_CONTAINER_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CONTAINER, GtkContainerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CONTAINER</NAME>
#define GTK_IS_CONTAINER(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CONTAINER))
</MACRO>
<MACRO>
<NAME>GTK_IS_CONTAINER_CLASS</NAME>
#define GTK_IS_CONTAINER_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CONTAINER))
</MACRO>
<MACRO>
<NAME>GTK_CONTAINER_GET_CLASS</NAME>
#define GTK_CONTAINER_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CONTAINER, GtkContainerClass))
</MACRO>
<STRUCT>
<NAME>GtkContainer</NAME>
struct _GtkContainer
{
  GtkWidget widget;

  /*< private >*/
  GtkContainerPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkContainerClass</NAME>
struct _GtkContainerClass
{
  GtkWidgetClass parent_class;

  /*< public >*/

  void    (*add)       		(GtkContainer	 *container,
				 GtkWidget	 *widget);
  void    (*remove)    		(GtkContainer	 *container,
				 GtkWidget	 *widget);
  void    (*check_resize)	(GtkContainer	 *container);
  void    (*forall)    		(GtkContainer	 *container,
				 gboolean	  include_internals,
				 GtkCallback	  callback,
				 gpointer	  callback_data);
  void    (*set_focus_child)	(GtkContainer	 *container,
				 GtkWidget	 *child);
  GType   (*child_type)		(GtkContainer	 *container);
  gchar*  (*composite_name)	(GtkContainer	 *container,
				 GtkWidget	 *child);
  void    (*set_child_property) (GtkContainer    *container,
				 GtkWidget       *child,
				 guint            property_id,
				 const GValue    *value,
				 GParamSpec      *pspec);
  void    (*get_child_property) (GtkContainer    *container,
                                 GtkWidget       *child,
				 guint            property_id,
				 GValue          *value,
				 GParamSpec      *pspec);
  GtkWidgetPath * (*get_path_for_child) (GtkContainer *container,
                                         GtkWidget    *child);


  /*< private >*/

  unsigned int _handle_border_width : 1;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkResizeMode</NAME>
typedef enum
{
  GTK_RESIZE_PARENT,
  GTK_RESIZE_QUEUE,
  GTK_RESIZE_IMMEDIATE
} GtkResizeMode;
</ENUM>
<FUNCTION>
<NAME>gtk_container_get_type</NAME>
<RETURNS>GType    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_set_border_width</NAME>
<RETURNS>void     </RETURNS>
GtkContainer	   *container, guint		    border_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_border_width</NAME>
<RETURNS>guint    </RETURNS>
GtkContainer     *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_add</NAME>
<RETURNS>void     </RETURNS>
GtkContainer	   *container, GtkWidget	   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_remove</NAME>
<RETURNS>void     </RETURNS>
GtkContainer	   *container, GtkWidget	   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_set_resize_mode</NAME>
<DEPRECATED/>
<RETURNS>void     </RETURNS>
GtkContainer     *container, GtkResizeMode     resize_mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_resize_mode</NAME>
<DEPRECATED/>
<RETURNS>GtkResizeMode  </RETURNS>
GtkContainer     *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_check_resize</NAME>
<RETURNS>void     </RETURNS>
GtkContainer     *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_foreach</NAME>
<RETURNS>void      </RETURNS>
GtkContainer       *container, GtkCallback         callback, gpointer            callback_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_children</NAME>
<RETURNS>GList *   </RETURNS>
GtkContainer       *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_propagate_draw</NAME>
<RETURNS>void      </RETURNS>
GtkContainer   *container, GtkWidget      *child, cairo_t        *cr
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_set_focus_chain</NAME>
<RETURNS>void      </RETURNS>
GtkContainer   *container, GList          *focusable_widgets
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_focus_chain</NAME>
<RETURNS>gboolean  </RETURNS>
GtkContainer   *container, GList         **focusable_widgets
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_unset_focus_chain</NAME>
<RETURNS>void      </RETURNS>
GtkContainer  *container
</FUNCTION>
<MACRO>
<NAME>GTK_IS_RESIZE_CONTAINER</NAME>
#define GTK_IS_RESIZE_CONTAINER(widget) (GTK_IS_CONTAINER (widget) && \
                                        (gtk_container_get_resize_mode (GTK_CONTAINER (widget)) != GTK_RESIZE_PARENT))
</MACRO>
<FUNCTION>
<NAME>gtk_container_set_reallocate_redraws</NAME>
<DEPRECATED/>
<RETURNS>void    </RETURNS>
GtkContainer    *container, gboolean         needs_redraws
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_set_focus_child</NAME>
<RETURNS>void    </RETURNS>
GtkContainer     *container, GtkWidget	     *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_focus_child</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkContainer     *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_set_focus_vadjustment</NAME>
<RETURNS>void    </RETURNS>
GtkContainer     *container, GtkAdjustment    *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_focus_vadjustment</NAME>
<RETURNS>GtkAdjustment  *</RETURNS>
GtkContainer *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_set_focus_hadjustment</NAME>
<RETURNS>void    </RETURNS>
GtkContainer     *container, GtkAdjustment    *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_focus_hadjustment</NAME>
<RETURNS>GtkAdjustment  *</RETURNS>
GtkContainer *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_resize_children</NAME>
<DEPRECATED/>
<RETURNS>void     </RETURNS>
GtkContainer     *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_type</NAME>
<RETURNS>GType    </RETURNS>
GtkContainer     *container
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_class_install_child_property</NAME>
<RETURNS>void          </RETURNS>
GtkContainerClass *cclass, guint		    property_id, GParamSpec	   *pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_class_install_child_properties</NAME>
<RETURNS>void          </RETURNS>
GtkContainerClass *cclass, guint              n_pspecs, GParamSpec       **pspecs
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_class_find_child_property</NAME>
<RETURNS>GParamSpec *  </RETURNS>
GObjectClass	   *cclass, const gchar	   *property_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_class_list_child_properties</NAME>
<RETURNS>GParamSpec ** </RETURNS>
GObjectClass	   *cclass, guint		   *n_properties
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_add_with_properties</NAME>
<RETURNS>void          </RETURNS>
GtkContainer	   *container, GtkWidget	   *widget, const gchar	   *first_prop_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_set</NAME>
<RETURNS>void          </RETURNS>
GtkContainer	   *container, GtkWidget	   *child, const gchar	   *first_prop_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_get</NAME>
<RETURNS>void          </RETURNS>
GtkContainer	   *container, GtkWidget	   *child, const gchar	   *first_prop_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_set_valist</NAME>
<RETURNS>void          </RETURNS>
GtkContainer	   *container, GtkWidget	   *child, const gchar	   *first_property_name, va_list	    var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_get_valist</NAME>
<RETURNS>void          </RETURNS>
GtkContainer	   *container, GtkWidget	   *child, const gchar	   *first_property_name, va_list	    var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_set_property</NAME>
<RETURNS>void 	     </RETURNS>
GtkContainer	   *container, GtkWidget	   *child, const gchar	   *property_name, const GValue	   *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_get_property</NAME>
<RETURNS>void 	     </RETURNS>
GtkContainer	   *container, GtkWidget	   *child, const gchar	   *property_name, GValue		   *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_notify</NAME>
<RETURNS>void  </RETURNS>
GtkContainer *container, GtkWidget    *child, const gchar  *child_property
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_child_notify_by_pspec</NAME>
<RETURNS>void  </RETURNS>
GtkContainer *container, GtkWidget    *child, GParamSpec   *pspec
</FUNCTION>
<MACRO>
<NAME>GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID</NAME>
#define GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID(object, property_id, pspec) \
    G_OBJECT_WARN_INVALID_PSPEC ((object), "child property", (property_id), (pspec))
</MACRO>
<FUNCTION>
<NAME>gtk_container_forall</NAME>
<RETURNS>void     </RETURNS>
GtkContainer *container, GtkCallback   callback, gpointer	    callback_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_class_handle_border_width</NAME>
<RETURNS>void     </RETURNS>
GtkContainerClass *klass
</FUNCTION>
<FUNCTION>
<NAME>gtk_container_get_path_for_child</NAME>
<RETURNS>GtkWidgetPath  * </RETURNS>
GtkContainer      *container, GtkWidget         *child
</FUNCTION>
<STRUCT>
<NAME>GtkContainerPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_css_calc_value_new_sum</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
GtkCssValue            *value1, GtkCssValue            *value2
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_calc_value_parse</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
GtkCssParser           *parser, GtkCssNumberParseFlags  flags
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CSS_CUSTOM_GADGET</NAME>
#define GTK_TYPE_CSS_CUSTOM_GADGET           (gtk_css_custom_gadget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CSS_CUSTOM_GADGET</NAME>
#define GTK_CSS_CUSTOM_GADGET(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_CSS_CUSTOM_GADGET, GtkCssCustomGadget))
</MACRO>
<MACRO>
<NAME>GTK_CSS_CUSTOM_GADGET_CLASS</NAME>
#define GTK_CSS_CUSTOM_GADGET_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_CSS_CUSTOM_GADGET, GtkCssCustomGadgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_CUSTOM_GADGET</NAME>
#define GTK_IS_CSS_CUSTOM_GADGET(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_CSS_CUSTOM_GADGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_CUSTOM_GADGET_CLASS</NAME>
#define GTK_IS_CSS_CUSTOM_GADGET_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_CSS_CUSTOM_GADGET))
</MACRO>
<MACRO>
<NAME>GTK_CSS_CUSTOM_GADGET_GET_CLASS</NAME>
#define GTK_CSS_CUSTOM_GADGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CSS_CUSTOM_GADGET, GtkCssCustomGadgetClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkCssPreferredSizeFunc</NAME>
<RETURNS>void </RETURNS>
GtkCssGadget           *gadget,
                                                         GtkOrientation          orientation,
                                                         gint                    for_size,
                                                         gint                   *minimum,
                                                         gint                   *natural,
                                                         gint                   *minimum_baseline,
                                                         gint                   *natural_baseline,
                                                         gpointer                data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkCssAllocateFunc</NAME>
<RETURNS>void </RETURNS>
GtkCssGadget           *gadget,
                                                         const GtkAllocation    *allocation,
                                                         int                     baseline,
                                                         GtkAllocation          *out_clip,
                                                         gpointer                data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkCssDrawFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkCssGadget           *gadget,
                                                         cairo_t                *cr,
                                                         int                     x,
                                                         int                     y,
                                                         int                     width,
                                                         int                     height,
                                                         gpointer                data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkCssCustomGadget</NAME>
struct _GtkCssCustomGadget
{
  GtkCssGadget parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkCssCustomGadgetClass</NAME>
struct _GtkCssCustomGadgetClass
{
  GtkCssGadgetClass  parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_css_custom_gadget_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_custom_gadget_new</NAME>
<RETURNS>GtkCssGadget  *  </RETURNS>
const char                      *name, GtkWidget                       *owner, GtkCssGadget                    *parent, GtkCssGadget                    *next_sibling, GtkCssPreferredSizeFunc          get_preferred_size_func, GtkCssAllocateFunc               allocate_func, GtkCssDrawFunc                   draw_func, gpointer                         data, GDestroyNotify                   destroy_func
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_custom_gadget_new_for_node</NAME>
<RETURNS>GtkCssGadget  *  </RETURNS>
GtkCssNode                      *node, GtkWidget                       *owner, GtkCssPreferredSizeFunc          preferred_size_func, GtkCssAllocateFunc               allocate_func, GtkCssDrawFunc                   draw_func, gpointer                         data, GDestroyNotify                   destroy_func
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_dimension_value_new</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
double                  value, GtkCssUnit              unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_dimension_value_parse</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
GtkCssParser           *parser, GtkCssNumberParseFlags  flags
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CSS_GADGET</NAME>
#define GTK_TYPE_CSS_GADGET           (gtk_css_gadget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CSS_GADGET</NAME>
#define GTK_CSS_GADGET(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_CSS_GADGET, GtkCssGadget))
</MACRO>
<MACRO>
<NAME>GTK_CSS_GADGET_CLASS</NAME>
#define GTK_CSS_GADGET_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_CSS_GADGET, GtkCssGadgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_GADGET</NAME>
#define GTK_IS_CSS_GADGET(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_CSS_GADGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_GADGET_CLASS</NAME>
#define GTK_IS_CSS_GADGET_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_CSS_GADGET))
</MACRO>
<MACRO>
<NAME>GTK_CSS_GADGET_GET_CLASS</NAME>
#define GTK_CSS_GADGET_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CSS_GADGET, GtkCssGadgetClass))
</MACRO>
<STRUCT>
<NAME>GtkCssGadget</NAME>
struct _GtkCssGadget
{
  GObject parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkCssGadgetClass</NAME>
struct _GtkCssGadgetClass
{
  GObjectClass  parent_class;

  void          (* get_preferred_size)                  (GtkCssGadget           *gadget,
                                                         GtkOrientation          orientation,
                                                         gint                    for_size,
                                                         gint                   *minimum,
                                                         gint                   *natural,
                                                         gint                   *minimum_baseline,
                                                         gint                   *natural_baseline);

  void          (* allocate)                            (GtkCssGadget           *gadget,
                                                         const GtkAllocation    *allocation,
                                                         int                     baseline,
                                                         GtkAllocation          *out_clip);

  gboolean      (* draw)                                (GtkCssGadget           *gadget,
                                                         cairo_t                *cr,
                                                         int                     x,
                                                         int                     y,
                                                         int                     width,
                                                         int                     height);

  void          (* style_changed)                       (GtkCssGadget           *gadget,
                                                         GtkCssStyleChange      *change);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_css_gadget_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_node</NAME>
<RETURNS>GtkCssNode  *    </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_style</NAME>
<RETURNS>GtkCssStyle  *   </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_owner</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_set_node</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkCssNode             *node
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_set_visible</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, gboolean                visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_visible</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_margin_box_contains_point</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssGadget          *gadget, int                    x, int                    y
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_border_box_contains_point</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssGadget          *gadget, int                    x, int                    y
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_content_box_contains_point</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssGadget         *gadget, int                   x, int                   y
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_margin_box</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkAllocation          *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_border_box</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkAllocation          *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_content_box</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkAllocation          *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_add_class</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, const char             *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_remove_class</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, const char             *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_set_state</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkStateFlags           state
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_add_state</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkStateFlags           state
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_remove_state</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkStateFlags           state
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_preferred_size</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkOrientation          orientation, gint                    for_size, gint                   *minimum, gint                   *natural, gint                   *minimum_baseline, gint                   *natural_baseline
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_allocate</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, const GtkAllocation    *allocation, int                     baseline, GtkAllocation          *out_clip
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_draw</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, cairo_t                *cr
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_queue_resize</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_queue_allocate</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_queue_draw</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_margin_allocation</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkAllocation          *allocation, int                    *baseline
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_border_allocation</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkAllocation          *allocation, int                    *baseline
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_gadget_get_content_allocation</NAME>
<RETURNS>void             </RETURNS>
GtkCssGadget           *gadget, GtkAllocation          *allocation, int                    *baseline
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CSS_IMAGE_FALLBACK</NAME>
#define GTK_TYPE_CSS_IMAGE_FALLBACK           (_gtk_css_image_fallback_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_FALLBACK</NAME>
#define GTK_CSS_IMAGE_FALLBACK(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_CSS_IMAGE_FALLBACK, GtkCssImageFallback))
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_FALLBACK_CLASS</NAME>
#define GTK_CSS_IMAGE_FALLBACK_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_CSS_IMAGE_FALLBACK, GtkCssImageFallbackClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_IMAGE_FALLBACK</NAME>
#define GTK_IS_CSS_IMAGE_FALLBACK(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_CSS_IMAGE_FALLBACK))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_IMAGE_FALLBACK_CLASS</NAME>
#define GTK_IS_CSS_IMAGE_FALLBACK_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_CSS_IMAGE_FALLBACK))
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_FALLBACK_GET_CLASS</NAME>
#define GTK_CSS_IMAGE_FALLBACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CSS_IMAGE_FALLBACK, GtkCssImageFallbackClass))
</MACRO>
<STRUCT>
<NAME>GtkCssImageFallback</NAME>
struct _GtkCssImageFallback
{
  GtkCssImage parent;

  GtkCssImage **images;
  int          n_images;

  int used;

  GtkCssValue *color;
};
</STRUCT>
<STRUCT>
<NAME>GtkCssImageFallbackClass</NAME>
struct _GtkCssImageFallbackClass
{
  GtkCssImageClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CSS_IMAGE_RADIAL</NAME>
#define GTK_TYPE_CSS_IMAGE_RADIAL           (_gtk_css_image_radial_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_RADIAL</NAME>
#define GTK_CSS_IMAGE_RADIAL(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_CSS_IMAGE_RADIAL, GtkCssImageRadial))
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_RADIAL_CLASS</NAME>
#define GTK_CSS_IMAGE_RADIAL_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_CSS_IMAGE_RADIAL, GtkCssImageRadialClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_IMAGE_RADIAL</NAME>
#define GTK_IS_CSS_IMAGE_RADIAL(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_CSS_IMAGE_RADIAL))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_IMAGE_RADIAL_CLASS</NAME>
#define GTK_IS_CSS_IMAGE_RADIAL_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_CSS_IMAGE_RADIAL))
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_RADIAL_GET_CLASS</NAME>
#define GTK_CSS_IMAGE_RADIAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CSS_IMAGE_RADIAL, GtkCssImageRadialClass))
</MACRO>
<STRUCT>
<NAME>GtkCssImageRadialColorStop</NAME>
struct _GtkCssImageRadialColorStop {
  GtkCssValue        *offset;
  GtkCssValue        *color;
};
</STRUCT>
<ENUM>
<NAME>GtkCssRadialSize</NAME>
typedef enum {
  GTK_CSS_EXPLICIT_SIZE,
  GTK_CSS_CLOSEST_SIDE,
  GTK_CSS_FARTHEST_SIDE,
  GTK_CSS_CLOSEST_CORNER,
  GTK_CSS_FARTHEST_CORNER
} GtkCssRadialSize;
</ENUM>
<STRUCT>
<NAME>GtkCssImageRadial</NAME>
struct _GtkCssImageRadial
{
  GtkCssImage parent;

  GtkCssValue *position;
  GtkCssValue *sizes[2];
  GArray *stops;
  GtkCssRadialSize size;
  guint circle : 1;
  guint repeating :1;
};
</STRUCT>
<STRUCT>
<NAME>GtkCssImageRadialClass</NAME>
struct _GtkCssImageRadialClass
{
  GtkCssImageClass parent_class;
};
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CSS_IMAGE_RECOLOR</NAME>
#define GTK_TYPE_CSS_IMAGE_RECOLOR           (_gtk_css_image_recolor_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_RECOLOR</NAME>
#define GTK_CSS_IMAGE_RECOLOR(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_CSS_IMAGE_RECOLOR, GtkCssImageRecolor))
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_RECOLOR_CLASS</NAME>
#define GTK_CSS_IMAGE_RECOLOR_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_CSS_IMAGE_RECOLOR, GtkCssImageRecolorClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_IMAGE_RECOLOR</NAME>
#define GTK_IS_CSS_IMAGE_RECOLOR(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_CSS_IMAGE_RECOLOR))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_IMAGE_RECOLOR_CLASS</NAME>
#define GTK_IS_CSS_IMAGE_RECOLOR_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_CSS_IMAGE_RECOLOR))
</MACRO>
<MACRO>
<NAME>GTK_CSS_IMAGE_RECOLOR_GET_CLASS</NAME>
#define GTK_CSS_IMAGE_RECOLOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CSS_IMAGE_RECOLOR, GtkCssImageRecolorClass))
</MACRO>
<STRUCT>
<NAME>GtkCssImageRecolor</NAME>
struct _GtkCssImageRecolor
{
  GtkCssImageUrl parent;

  GtkCssValue *palette;
};
</STRUCT>
<STRUCT>
<NAME>GtkCssImageRecolorClass</NAME>
struct _GtkCssImageRecolorClass
{
  GtkCssImageClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_css_node_style_cache_new</NAME>
<RETURNS>GtkCssNodeStyleCache  *  </RETURNS>
GtkCssStyle            *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_node_style_cache_ref</NAME>
<RETURNS>GtkCssNodeStyleCache  *  </RETURNS>
GtkCssNodeStyleCache   *cache
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_node_style_cache_unref</NAME>
<RETURNS>void                     </RETURNS>
GtkCssNodeStyleCache   *cache
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_node_style_cache_get_style</NAME>
<RETURNS>GtkCssStyle  *           </RETURNS>
GtkCssNodeStyleCache   *cache
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_node_style_cache_insert</NAME>
<RETURNS>GtkCssNodeStyleCache  *  </RETURNS>
GtkCssNodeStyleCache   *parent, GtkCssNodeDeclaration  *decl, gboolean                is_first, gboolean                is_last, GtkCssStyle            *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_node_style_cache_lookup</NAME>
<RETURNS>GtkCssNodeStyleCache  *  </RETURNS>
GtkCssNodeStyleCache        *parent, const GtkCssNodeDeclaration *decl, gboolean                     is_first, gboolean                     is_last
</FUNCTION>
<STRUCT>
<NAME>GtkCssNodeStyleCache</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_css_palette_value_new_default</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_palette_value_parse</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
GtkCssParser        *parser
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_palette_value_get_color</NAME>
<RETURNS>const GdkRGBA  * </RETURNS>
GtkCssValue         *value, const char          *color_name
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CSS_PROVIDER</NAME>
#define GTK_TYPE_CSS_PROVIDER         (gtk_css_provider_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CSS_PROVIDER</NAME>
#define GTK_CSS_PROVIDER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_CSS_PROVIDER, GtkCssProvider))
</MACRO>
<MACRO>
<NAME>GTK_CSS_PROVIDER_CLASS</NAME>
#define GTK_CSS_PROVIDER_CLASS(c)     (G_TYPE_CHECK_CLASS_CAST    ((c), GTK_TYPE_CSS_PROVIDER, GtkCssProviderClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_PROVIDER</NAME>
#define GTK_IS_CSS_PROVIDER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_CSS_PROVIDER))
</MACRO>
<MACRO>
<NAME>GTK_IS_CSS_PROVIDER_CLASS</NAME>
#define GTK_IS_CSS_PROVIDER_CLASS(c)  (G_TYPE_CHECK_CLASS_TYPE    ((c), GTK_TYPE_CSS_PROVIDER))
</MACRO>
<MACRO>
<NAME>GTK_CSS_PROVIDER_GET_CLASS</NAME>
#define GTK_CSS_PROVIDER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS  ((o), GTK_TYPE_CSS_PROVIDER, GtkCssProviderClass))
</MACRO>
<MACRO>
<NAME>GTK_CSS_PROVIDER_ERROR</NAME>
#define GTK_CSS_PROVIDER_ERROR (gtk_css_provider_error_quark ())
</MACRO>
<ENUM>
<NAME>GtkCssProviderError</NAME>
typedef enum
{
  GTK_CSS_PROVIDER_ERROR_FAILED,
  GTK_CSS_PROVIDER_ERROR_SYNTAX,
  GTK_CSS_PROVIDER_ERROR_IMPORT,
  GTK_CSS_PROVIDER_ERROR_NAME,
  GTK_CSS_PROVIDER_ERROR_DEPRECATED,
  GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
} GtkCssProviderError;
</ENUM>
<FUNCTION>
<NAME>gtk_css_provider_error_quark</NAME>
<RETURNS>GQuark  </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCssProvider</NAME>
struct _GtkCssProvider
{
  GObject parent_instance;
  GtkCssProviderPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCssProviderClass</NAME>
struct _GtkCssProviderClass
{
  GObjectClass parent_class;

  void (* parsing_error)                        (GtkCssProvider  *provider,
                                                 GtkCssSection   *section,
                                                 const GError *   error);

  /* Padding for future expansion */
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_css_provider_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_new</NAME>
<RETURNS>GtkCssProvider  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_to_string</NAME>
<RETURNS>char  *           </RETURNS>
GtkCssProvider  *provider
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_load_from_data</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCssProvider  *css_provider, const gchar     *data, gssize           length, GError         **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_load_from_file</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCssProvider  *css_provider, GFile           *file, GError         **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_load_from_path</NAME>
<RETURNS>gboolean          </RETURNS>
GtkCssProvider  *css_provider, const gchar     *path, GError         **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_load_from_resource</NAME>
<RETURNS>void              </RETURNS>
GtkCssProvider *css_provider, const gchar    *resource_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_get_default</NAME>
<RETURNS>GtkCssProvider  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_provider_get_named</NAME>
<RETURNS>GtkCssProvider  * </RETURNS>
const gchar *name, const gchar *variant
</FUNCTION>
<STRUCT>
<NAME>GtkCssProviderPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_CSS_SECTION</NAME>
#define GTK_TYPE_CSS_SECTION         (gtk_css_section_get_type ())
</MACRO>
<ENUM>
<NAME>GtkCssSectionType</NAME>
typedef enum
{
  GTK_CSS_SECTION_DOCUMENT,
  GTK_CSS_SECTION_IMPORT,
  GTK_CSS_SECTION_COLOR_DEFINITION,
  GTK_CSS_SECTION_BINDING_SET,
  GTK_CSS_SECTION_RULESET,
  GTK_CSS_SECTION_SELECTOR,
  GTK_CSS_SECTION_DECLARATION,
  GTK_CSS_SECTION_VALUE,
  GTK_CSS_SECTION_KEYFRAMES
} GtkCssSectionType;
</ENUM>
<FUNCTION>
<NAME>gtk_css_section_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_ref</NAME>
<RETURNS>GtkCssSection  *    </RETURNS>
GtkCssSection        *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_unref</NAME>
<RETURNS>void                </RETURNS>
GtkCssSection        *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_section_type</NAME>
<RETURNS>GtkCssSectionType   </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_parent</NAME>
<RETURNS>GtkCssSection  *    </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_file</NAME>
<RETURNS>GFile  *            </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_start_line</NAME>
<RETURNS>guint               </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_start_position</NAME>
<RETURNS>guint               </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_end_line</NAME>
<RETURNS>guint               </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_section_get_end_position</NAME>
<RETURNS>guint               </RETURNS>
const GtkCssSection  *section
</FUNCTION>
<STRUCT>
<NAME>GtkCssSection</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkCssStyleChange</NAME>
struct _GtkCssStyleChange {
  GtkCssStyle   *old_style;
  GtkCssStyle   *new_style;

  guint          n_compared;

  GtkCssAffects  affects;
  GtkBitmask    *changes;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_css_style_change_init</NAME>
<RETURNS>void             </RETURNS>
GtkCssStyleChange      *change, GtkCssStyle            *old_style, GtkCssStyle            *new_style
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_finish</NAME>
<RETURNS>void             </RETURNS>
GtkCssStyleChange      *change
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_get_old_style</NAME>
<RETURNS>GtkCssStyle  *   </RETURNS>
GtkCssStyleChange      *change
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_get_new_style</NAME>
<RETURNS>GtkCssStyle  *   </RETURNS>
GtkCssStyleChange      *change
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_has_change</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssStyleChange      *change
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_affects</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssStyleChange      *change, GtkCssAffects           affects
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_changes_property</NAME>
<RETURNS>gboolean         </RETURNS>
GtkCssStyleChange      *change, guint                   id
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_print</NAME>
<RETURNS>void             </RETURNS>
GtkCssStyleChange      *change, GString *string
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_style_change_to_string</NAME>
<RETURNS>char  *          </RETURNS>
GtkCssStyleChange      *change
</FUNCTION>
<FUNCTION>
<NAME>gtk_css_win32_size_value_parse</NAME>
<RETURNS>GtkCssValue  *   </RETURNS>
GtkCssParser           *parser, GtkCssNumberParseFlags  flags
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG</NAME>
#define GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG                  (gtk_custom_paper_unix_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_CUSTOM_PAPER_UNIX_DIALOG</NAME>
#define GTK_CUSTOM_PAPER_UNIX_DIALOG(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG, GtkCustomPaperUnixDialog))
</MACRO>
<MACRO>
<NAME>GTK_CUSTOM_PAPER_UNIX_DIALOG_CLASS</NAME>
#define GTK_CUSTOM_PAPER_UNIX_DIALOG_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG, GtkCustomPaperUnixDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_CUSTOM_PAPER_UNIX_DIALOG</NAME>
#define GTK_IS_CUSTOM_PAPER_UNIX_DIALOG(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_CUSTOM_PAPER_UNIX_DIALOG_CLASS</NAME>
#define GTK_IS_CUSTOM_PAPER_UNIX_DIALOG_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_CUSTOM_PAPER_UNIX_DIALOG_GET_CLASS</NAME>
#define GTK_CUSTOM_PAPER_UNIX_DIALOG_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_CUSTOM_PAPER_UNIX_DIALOG, GtkCustomPaperUnixDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkCustomPaperUnixDialog</NAME>
struct _GtkCustomPaperUnixDialog
{
  GtkDialog parent_instance;

  GtkCustomPaperUnixDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkCustomPaperUnixDialogClass</NAME>
struct _GtkCustomPaperUnixDialogClass
{
  GtkDialogClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_custom_paper_unix_dialog_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkCustomPaperUnixDialogPrivate</NAME>
</STRUCT>
<ENUM>
<NAME>GtkDialogFlags</NAME>
typedef enum
{
  GTK_DIALOG_MODAL               = 1 << 0,
  GTK_DIALOG_DESTROY_WITH_PARENT = 1 << 1,
  GTK_DIALOG_USE_HEADER_BAR      = 1 << 2
} GtkDialogFlags;
</ENUM>
<ENUM>
<NAME>GtkResponseType</NAME>
typedef enum
{
  GTK_RESPONSE_NONE         = -1,
  GTK_RESPONSE_REJECT       = -2,
  GTK_RESPONSE_ACCEPT       = -3,
  GTK_RESPONSE_DELETE_EVENT = -4,
  GTK_RESPONSE_OK           = -5,
  GTK_RESPONSE_CANCEL       = -6,
  GTK_RESPONSE_CLOSE        = -7,
  GTK_RESPONSE_YES          = -8,
  GTK_RESPONSE_NO           = -9,
  GTK_RESPONSE_APPLY        = -10,
  GTK_RESPONSE_HELP         = -11
} GtkResponseType;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_DIALOG</NAME>
#define GTK_TYPE_DIALOG                  (gtk_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DIALOG</NAME>
#define GTK_DIALOG(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_DIALOG, GtkDialog))
</MACRO>
<MACRO>
<NAME>GTK_DIALOG_CLASS</NAME>
#define GTK_DIALOG_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_DIALOG, GtkDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_DIALOG</NAME>
#define GTK_IS_DIALOG(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_DIALOG_CLASS</NAME>
#define GTK_IS_DIALOG_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_DIALOG_GET_CLASS</NAME>
#define GTK_DIALOG_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_DIALOG, GtkDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkDialog</NAME>
struct _GtkDialog
{
  GtkWindow window;

  /*< private >*/
  GtkDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkDialogClass</NAME>
struct _GtkDialogClass
{
  GtkWindowClass parent_class;

  /*< public >*/

  void (* response) (GtkDialog *dialog, gint response_id);

  /* Keybinding signals */

  void (* close)    (GtkDialog *dialog);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_dialog_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_new_with_buttons</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *title, GtkWindow       *parent, GtkDialogFlags   flags, const gchar     *first_button_text, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_add_action_widget</NAME>
<RETURNS>void        </RETURNS>
GtkDialog   *dialog, GtkWidget   *child, gint         response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_add_button</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkDialog   *dialog, const gchar *button_text, gint         response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_add_buttons</NAME>
<RETURNS>void        </RETURNS>
GtkDialog   *dialog, const gchar *first_button_text, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_set_response_sensitive</NAME>
<RETURNS>void  </RETURNS>
GtkDialog *dialog, gint       response_id, gboolean   setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_set_default_response</NAME>
<RETURNS>void  </RETURNS>
GtkDialog *dialog, gint       response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_get_widget_for_response</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkDialog *dialog, gint       response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_get_response_for_widget</NAME>
<RETURNS>gint  </RETURNS>
GtkDialog *dialog, GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_alternative_dialog_button_order</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GdkScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_set_alternative_button_order</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkDialog *dialog, gint       first_response_id, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_set_alternative_button_order_from_array</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkDialog *dialog, gint       n_params, gint      *new_order
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_response</NAME>
<RETURNS>void  </RETURNS>
GtkDialog *dialog, gint       response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_run</NAME>
<RETURNS>gint  </RETURNS>
GtkDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_get_action_area</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  * </RETURNS>
GtkDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_get_content_area</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_dialog_get_header_bar</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkDialog *dialog
</FUNCTION>
<STRUCT>
<NAME>GtkDialogPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_drag_get_data</NAME>
<RETURNS>void  </RETURNS>
GtkWidget      *widget, GdkDragContext *context, GdkAtom         target, guint32         time_
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_finish</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context, gboolean        success, gboolean        del, guint32         time_
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_get_source_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GdkDragContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_highlight</NAME>
<RETURNS>void  </RETURNS>
GtkWidget  *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_unhighlight</NAME>
<RETURNS>void  </RETURNS>
GtkWidget  *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_begin_with_coordinates</NAME>
<RETURNS>GdkDragContext  *</RETURNS>
GtkWidget         *widget, GtkTargetList     *targets, GdkDragAction      actions, gint               button, GdkEvent          *event, gint               x, gint               y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_begin</NAME>
<DEPRECATED/>
<RETURNS>GdkDragContext  *</RETURNS>
GtkWidget         *widget, GtkTargetList     *targets, GdkDragAction      actions, gint               button, GdkEvent          *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_cancel</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_widget</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context, GtkWidget      *widget, gint            hot_x, gint            hot_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_pixbuf</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context, GdkPixbuf      *pixbuf, gint            hot_x, gint            hot_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_stock</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GdkDragContext *context, const gchar    *stock_id, gint            hot_x, gint            hot_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_surface</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context, cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_name</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context, const gchar    *icon_name, gint            hot_x, gint            hot_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_gicon</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext *context, GIcon          *icon, gint            hot_x, gint            hot_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_default</NAME>
<RETURNS>void  </RETURNS>
GdkDragContext    *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_check_threshold</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget *widget, gint       start_x, gint       start_y, gint       current_x, gint       current_y
</FUNCTION>
<STRUCT>
<NAME>GtkDragDestSite</NAME>
struct _GtkDragDestSite
{
  GtkDestDefaults    flags;
  GtkTargetList     *target_list;
  GdkDragAction      actions;
  GdkWindow         *proxy_window;
  GdkDragProtocol    proxy_protocol;
  guint              do_proxy     : 1;
  guint              proxy_coords : 1;
  guint              have_drag    : 1;
  guint              track_motion : 1;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_drag_begin_internal</NAME>
<RETURNS>GdkDragContext  *        </RETURNS>
GtkWidget              *widget, GtkImageDefinition     *icon, GtkTargetList          *target_list, GdkDragAction           actions, gint                    button, const GdkEvent         *event, int                     x, int                     y
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_set_icon_definition</NAME>
<RETURNS>void                     </RETURNS>
GdkDragContext         *context, GtkImageDefinition     *def, gint                    hot_x, gint                    hot_y
</FUNCTION>
<ENUM>
<NAME>GtkDestDefaults</NAME>
typedef enum {
  GTK_DEST_DEFAULT_MOTION     = 1 << 0,
  GTK_DEST_DEFAULT_HIGHLIGHT  = 1 << 1,
  GTK_DEST_DEFAULT_DROP       = 1 << 2,
  GTK_DEST_DEFAULT_ALL        = 0x07
} GtkDestDefaults;
</ENUM>
<FUNCTION>
<NAME>gtk_drag_dest_set</NAME>
<RETURNS>void  </RETURNS>
GtkWidget            *widget, GtkDestDefaults       flags, const GtkTargetEntry *targets, gint                  n_targets, GdkDragAction         actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_set_proxy</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkWidget      *widget, GdkWindow      *proxy_window, GdkDragProtocol protocol, gboolean        use_coordinates
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_unset</NAME>
<RETURNS>void  </RETURNS>
GtkWidget          *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_find_target</NAME>
<RETURNS>GdkAtom         </RETURNS>
GtkWidget      *widget, GdkDragContext *context, GtkTargetList  *target_list
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_get_target_list</NAME>
<RETURNS>GtkTargetList * </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_set_target_list</NAME>
<RETURNS>void            </RETURNS>
GtkWidget      *widget, GtkTargetList  *target_list
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_add_text_targets</NAME>
<RETURNS>void            </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_add_image_targets</NAME>
<RETURNS>void            </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_add_uri_targets</NAME>
<RETURNS>void            </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_set_track_motion</NAME>
<RETURNS>void            </RETURNS>
GtkWidget *widget, gboolean   track_motion
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_dest_get_track_motion</NAME>
<RETURNS>gboolean        </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_set</NAME>
<RETURNS>void  </RETURNS>
GtkWidget            *widget, GdkModifierType       start_button_mask, const GtkTargetEntry *targets, gint                  n_targets, GdkDragAction         actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_unset</NAME>
<RETURNS>void  </RETURNS>
GtkWidget        *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_get_target_list</NAME>
<RETURNS>GtkTargetList * </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_set_target_list</NAME>
<RETURNS>void            </RETURNS>
GtkWidget     *widget, GtkTargetList *target_list
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_add_text_targets</NAME>
<RETURNS>void            </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_add_image_targets</NAME>
<RETURNS>void            </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_add_uri_targets</NAME>
<RETURNS>void            </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_set_icon_pixbuf</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget, GdkPixbuf       *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_set_icon_stock</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkWidget       *widget, const gchar     *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_set_icon_name</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget, const gchar     *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_drag_source_set_icon_gicon</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget, GIcon           *icon
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_DRAWING_AREA</NAME>
#define GTK_TYPE_DRAWING_AREA            (gtk_drawing_area_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_DRAWING_AREA</NAME>
#define GTK_DRAWING_AREA(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingArea))
</MACRO>
<MACRO>
<NAME>GTK_DRAWING_AREA_CLASS</NAME>
#define GTK_DRAWING_AREA_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_DRAWING_AREA, GtkDrawingAreaClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_DRAWING_AREA</NAME>
#define GTK_IS_DRAWING_AREA(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_DRAWING_AREA))
</MACRO>
<MACRO>
<NAME>GTK_IS_DRAWING_AREA_CLASS</NAME>
#define GTK_IS_DRAWING_AREA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_DRAWING_AREA))
</MACRO>
<MACRO>
<NAME>GTK_DRAWING_AREA_GET_CLASS</NAME>
#define GTK_DRAWING_AREA_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_DRAWING_AREA, GtkDrawingAreaClass))
</MACRO>
<STRUCT>
<NAME>GtkDrawingArea</NAME>
struct _GtkDrawingArea
{
  GtkWidget widget;

  /*< private >*/
  gpointer dummy;
};
</STRUCT>
<STRUCT>
<NAME>GtkDrawingAreaClass</NAME>
struct _GtkDrawingAreaClass
{
  GtkWidgetClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_drawing_area_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_drawing_area_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_EDITABLE</NAME>
#define GTK_TYPE_EDITABLE             (gtk_editable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_EDITABLE</NAME>
#define GTK_EDITABLE(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_EDITABLE, GtkEditable))
</MACRO>
<MACRO>
<NAME>GTK_IS_EDITABLE</NAME>
#define GTK_IS_EDITABLE(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_EDITABLE))
</MACRO>
<MACRO>
<NAME>GTK_EDITABLE_GET_IFACE</NAME>
#define GTK_EDITABLE_GET_IFACE(inst)  (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_EDITABLE, GtkEditableInterface))
</MACRO>
<STRUCT>
<NAME>GtkEditableInterface</NAME>
struct _GtkEditableInterface
{
  GTypeInterface		   base_iface;

  /* signals */
  void (* insert_text)              (GtkEditable    *editable,
				     const gchar    *new_text,
				     gint            new_text_length,
				     gint           *position);
  void (* delete_text)              (GtkEditable    *editable,
				     gint            start_pos,
				     gint            end_pos);
  void (* changed)                  (GtkEditable    *editable);

  /* vtable */
  void (* do_insert_text)           (GtkEditable    *editable,
				     const gchar    *new_text,
				     gint            new_text_length,
				     gint           *position);
  void (* do_delete_text)           (GtkEditable    *editable,
				     gint            start_pos,
				     gint            end_pos);

  gchar* (* get_chars)              (GtkEditable    *editable,
				     gint            start_pos,
				     gint            end_pos);
  void (* set_selection_bounds)     (GtkEditable    *editable,
				     gint            start_pos,
				     gint            end_pos);
  gboolean (* get_selection_bounds) (GtkEditable    *editable,
				     gint           *start_pos,
				     gint           *end_pos);
  void (* set_position)             (GtkEditable    *editable,
				     gint            position);
  gint (* get_position)             (GtkEditable    *editable);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_editable_get_type</NAME>
<RETURNS>GType     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_select_region</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable, gint         start_pos, gint         end_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_get_selection_bounds</NAME>
<RETURNS>gboolean  </RETURNS>
GtkEditable *editable, gint        *start_pos, gint        *end_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_insert_text</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable, const gchar *new_text, gint         new_text_length, gint        *position
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_delete_text</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable, gint         start_pos, gint         end_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_get_chars</NAME>
<RETURNS>gchar *   </RETURNS>
GtkEditable *editable, gint         start_pos, gint         end_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_cut_clipboard</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_copy_clipboard</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_paste_clipboard</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_delete_selection</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_set_position</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable, gint         position
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_get_position</NAME>
<RETURNS>gint      </RETURNS>
GtkEditable *editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_set_editable</NAME>
<RETURNS>void      </RETURNS>
GtkEditable *editable, gboolean     is_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_editable_get_editable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkEditable *editable
</FUNCTION>
<STRUCT>
<NAME>GtkEditable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_EMOJI_CHOOSER</NAME>
#define GTK_TYPE_EMOJI_CHOOSER                 (gtk_emoji_chooser_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_EMOJI_CHOOSER</NAME>
#define GTK_EMOJI_CHOOSER(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_EMOJI_CHOOSER, GtkEmojiChooser))
</MACRO>
<MACRO>
<NAME>GTK_EMOJI_CHOOSER_CLASS</NAME>
#define GTK_EMOJI_CHOOSER_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_EMOJI_CHOOSER, GtkEmojiChooserClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_EMOJI_CHOOSER</NAME>
#define GTK_IS_EMOJI_CHOOSER(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_EMOJI_CHOOSER))
</MACRO>
<MACRO>
<NAME>GTK_IS_EMOJI_CHOOSER_CLASS</NAME>
#define GTK_IS_EMOJI_CHOOSER_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_EMOJI_CHOOSER))
</MACRO>
<MACRO>
<NAME>GTK_EMOJI_CHOOSER_GET_CLASS</NAME>
#define GTK_EMOJI_CHOOSER_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_EMOJI_CHOOSER, GtkEmojiChooserClass))
</MACRO>
<FUNCTION>
<NAME>gtk_emoji_chooser_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_emoji_chooser_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkEmojiChooser</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkEmojiChooserClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ENTRY</NAME>
#define GTK_TYPE_ENTRY                  (gtk_entry_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ENTRY</NAME>
#define GTK_ENTRY(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ENTRY, GtkEntry))
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_CLASS</NAME>
#define GTK_ENTRY_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ENTRY, GtkEntryClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ENTRY</NAME>
#define GTK_IS_ENTRY(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ENTRY))
</MACRO>
<MACRO>
<NAME>GTK_IS_ENTRY_CLASS</NAME>
#define GTK_IS_ENTRY_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ENTRY))
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_GET_CLASS</NAME>
#define GTK_ENTRY_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ENTRY, GtkEntryClass))
</MACRO>
<ENUM>
<NAME>GtkEntryIconPosition</NAME>
typedef enum
{
  GTK_ENTRY_ICON_PRIMARY,
  GTK_ENTRY_ICON_SECONDARY
} GtkEntryIconPosition;
</ENUM>
<STRUCT>
<NAME>GtkEntry</NAME>
struct _GtkEntry
{
  /*< private >*/
  GtkWidget  parent_instance;

  GtkEntryPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkEntryClass</NAME>
struct _GtkEntryClass
{
  GtkWidgetClass parent_class;

  /* Hook to customize right-click popup */
  void (* populate_popup)   (GtkEntry       *entry,
                             GtkWidget      *popup);

  /* Action signals
   */
  void (* activate)           (GtkEntry             *entry);
  void (* move_cursor)        (GtkEntry             *entry,
			       GtkMovementStep       step,
			       gint                  count,
			       gboolean              extend_selection);
  void (* insert_at_cursor)   (GtkEntry             *entry,
			       const gchar          *str);
  void (* delete_from_cursor) (GtkEntry             *entry,
			       GtkDeleteType         type,
			       gint                  count);
  void (* backspace)          (GtkEntry             *entry);
  void (* cut_clipboard)      (GtkEntry             *entry);
  void (* copy_clipboard)     (GtkEntry             *entry);
  void (* paste_clipboard)    (GtkEntry             *entry);
  void (* toggle_overwrite)   (GtkEntry             *entry);

  /* hooks to add other objects beside the entry (like in GtkSpinButton) */
  void (* get_text_area_size) (GtkEntry       *entry,
			       gint           *x,
			       gint           *y,
			       gint           *width,
			       gint           *height);
  void (* get_frame_size)     (GtkEntry       *entry,
                               gint           *x,
                               gint           *y,
			       gint           *width,
			       gint           *height);
  void (* insert_emoji)       (GtkEntry             *entry);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1)      (void);
  void (*_gtk_reserved2)      (void);
  void (*_gtk_reserved3)      (void);
  void (*_gtk_reserved4)      (void);
  void (*_gtk_reserved5)      (void);
  void (*_gtk_reserved6)      (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_entry_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_new_with_buffer</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkEntryBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_buffer</NAME>
<RETURNS>GtkEntryBuffer * </RETURNS>
GtkEntry       *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_buffer</NAME>
<RETURNS>void        </RETURNS>
GtkEntry       *entry, GtkEntryBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_text_area</NAME>
<RETURNS>void        </RETURNS>
GtkEntry       *entry, GdkRectangle   *text_area
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_visibility</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gboolean       visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_visibility</NAME>
<RETURNS>gboolean    </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_invisible_char</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gunichar       ch
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_invisible_char</NAME>
<RETURNS>gunichar    </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_unset_invisible_char</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_has_frame</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_has_frame</NAME>
<RETURNS>gboolean    </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_inner_border</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkEntry        *entry, const GtkBorder *border
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_inner_border</NAME>
<DEPRECATED/>
<RETURNS>const GtkBorder * </RETURNS>
GtkEntry        *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_overwrite_mode</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gboolean       overwrite
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_overwrite_mode</NAME>
<RETURNS>gboolean    </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_max_length</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gint           max
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_max_length</NAME>
<RETURNS>gint        </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_text_length</NAME>
<RETURNS>guint16     </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_activates_default</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_activates_default</NAME>
<RETURNS>gboolean    </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_width_chars</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gint           n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_width_chars</NAME>
<RETURNS>gint        </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_max_width_chars</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gint           n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_max_width_chars</NAME>
<RETURNS>gint        </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_text</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, const gchar   *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_text</NAME>
<RETURNS>const gchar * </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_layout</NAME>
<RETURNS>PangoLayout * </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_layout_offsets</NAME>
<RETURNS>void          </RETURNS>
GtkEntry      *entry, gint          *x, gint          *y
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_alignment</NAME>
<RETURNS>void        </RETURNS>
GtkEntry      *entry, gfloat         xalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_alignment</NAME>
<RETURNS>gfloat      </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_completion</NAME>
<RETURNS>void                 </RETURNS>
GtkEntry           *entry, GtkEntryCompletion *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_completion</NAME>
<RETURNS>GtkEntryCompletion  *</RETURNS>
GtkEntry           *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_layout_index_to_text_index</NAME>
<RETURNS>gint        </RETURNS>
GtkEntry      *entry, gint           layout_index
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_text_index_to_layout_index</NAME>
<RETURNS>gint        </RETURNS>
GtkEntry      *entry, gint           text_index
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_cursor_hadjustment</NAME>
<RETURNS>void            </RETURNS>
GtkEntry      *entry, GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_cursor_hadjustment</NAME>
<RETURNS>GtkAdjustment * </RETURNS>
GtkEntry      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_progress_fraction</NAME>
<RETURNS>void            </RETURNS>
GtkEntry     *entry, gdouble       fraction
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_progress_fraction</NAME>
<RETURNS>gdouble         </RETURNS>
GtkEntry     *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_progress_pulse_step</NAME>
<RETURNS>void            </RETURNS>
GtkEntry     *entry, gdouble       fraction
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_progress_pulse_step</NAME>
<RETURNS>gdouble         </RETURNS>
GtkEntry     *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_progress_pulse</NAME>
<RETURNS>void            </RETURNS>
GtkEntry     *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_placeholder_text</NAME>
<RETURNS>const gchar *   </RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_placeholder_text</NAME>
<RETURNS>void            </RETURNS>
GtkEntry             *entry, const gchar          *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_from_pixbuf</NAME>
<RETURNS>void            </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, GdkPixbuf            *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_from_stock</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, const gchar          *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_from_icon_name</NAME>
<RETURNS>void            </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, const gchar          *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_from_gicon</NAME>
<RETURNS>void            </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, GIcon                *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_storage_type</NAME>
<RETURNS>GtkImageType  </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_pixbuf</NAME>
<RETURNS>GdkPixbuf *   </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_stock</NAME>
<DEPRECATED/>
<RETURNS>const gchar * </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_name</NAME>
<RETURNS>const gchar * </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_gicon</NAME>
<RETURNS>GIcon *       </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_activatable</NAME>
<RETURNS>void          </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, gboolean              activatable
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_activatable</NAME>
<RETURNS>gboolean      </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_sensitive</NAME>
<RETURNS>void          </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, gboolean              sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_sensitive</NAME>
<RETURNS>gboolean      </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_at_pos</NAME>
<RETURNS>gint          </RETURNS>
GtkEntry             *entry, gint                  x, gint                  y
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_tooltip_text</NAME>
<RETURNS>void          </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, const gchar          *tooltip
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_tooltip_text</NAME>
<RETURNS>gchar  *      </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_tooltip_markup</NAME>
<RETURNS>void          </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, const gchar          *tooltip
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_tooltip_markup</NAME>
<RETURNS>gchar  *      </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_icon_drag_source</NAME>
<RETURNS>void          </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, GtkTargetList        *target_list, GdkDragAction         actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_current_icon_drag_source</NAME>
<RETURNS>gint          </RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_icon_area</NAME>
<RETURNS>void          </RETURNS>
GtkEntry             *entry, GtkEntryIconPosition  icon_pos, GdkRectangle         *icon_area
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_im_context_filter_keypress</NAME>
<RETURNS>gboolean     </RETURNS>
GtkEntry             *entry, GdkEventKey          *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_reset_im_context</NAME>
<RETURNS>void         </RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_input_purpose</NAME>
<RETURNS>void             </RETURNS>
GtkEntry             *entry, GtkInputPurpose       purpose
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_input_purpose</NAME>
<RETURNS>GtkInputPurpose  </RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_input_hints</NAME>
<RETURNS>void             </RETURNS>
GtkEntry             *entry, GtkInputHints         hints
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_input_hints</NAME>
<RETURNS>GtkInputHints    </RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_attributes</NAME>
<RETURNS>void             </RETURNS>
GtkEntry             *entry, PangoAttrList        *attrs
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_attributes</NAME>
<RETURNS>PangoAttrList   *</RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_set_tabs</NAME>
<RETURNS>void             </RETURNS>
GtkEntry             *entry, PangoTabArray        *tabs
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_get_tabs</NAME>
<RETURNS>PangoTabArray   *</RETURNS>
GtkEntry             *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_grab_focus_without_selecting</NAME>
<RETURNS>void            </RETURNS>
GtkEntry             *entry
</FUNCTION>
<STRUCT>
<NAME>GtkEntryPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_ENTRY_BUFFER_MAX_SIZE</NAME>
#define GTK_ENTRY_BUFFER_MAX_SIZE        G_MAXUSHORT
</MACRO>
<MACRO>
<NAME>GTK_TYPE_ENTRY_BUFFER</NAME>
#define GTK_TYPE_ENTRY_BUFFER            (gtk_entry_buffer_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_BUFFER</NAME>
#define GTK_ENTRY_BUFFER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ENTRY_BUFFER, GtkEntryBuffer))
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_BUFFER_CLASS</NAME>
#define GTK_ENTRY_BUFFER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ENTRY_BUFFER, GtkEntryBufferClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ENTRY_BUFFER</NAME>
#define GTK_IS_ENTRY_BUFFER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ENTRY_BUFFER))
</MACRO>
<MACRO>
<NAME>GTK_IS_ENTRY_BUFFER_CLASS</NAME>
#define GTK_IS_ENTRY_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ENTRY_BUFFER))
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_BUFFER_GET_CLASS</NAME>
#define GTK_ENTRY_BUFFER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ENTRY_BUFFER, GtkEntryBufferClass))
</MACRO>
<STRUCT>
<NAME>GtkEntryBuffer</NAME>
struct _GtkEntryBuffer
{
  GObject parent_instance;

  /*< private >*/
  GtkEntryBufferPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkEntryBufferClass</NAME>
struct _GtkEntryBufferClass
{
  GObjectClass parent_class;

  /* Signals */

  void         (*inserted_text)          (GtkEntryBuffer *buffer,
                                          guint           position,
                                          const gchar    *chars,
                                          guint           n_chars);

  void         (*deleted_text)           (GtkEntryBuffer *buffer,
                                          guint           position,
                                          guint           n_chars);

  /* Virtual Methods */

  const gchar* (*get_text)               (GtkEntryBuffer *buffer,
                                          gsize          *n_bytes);

  guint        (*get_length)             (GtkEntryBuffer *buffer);

  guint        (*insert_text)            (GtkEntryBuffer *buffer,
                                          guint           position,
                                          const gchar    *chars,
                                          guint           n_chars);

  guint        (*delete_text)            (GtkEntryBuffer *buffer,
                                          guint           position,
                                          guint           n_chars);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_entry_buffer_get_type</NAME>
<RETURNS>GType                      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_new</NAME>
<RETURNS>GtkEntryBuffer *           </RETURNS>
const gchar     *initial_chars, gint             n_initial_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_get_bytes</NAME>
<RETURNS>gsize                      </RETURNS>
GtkEntryBuffer  *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_get_length</NAME>
<RETURNS>guint                      </RETURNS>
GtkEntryBuffer  *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_get_text</NAME>
<RETURNS>const gchar *              </RETURNS>
GtkEntryBuffer  *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_set_text</NAME>
<RETURNS>void                       </RETURNS>
GtkEntryBuffer  *buffer, const gchar     *chars, gint             n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_set_max_length</NAME>
<RETURNS>void                       </RETURNS>
GtkEntryBuffer  *buffer, gint             max_length
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_get_max_length</NAME>
<RETURNS>gint                       </RETURNS>
GtkEntryBuffer  *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_insert_text</NAME>
<RETURNS>guint                      </RETURNS>
GtkEntryBuffer  *buffer, guint            position, const gchar     *chars, gint             n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_delete_text</NAME>
<RETURNS>guint                      </RETURNS>
GtkEntryBuffer  *buffer, guint            position, gint             n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_emit_inserted_text</NAME>
<RETURNS>void                       </RETURNS>
GtkEntryBuffer  *buffer, guint            position, const gchar     *chars, guint            n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_buffer_emit_deleted_text</NAME>
<RETURNS>void                       </RETURNS>
GtkEntryBuffer  *buffer, guint            position, guint            n_chars
</FUNCTION>
<STRUCT>
<NAME>GtkEntryBufferPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ENTRY_COMPLETION</NAME>
#define GTK_TYPE_ENTRY_COMPLETION            (gtk_entry_completion_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_COMPLETION</NAME>
#define GTK_ENTRY_COMPLETION(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ENTRY_COMPLETION, GtkEntryCompletion))
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_COMPLETION_CLASS</NAME>
#define GTK_ENTRY_COMPLETION_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ENTRY_COMPLETION, GtkEntryCompletionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ENTRY_COMPLETION</NAME>
#define GTK_IS_ENTRY_COMPLETION(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ENTRY_COMPLETION))
</MACRO>
<MACRO>
<NAME>GTK_IS_ENTRY_COMPLETION_CLASS</NAME>
#define GTK_IS_ENTRY_COMPLETION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ENTRY_COMPLETION))
</MACRO>
<MACRO>
<NAME>GTK_ENTRY_COMPLETION_GET_CLASS</NAME>
#define GTK_ENTRY_COMPLETION_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ENTRY_COMPLETION, GtkEntryCompletionClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkEntryCompletionMatchFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkEntryCompletion *completion,
                                                  const gchar        *key,
                                                  GtkTreeIter        *iter,
                                                  gpointer            user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkEntryCompletion</NAME>
struct _GtkEntryCompletion
{
  GObject parent_instance;

  /*< private >*/
  GtkEntryCompletionPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkEntryCompletionClass</NAME>
struct _GtkEntryCompletionClass
{
  GObjectClass parent_class;

  gboolean (* match_selected)   (GtkEntryCompletion *completion,
                                 GtkTreeModel       *model,
                                 GtkTreeIter        *iter);
  void     (* action_activated) (GtkEntryCompletion *completion,
                                 gint                index_);
  gboolean (* insert_prefix)    (GtkEntryCompletion *completion,
                                 const gchar        *prefix);
  gboolean (* cursor_on_match)  (GtkEntryCompletion *completion,
                                 GtkTreeModel       *model,
                                 GtkTreeIter        *iter);
  void     (* no_matches)       (GtkEntryCompletion *completion);

  /* Padding for future expansion */
  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_entry_completion_get_type</NAME>
<RETURNS>GType                </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_new</NAME>
<RETURNS>GtkEntryCompletion  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_new_with_area</NAME>
<RETURNS>GtkEntryCompletion  *</RETURNS>
GtkCellArea                 *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_entry</NAME>
<RETURNS>GtkWidget           *</RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_model</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, GtkTreeModel                *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_model</NAME>
<RETURNS>GtkTreeModel        *</RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_match_func</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, GtkEntryCompletionMatchFunc  func, gpointer                     func_data, GDestroyNotify               func_notify
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_minimum_key_length</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gint                         length
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_minimum_key_length</NAME>
<RETURNS>gint                 </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_compute_prefix</NAME>
<RETURNS>gchar  *             </RETURNS>
GtkEntryCompletion          *completion, const char                  *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_complete</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_insert_prefix</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_insert_action_text</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gint                         index_, const gchar                 *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_insert_action_markup</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gint                         index_, const gchar                 *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_delete_action</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gint                         index_
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_inline_completion</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gboolean                     inline_completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_inline_completion</NAME>
<RETURNS>gboolean             </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_inline_selection</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gboolean                     inline_selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_inline_selection</NAME>
<RETURNS>gboolean             </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_popup_completion</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gboolean                     popup_completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_popup_completion</NAME>
<RETURNS>gboolean             </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_popup_set_width</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gboolean                     popup_set_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_popup_set_width</NAME>
<RETURNS>gboolean             </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_popup_single_match</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gboolean                     popup_single_match
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_popup_single_match</NAME>
<RETURNS>gboolean             </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_completion_prefix</NAME>
<RETURNS>const gchar          *</RETURNS>
GtkEntryCompletion *completion
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_set_text_column</NAME>
<RETURNS>void                 </RETURNS>
GtkEntryCompletion          *completion, gint                         column
</FUNCTION>
<FUNCTION>
<NAME>gtk_entry_completion_get_text_column</NAME>
<RETURNS>gint                 </RETURNS>
GtkEntryCompletion          *completion
</FUNCTION>
<STRUCT>
<NAME>GtkEntryCompletionPrivate</NAME>
</STRUCT>
<ENUM>
<NAME>GtkAlign</NAME>
typedef enum
{
  GTK_ALIGN_FILL,
  GTK_ALIGN_START,
  GTK_ALIGN_END,
  GTK_ALIGN_CENTER,
  GTK_ALIGN_BASELINE
} GtkAlign;
</ENUM>
<ENUM>
<NAME>GtkArrowType</NAME>
typedef enum
{
  GTK_ARROW_UP,
  GTK_ARROW_DOWN,
  GTK_ARROW_LEFT,
  GTK_ARROW_RIGHT,
  GTK_ARROW_NONE
} GtkArrowType;
</ENUM>
<ENUM>
<NAME>GtkBaselinePosition</NAME>
typedef enum
{
  GTK_BASELINE_POSITION_TOP,
  GTK_BASELINE_POSITION_CENTER,
  GTK_BASELINE_POSITION_BOTTOM
} GtkBaselinePosition;
</ENUM>
<ENUM>
<NAME>GtkDeleteType</NAME>
typedef enum
{
  GTK_DELETE_CHARS,
  GTK_DELETE_WORD_ENDS,
  GTK_DELETE_WORDS,
  GTK_DELETE_DISPLAY_LINES,
  GTK_DELETE_DISPLAY_LINE_ENDS,
  GTK_DELETE_PARAGRAPH_ENDS,
  GTK_DELETE_PARAGRAPHS,
  GTK_DELETE_WHITESPACE
} GtkDeleteType;
</ENUM>
<ENUM>
<NAME>GtkDirectionType</NAME>
typedef enum
{
  GTK_DIR_TAB_FORWARD,
  GTK_DIR_TAB_BACKWARD,
  GTK_DIR_UP,
  GTK_DIR_DOWN,
  GTK_DIR_LEFT,
  GTK_DIR_RIGHT
} GtkDirectionType;
</ENUM>
<ENUM>
<NAME>GtkIconSize</NAME>
typedef enum
{
  GTK_ICON_SIZE_INVALID,
  GTK_ICON_SIZE_MENU,
  GTK_ICON_SIZE_SMALL_TOOLBAR,
  GTK_ICON_SIZE_LARGE_TOOLBAR,
  GTK_ICON_SIZE_BUTTON,
  GTK_ICON_SIZE_DND,
  GTK_ICON_SIZE_DIALOG
} GtkIconSize;
</ENUM>
<ENUM>
<NAME>GtkSensitivityType</NAME>
typedef enum
{
  GTK_SENSITIVITY_AUTO,
  GTK_SENSITIVITY_ON,
  GTK_SENSITIVITY_OFF
} GtkSensitivityType;
</ENUM>
<ENUM>
<NAME>GtkTextDirection</NAME>
typedef enum
{
  GTK_TEXT_DIR_NONE,
  GTK_TEXT_DIR_LTR,
  GTK_TEXT_DIR_RTL
} GtkTextDirection;
</ENUM>
<ENUM>
<NAME>GtkJustification</NAME>
typedef enum
{
  GTK_JUSTIFY_LEFT,
  GTK_JUSTIFY_RIGHT,
  GTK_JUSTIFY_CENTER,
  GTK_JUSTIFY_FILL
} GtkJustification;
</ENUM>
<ENUM>
<NAME>GtkMenuDirectionType</NAME>
typedef enum
{
  GTK_MENU_DIR_PARENT,
  GTK_MENU_DIR_CHILD,
  GTK_MENU_DIR_NEXT,
  GTK_MENU_DIR_PREV
} GtkMenuDirectionType;
</ENUM>
<ENUM>
<NAME>GtkMessageType</NAME>
typedef enum
{
  GTK_MESSAGE_INFO,
  GTK_MESSAGE_WARNING,
  GTK_MESSAGE_QUESTION,
  GTK_MESSAGE_ERROR,
  GTK_MESSAGE_OTHER
} GtkMessageType;
</ENUM>
<ENUM>
<NAME>GtkMovementStep</NAME>
typedef enum
{
  GTK_MOVEMENT_LOGICAL_POSITIONS,
  GTK_MOVEMENT_VISUAL_POSITIONS,
  GTK_MOVEMENT_WORDS,
  GTK_MOVEMENT_DISPLAY_LINES,
  GTK_MOVEMENT_DISPLAY_LINE_ENDS,
  GTK_MOVEMENT_PARAGRAPHS,
  GTK_MOVEMENT_PARAGRAPH_ENDS,
  GTK_MOVEMENT_PAGES,
  GTK_MOVEMENT_BUFFER_ENDS,
  GTK_MOVEMENT_HORIZONTAL_PAGES
} GtkMovementStep;
</ENUM>
<ENUM>
<NAME>GtkScrollStep</NAME>
typedef enum
{
  GTK_SCROLL_STEPS,
  GTK_SCROLL_PAGES,
  GTK_SCROLL_ENDS,
  GTK_SCROLL_HORIZONTAL_STEPS,
  GTK_SCROLL_HORIZONTAL_PAGES,
  GTK_SCROLL_HORIZONTAL_ENDS
} GtkScrollStep;
</ENUM>
<ENUM>
<NAME>GtkOrientation</NAME>
typedef enum
{
  GTK_ORIENTATION_HORIZONTAL,
  GTK_ORIENTATION_VERTICAL
} GtkOrientation;
</ENUM>
<ENUM>
<NAME>GtkPackType</NAME>
typedef enum
{
  GTK_PACK_START,
  GTK_PACK_END
} GtkPackType;
</ENUM>
<ENUM>
<NAME>GtkPositionType</NAME>
typedef enum
{
  GTK_POS_LEFT,
  GTK_POS_RIGHT,
  GTK_POS_TOP,
  GTK_POS_BOTTOM
} GtkPositionType;
</ENUM>
<ENUM>
<NAME>GtkReliefStyle</NAME>
typedef enum
{
  GTK_RELIEF_NORMAL,
  GTK_RELIEF_HALF,
  GTK_RELIEF_NONE
} GtkReliefStyle;
</ENUM>
<ENUM>
<NAME>GtkScrollType</NAME>
typedef enum
{
  GTK_SCROLL_NONE,
  GTK_SCROLL_JUMP,
  GTK_SCROLL_STEP_BACKWARD,
  GTK_SCROLL_STEP_FORWARD,
  GTK_SCROLL_PAGE_BACKWARD,
  GTK_SCROLL_PAGE_FORWARD,
  GTK_SCROLL_STEP_UP,
  GTK_SCROLL_STEP_DOWN,
  GTK_SCROLL_PAGE_UP,
  GTK_SCROLL_PAGE_DOWN,
  GTK_SCROLL_STEP_LEFT,
  GTK_SCROLL_STEP_RIGHT,
  GTK_SCROLL_PAGE_LEFT,
  GTK_SCROLL_PAGE_RIGHT,
  GTK_SCROLL_START,
  GTK_SCROLL_END
} GtkScrollType;
</ENUM>
<ENUM>
<NAME>GtkSelectionMode</NAME>
typedef enum
{
  GTK_SELECTION_NONE,
  GTK_SELECTION_SINGLE,
  GTK_SELECTION_BROWSE,
  GTK_SELECTION_MULTIPLE
} GtkSelectionMode;
</ENUM>
<ENUM>
<NAME>GtkShadowType</NAME>
typedef enum
{
  GTK_SHADOW_NONE,
  GTK_SHADOW_IN,
  GTK_SHADOW_OUT,
  GTK_SHADOW_ETCHED_IN,
  GTK_SHADOW_ETCHED_OUT
} GtkShadowType;
</ENUM>
<ENUM>
<NAME>GtkStateType</NAME>
typedef enum
{
  GTK_STATE_NORMAL,
  GTK_STATE_ACTIVE,
  GTK_STATE_PRELIGHT,
  GTK_STATE_SELECTED,
  GTK_STATE_INSENSITIVE,
  GTK_STATE_INCONSISTENT,
  GTK_STATE_FOCUSED
} GtkStateType;
</ENUM>
<ENUM>
<NAME>GtkToolbarStyle</NAME>
typedef enum
{
  GTK_TOOLBAR_ICONS,
  GTK_TOOLBAR_TEXT,
  GTK_TOOLBAR_BOTH,
  GTK_TOOLBAR_BOTH_HORIZ
} GtkToolbarStyle;
</ENUM>
<ENUM>
<NAME>GtkWrapMode</NAME>
typedef enum
{
  GTK_WRAP_NONE,
  GTK_WRAP_CHAR,
  GTK_WRAP_WORD,
  GTK_WRAP_WORD_CHAR
} GtkWrapMode;
</ENUM>
<ENUM>
<NAME>GtkSortType</NAME>
typedef enum
{
  GTK_SORT_ASCENDING,
  GTK_SORT_DESCENDING
} GtkSortType;
</ENUM>
<ENUM>
<NAME>GtkIMPreeditStyle</NAME>
typedef enum
{
  GTK_IM_PREEDIT_NOTHING,
  GTK_IM_PREEDIT_CALLBACK,
  GTK_IM_PREEDIT_NONE
} GtkIMPreeditStyle;
</ENUM>
<ENUM>
<NAME>GtkIMStatusStyle</NAME>
typedef enum
{
  GTK_IM_STATUS_NOTHING,
  GTK_IM_STATUS_CALLBACK,
  GTK_IM_STATUS_NONE
} GtkIMStatusStyle;
</ENUM>
<ENUM>
<NAME>GtkPackDirection</NAME>
typedef enum
{
  GTK_PACK_DIRECTION_LTR,
  GTK_PACK_DIRECTION_RTL,
  GTK_PACK_DIRECTION_TTB,
  GTK_PACK_DIRECTION_BTT
} GtkPackDirection;
</ENUM>
<ENUM>
<NAME>GtkPrintPages</NAME>
typedef enum
{
  GTK_PRINT_PAGES_ALL,
  GTK_PRINT_PAGES_CURRENT,
  GTK_PRINT_PAGES_RANGES,
  GTK_PRINT_PAGES_SELECTION
} GtkPrintPages;
</ENUM>
<ENUM>
<NAME>GtkPageSet</NAME>
typedef enum
{
  GTK_PAGE_SET_ALL,
  GTK_PAGE_SET_EVEN,
  GTK_PAGE_SET_ODD
} GtkPageSet;
</ENUM>
<ENUM>
<NAME>GtkNumberUpLayout</NAME>
typedef enum
{
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM, /*< nick=lrtb >*/
  GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP, /*< nick=lrbt >*/
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM, /*< nick=rltb >*/
  GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP, /*< nick=rlbt >*/
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT, /*< nick=tblr >*/
  GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT, /*< nick=tbrl >*/
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT, /*< nick=btlr >*/
  GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT  /*< nick=btrl >*/
} GtkNumberUpLayout;
</ENUM>
<ENUM>
<NAME>GtkPageOrientation</NAME>
typedef enum
{
  GTK_PAGE_ORIENTATION_PORTRAIT,
  GTK_PAGE_ORIENTATION_LANDSCAPE,
  GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT,
  GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
} GtkPageOrientation;
</ENUM>
<ENUM>
<NAME>GtkPrintQuality</NAME>
typedef enum
{
  GTK_PRINT_QUALITY_LOW,
  GTK_PRINT_QUALITY_NORMAL,
  GTK_PRINT_QUALITY_HIGH,
  GTK_PRINT_QUALITY_DRAFT
} GtkPrintQuality;
</ENUM>
<ENUM>
<NAME>GtkPrintDuplex</NAME>
typedef enum
{
  GTK_PRINT_DUPLEX_SIMPLEX,
  GTK_PRINT_DUPLEX_HORIZONTAL,
  GTK_PRINT_DUPLEX_VERTICAL
} GtkPrintDuplex;
</ENUM>
<ENUM>
<NAME>GtkUnit</NAME>
typedef enum
{
  GTK_UNIT_NONE,
  GTK_UNIT_POINTS,
  GTK_UNIT_INCH,
  GTK_UNIT_MM
} GtkUnit;
</ENUM>
<MACRO>
<NAME>GTK_UNIT_PIXEL</NAME>
#define GTK_UNIT_PIXEL GTK_UNIT_NONE
</MACRO>
<ENUM>
<NAME>GtkTreeViewGridLines</NAME>
typedef enum
{
  GTK_TREE_VIEW_GRID_LINES_NONE,
  GTK_TREE_VIEW_GRID_LINES_HORIZONTAL,
  GTK_TREE_VIEW_GRID_LINES_VERTICAL,
  GTK_TREE_VIEW_GRID_LINES_BOTH
} GtkTreeViewGridLines;
</ENUM>
<ENUM>
<NAME>GtkDragResult</NAME>
typedef enum
{
  GTK_DRAG_RESULT_SUCCESS,
  GTK_DRAG_RESULT_NO_TARGET,
  GTK_DRAG_RESULT_USER_CANCELLED,
  GTK_DRAG_RESULT_TIMEOUT_EXPIRED,
  GTK_DRAG_RESULT_GRAB_BROKEN,
  GTK_DRAG_RESULT_ERROR
} GtkDragResult;
</ENUM>
<ENUM>
<NAME>GtkSizeGroupMode</NAME>
typedef enum {
  GTK_SIZE_GROUP_NONE,
  GTK_SIZE_GROUP_HORIZONTAL,
  GTK_SIZE_GROUP_VERTICAL,
  GTK_SIZE_GROUP_BOTH
} GtkSizeGroupMode;
</ENUM>
<ENUM>
<NAME>GtkSizeRequestMode</NAME>
typedef enum
{
  GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH = 0,
  GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT,
  GTK_SIZE_REQUEST_CONSTANT_SIZE
} GtkSizeRequestMode;
</ENUM>
<ENUM>
<NAME>GtkScrollablePolicy</NAME>
typedef enum
{
  GTK_SCROLL_MINIMUM = 0,
  GTK_SCROLL_NATURAL
} GtkScrollablePolicy;
</ENUM>
<ENUM>
<NAME>GtkStateFlags</NAME>
typedef enum
{
  GTK_STATE_FLAG_NORMAL       = 0,
  GTK_STATE_FLAG_ACTIVE       = 1 << 0,
  GTK_STATE_FLAG_PRELIGHT     = 1 << 1,
  GTK_STATE_FLAG_SELECTED     = 1 << 2,
  GTK_STATE_FLAG_INSENSITIVE  = 1 << 3,
  GTK_STATE_FLAG_INCONSISTENT = 1 << 4,
  GTK_STATE_FLAG_FOCUSED      = 1 << 5,
  GTK_STATE_FLAG_BACKDROP     = 1 << 6,
  GTK_STATE_FLAG_DIR_LTR      = 1 << 7,
  GTK_STATE_FLAG_DIR_RTL      = 1 << 8,
  GTK_STATE_FLAG_LINK         = 1 << 9,
  GTK_STATE_FLAG_VISITED      = 1 << 10,
  GTK_STATE_FLAG_CHECKED      = 1 << 11,
  GTK_STATE_FLAG_DROP_ACTIVE  = 1 << 12
} GtkStateFlags;
</ENUM>
<ENUM>
<NAME>GtkRegionFlags</NAME>
typedef enum {
  GTK_REGION_EVEN    = 1 << 0,
  GTK_REGION_ODD     = 1 << 1,
  GTK_REGION_FIRST   = 1 << 2,
  GTK_REGION_LAST    = 1 << 3,
  GTK_REGION_ONLY    = 1 << 4,
  GTK_REGION_SORTED  = 1 << 5
} GtkRegionFlags;
</ENUM>
<ENUM>
<NAME>GtkJunctionSides</NAME>
typedef enum {
  GTK_JUNCTION_NONE   = 0,
  GTK_JUNCTION_CORNER_TOPLEFT = 1 << 0,
  GTK_JUNCTION_CORNER_TOPRIGHT = 1 << 1,
  GTK_JUNCTION_CORNER_BOTTOMLEFT = 1 << 2,
  GTK_JUNCTION_CORNER_BOTTOMRIGHT = 1 << 3,
  GTK_JUNCTION_TOP    = (GTK_JUNCTION_CORNER_TOPLEFT | GTK_JUNCTION_CORNER_TOPRIGHT),
  GTK_JUNCTION_BOTTOM = (GTK_JUNCTION_CORNER_BOTTOMLEFT | GTK_JUNCTION_CORNER_BOTTOMRIGHT),
  GTK_JUNCTION_LEFT   = (GTK_JUNCTION_CORNER_TOPLEFT | GTK_JUNCTION_CORNER_BOTTOMLEFT),
  GTK_JUNCTION_RIGHT  = (GTK_JUNCTION_CORNER_TOPRIGHT | GTK_JUNCTION_CORNER_BOTTOMRIGHT)
} GtkJunctionSides;
</ENUM>
<ENUM>
<NAME>GtkBorderStyle</NAME>
typedef enum {
  GTK_BORDER_STYLE_NONE,
  GTK_BORDER_STYLE_SOLID,
  GTK_BORDER_STYLE_INSET,
  GTK_BORDER_STYLE_OUTSET,
  GTK_BORDER_STYLE_HIDDEN,
  GTK_BORDER_STYLE_DOTTED,
  GTK_BORDER_STYLE_DASHED,
  GTK_BORDER_STYLE_DOUBLE,
  GTK_BORDER_STYLE_GROOVE,
  GTK_BORDER_STYLE_RIDGE
} GtkBorderStyle;
</ENUM>
<ENUM>
<NAME>GtkLevelBarMode</NAME>
typedef enum {
  GTK_LEVEL_BAR_MODE_CONTINUOUS,
  GTK_LEVEL_BAR_MODE_DISCRETE
} GtkLevelBarMode;
</ENUM>
<ENUM>
<NAME>GtkInputPurpose</NAME>
typedef enum
{
  GTK_INPUT_PURPOSE_FREE_FORM,
  GTK_INPUT_PURPOSE_ALPHA,
  GTK_INPUT_PURPOSE_DIGITS,
  GTK_INPUT_PURPOSE_NUMBER,
  GTK_INPUT_PURPOSE_PHONE,
  GTK_INPUT_PURPOSE_URL,
  GTK_INPUT_PURPOSE_EMAIL,
  GTK_INPUT_PURPOSE_NAME,
  GTK_INPUT_PURPOSE_PASSWORD,
  GTK_INPUT_PURPOSE_PIN
} GtkInputPurpose;
</ENUM>
<ENUM>
<NAME>GtkInputHints</NAME>
typedef enum
{
  GTK_INPUT_HINT_NONE                = 0,
  GTK_INPUT_HINT_SPELLCHECK          = 1 << 0,
  GTK_INPUT_HINT_NO_SPELLCHECK       = 1 << 1,
  GTK_INPUT_HINT_WORD_COMPLETION     = 1 << 2,
  GTK_INPUT_HINT_LOWERCASE           = 1 << 3,
  GTK_INPUT_HINT_UPPERCASE_CHARS     = 1 << 4,
  GTK_INPUT_HINT_UPPERCASE_WORDS     = 1 << 5,
  GTK_INPUT_HINT_UPPERCASE_SENTENCES = 1 << 6,
  GTK_INPUT_HINT_INHIBIT_OSK         = 1 << 7,
  GTK_INPUT_HINT_VERTICAL_WRITING    = 1 << 8,
  GTK_INPUT_HINT_EMOJI               = 1 << 9,
  GTK_INPUT_HINT_NO_EMOJI            = 1 << 10
} GtkInputHints;
</ENUM>
<ENUM>
<NAME>GtkPropagationPhase</NAME>
typedef enum
{
  GTK_PHASE_NONE,
  GTK_PHASE_CAPTURE,
  GTK_PHASE_BUBBLE,
  GTK_PHASE_TARGET
} GtkPropagationPhase;
</ENUM>
<ENUM>
<NAME>GtkEventSequenceState</NAME>
typedef enum
{
  GTK_EVENT_SEQUENCE_NONE,
  GTK_EVENT_SEQUENCE_CLAIMED,
  GTK_EVENT_SEQUENCE_DENIED
} GtkEventSequenceState;
</ENUM>
<ENUM>
<NAME>GtkPanDirection</NAME>
typedef enum
{
  GTK_PAN_DIRECTION_LEFT,
  GTK_PAN_DIRECTION_RIGHT,
  GTK_PAN_DIRECTION_UP,
  GTK_PAN_DIRECTION_DOWN
} GtkPanDirection;
</ENUM>
<ENUM>
<NAME>GtkPopoverConstraint</NAME>
typedef enum
{
  GTK_POPOVER_CONSTRAINT_NONE,
  GTK_POPOVER_CONSTRAINT_WINDOW
} GtkPopoverConstraint;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_EVENT_BOX</NAME>
#define GTK_TYPE_EVENT_BOX              (gtk_event_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_EVENT_BOX</NAME>
#define GTK_EVENT_BOX(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_EVENT_BOX, GtkEventBox))
</MACRO>
<MACRO>
<NAME>GTK_EVENT_BOX_CLASS</NAME>
#define GTK_EVENT_BOX_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_EVENT_BOX, GtkEventBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_EVENT_BOX</NAME>
#define GTK_IS_EVENT_BOX(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_EVENT_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_EVENT_BOX_CLASS</NAME>
#define GTK_IS_EVENT_BOX_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_EVENT_BOX))
</MACRO>
<MACRO>
<NAME>GTK_EVENT_BOX_GET_CLASS</NAME>
#define GTK_EVENT_BOX_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_EVENT_BOX, GtkEventBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkEventBox</NAME>
struct _GtkEventBox
{
  GtkBin bin;

  /*< private >*/
  GtkEventBoxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkEventBoxClass</NAME>
struct _GtkEventBoxClass
{
  GtkBinClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_event_box_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_box_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_box_get_visible_window</NAME>
<RETURNS>gboolean    </RETURNS>
GtkEventBox *event_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_box_set_visible_window</NAME>
<RETURNS>void        </RETURNS>
GtkEventBox *event_box, gboolean     visible_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_box_get_above_child</NAME>
<RETURNS>gboolean    </RETURNS>
GtkEventBox *event_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_box_set_above_child</NAME>
<RETURNS>void        </RETURNS>
GtkEventBox *event_box, gboolean     above_child
</FUNCTION>
<STRUCT>
<NAME>GtkEventBoxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_EVENT_CONTROLLER</NAME>
#define GTK_TYPE_EVENT_CONTROLLER         (gtk_event_controller_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_EVENT_CONTROLLER</NAME>
#define GTK_EVENT_CONTROLLER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_EVENT_CONTROLLER, GtkEventController))
</MACRO>
<MACRO>
<NAME>GTK_EVENT_CONTROLLER_CLASS</NAME>
#define GTK_EVENT_CONTROLLER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_EVENT_CONTROLLER, GtkEventControllerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_EVENT_CONTROLLER</NAME>
#define GTK_IS_EVENT_CONTROLLER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_EVENT_CONTROLLER))
</MACRO>
<MACRO>
<NAME>GTK_IS_EVENT_CONTROLLER_CLASS</NAME>
#define GTK_IS_EVENT_CONTROLLER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_EVENT_CONTROLLER))
</MACRO>
<MACRO>
<NAME>GTK_EVENT_CONTROLLER_GET_CLASS</NAME>
#define GTK_EVENT_CONTROLLER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_EVENT_CONTROLLER, GtkEventControllerClass))
</MACRO>
<FUNCTION>
<NAME>gtk_event_controller_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_controller_get_widget</NAME>
<RETURNS>GtkWidget   * </RETURNS>
GtkEventController *controller
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_controller_handle_event</NAME>
<RETURNS>gboolean      </RETURNS>
GtkEventController *controller, const GdkEvent     *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_controller_reset</NAME>
<RETURNS>void          </RETURNS>
GtkEventController *controller
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_controller_get_propagation_phase</NAME>
<RETURNS>GtkPropagationPhase  </RETURNS>
GtkEventController *controller
</FUNCTION>
<FUNCTION>
<NAME>gtk_event_controller_set_propagation_phase</NAME>
<RETURNS>void                 </RETURNS>
GtkEventController  *controller, GtkPropagationPhase  phase
</FUNCTION>
<STRUCT>
<NAME>GtkEventController</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkEventControllerClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_EXPANDER</NAME>
#define GTK_TYPE_EXPANDER            (gtk_expander_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_EXPANDER</NAME>
#define GTK_EXPANDER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_EXPANDER, GtkExpander))
</MACRO>
<MACRO>
<NAME>GTK_EXPANDER_CLASS</NAME>
#define GTK_EXPANDER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_EXPANDER, GtkExpanderClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_EXPANDER</NAME>
#define GTK_IS_EXPANDER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_EXPANDER))
</MACRO>
<MACRO>
<NAME>GTK_IS_EXPANDER_CLASS</NAME>
#define GTK_IS_EXPANDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_EXPANDER))
</MACRO>
<MACRO>
<NAME>GTK_EXPANDER_GET_CLASS</NAME>
#define GTK_EXPANDER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_EXPANDER, GtkExpanderClass))
</MACRO>
<STRUCT>
<NAME>GtkExpander</NAME>
struct _GtkExpander
{
  GtkBin              bin;

  GtkExpanderPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkExpanderClass</NAME>
struct _GtkExpanderClass
{
  GtkBinClass    parent_class;

  /*< public >*/

  /* Key binding signal; to get notification on the expansion
   * state connect to notify:expanded.
   */
  void        (* activate) (GtkExpander *expander);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_expander_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_new</NAME>
<RETURNS>GtkWidget             *</RETURNS>
const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_new_with_mnemonic</NAME>
<RETURNS>GtkWidget             *</RETURNS>
const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_expanded</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, gboolean     expanded
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_expanded</NAME>
<RETURNS>gboolean               </RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_spacing</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, gint         spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_spacing</NAME>
<RETURNS>gint                   </RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_label</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_label</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_use_underline</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, gboolean     use_underline
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_use_underline</NAME>
<RETURNS>gboolean               </RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_use_markup</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, gboolean    use_markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_use_markup</NAME>
<RETURNS>gboolean               </RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_label_widget</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, GtkWidget   *label_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_label_widget</NAME>
<RETURNS>GtkWidget             *</RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_label_fill</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, gboolean     label_fill
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_label_fill</NAME>
<RETURNS>gboolean               </RETURNS>
GtkExpander *expander
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_set_resize_toplevel</NAME>
<RETURNS>void                   </RETURNS>
GtkExpander *expander, gboolean     resize_toplevel
</FUNCTION>
<FUNCTION>
<NAME>gtk_expander_get_resize_toplevel</NAME>
<RETURNS>gboolean               </RETURNS>
GtkExpander *expander
</FUNCTION>
<STRUCT>
<NAME>GtkExpanderPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FILE_CHOOSER</NAME>
#define GTK_TYPE_FILE_CHOOSER             (gtk_file_chooser_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER</NAME>
#define GTK_FILE_CHOOSER(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FILE_CHOOSER, GtkFileChooser))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER</NAME>
#define GTK_IS_FILE_CHOOSER(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FILE_CHOOSER))
</MACRO>
<ENUM>
<NAME>GtkFileChooserAction</NAME>
typedef enum
{
  GTK_FILE_CHOOSER_ACTION_OPEN,
  GTK_FILE_CHOOSER_ACTION_SAVE,
  GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER,
  GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
} GtkFileChooserAction;
</ENUM>
<ENUM>
<NAME>GtkFileChooserConfirmation</NAME>
typedef enum
{
  GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM,
  GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME,
  GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
} GtkFileChooserConfirmation;
</ENUM>
<FUNCTION>
<NAME>gtk_file_chooser_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_FILE_CHOOSER_ERROR</NAME>
#define GTK_FILE_CHOOSER_ERROR (gtk_file_chooser_error_quark ())
</MACRO>
<ENUM>
<NAME>GtkFileChooserError</NAME>
typedef enum {
  GTK_FILE_CHOOSER_ERROR_NONEXISTENT,
  GTK_FILE_CHOOSER_ERROR_BAD_FILENAME,
  GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS,
  GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
} GtkFileChooserError;
</ENUM>
<FUNCTION>
<NAME>gtk_file_chooser_error_quark</NAME>
<RETURNS>GQuark  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_action</NAME>
<RETURNS>void                  </RETURNS>
GtkFileChooser       *chooser, GtkFileChooserAction  action
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_action</NAME>
<RETURNS>GtkFileChooserAction  </RETURNS>
GtkFileChooser       *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_local_only</NAME>
<RETURNS>void                  </RETURNS>
GtkFileChooser       *chooser, gboolean              local_only
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_local_only</NAME>
<RETURNS>gboolean              </RETURNS>
GtkFileChooser       *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_select_multiple</NAME>
<RETURNS>void                  </RETURNS>
GtkFileChooser       *chooser, gboolean              select_multiple
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_select_multiple</NAME>
<RETURNS>gboolean              </RETURNS>
GtkFileChooser       *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_show_hidden</NAME>
<RETURNS>void                  </RETURNS>
GtkFileChooser       *chooser, gboolean              show_hidden
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_show_hidden</NAME>
<RETURNS>gboolean              </RETURNS>
GtkFileChooser       *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_do_overwrite_confirmation</NAME>
<RETURNS>void                  </RETURNS>
GtkFileChooser *chooser, gboolean        do_overwrite_confirmation
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_do_overwrite_confirmation</NAME>
<RETURNS>gboolean              </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_create_folders</NAME>
<RETURNS>void                  </RETURNS>
GtkFileChooser       *chooser, gboolean               create_folders
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_create_folders</NAME>
<RETURNS>gboolean              </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_current_name</NAME>
<RETURNS>void         </RETURNS>
GtkFileChooser *chooser, const gchar    *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_current_name</NAME>
<RETURNS>gchar  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_filename</NAME>
<RETURNS>gchar  *  </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_filename</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_select_filename</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_unselect_filename</NAME>
<RETURNS>void      </RETURNS>
GtkFileChooser *chooser, const char     *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_select_all</NAME>
<RETURNS>void      </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_unselect_all</NAME>
<RETURNS>void      </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_filenames</NAME>
<RETURNS>GSList  * </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_current_folder</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const gchar    *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_current_folder</NAME>
<RETURNS>gchar  *  </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_uri</NAME>
<RETURNS>gchar  *  </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_uri</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_select_uri</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_unselect_uri</NAME>
<RETURNS>void      </RETURNS>
GtkFileChooser *chooser, const char     *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_uris</NAME>
<RETURNS>GSList  * </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_current_folder_uri</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const gchar    *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_current_folder_uri</NAME>
<RETURNS>gchar  *  </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_file</NAME>
<RETURNS>GFile  *  </RETURNS>
GtkFileChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_file</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser  *chooser, GFile           *file, GError         **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_select_file</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser  *chooser, GFile           *file, GError         **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_unselect_file</NAME>
<RETURNS>void      </RETURNS>
GtkFileChooser  *chooser, GFile           *file
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_files</NAME>
<RETURNS>GSList  * </RETURNS>
GtkFileChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_current_folder_file</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser  *chooser, GFile           *file, GError         **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_current_folder_file</NAME>
<RETURNS>GFile  *  </RETURNS>
GtkFileChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_preview_widget</NAME>
<RETURNS>void        </RETURNS>
GtkFileChooser *chooser, GtkWidget      *preview_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_preview_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_preview_widget_active</NAME>
<RETURNS>void        </RETURNS>
GtkFileChooser *chooser, gboolean        active
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_preview_widget_active</NAME>
<RETURNS>gboolean    </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_use_preview_label</NAME>
<RETURNS>void        </RETURNS>
GtkFileChooser *chooser, gboolean        use_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_use_preview_label</NAME>
<RETURNS>gboolean    </RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_preview_filename</NAME>
<RETURNS>char   *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_preview_uri</NAME>
<RETURNS>char   *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_preview_file</NAME>
<RETURNS>GFile  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_extra_widget</NAME>
<RETURNS>void        </RETURNS>
GtkFileChooser *chooser, GtkWidget      *extra_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_extra_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_add_filter</NAME>
<RETURNS>void     </RETURNS>
GtkFileChooser *chooser, GtkFileFilter  *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_remove_filter</NAME>
<RETURNS>void     </RETURNS>
GtkFileChooser *chooser, GtkFileFilter  *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_list_filters</NAME>
<RETURNS>GSList  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_filter</NAME>
<RETURNS>void            </RETURNS>
GtkFileChooser *chooser, GtkFileFilter  *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_filter</NAME>
<RETURNS>GtkFileFilter  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_add_shortcut_folder</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *folder, GError        **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_remove_shortcut_folder</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *folder, GError        **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_list_shortcut_folders</NAME>
<RETURNS>GSList  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_add_shortcut_folder_uri</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *uri, GError        **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_remove_shortcut_folder_uri</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooser *chooser, const char     *uri, GError        **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_list_shortcut_folder_uris</NAME>
<RETURNS>GSList  *</RETURNS>
GtkFileChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_add_choice</NAME>
<RETURNS>void         </RETURNS>
GtkFileChooser  *chooser, const char      *id, const char      *label, const char     **options, const char     **option_labels
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_remove_choice</NAME>
<RETURNS>void         </RETURNS>
GtkFileChooser  *chooser, const char      *id
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_set_choice</NAME>
<RETURNS>void         </RETURNS>
GtkFileChooser  *chooser, const char      *id, const char      *option
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_get_choice</NAME>
<RETURNS>const char  *</RETURNS>
GtkFileChooser  *chooser, const char      *id
</FUNCTION>
<STRUCT>
<NAME>GtkFileChooser</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FILE_CHOOSER_BUTTON</NAME>
#define GTK_TYPE_FILE_CHOOSER_BUTTON            (gtk_file_chooser_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_BUTTON</NAME>
#define GTK_FILE_CHOOSER_BUTTON(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FILE_CHOOSER_BUTTON, GtkFileChooserButton))
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_BUTTON_CLASS</NAME>
#define GTK_FILE_CHOOSER_BUTTON_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FILE_CHOOSER_BUTTON, GtkFileChooserButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER_BUTTON</NAME>
#define GTK_IS_FILE_CHOOSER_BUTTON(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FILE_CHOOSER_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER_BUTTON_CLASS</NAME>
#define GTK_IS_FILE_CHOOSER_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FILE_CHOOSER_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_BUTTON_GET_CLASS</NAME>
#define GTK_FILE_CHOOSER_BUTTON_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FILE_CHOOSER_BUTTON, GtkFileChooserButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkFileChooserButton</NAME>
struct _GtkFileChooserButton
{
  GtkBox parent;

  /*< private >*/
  GtkFileChooserButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFileChooserButtonClass</NAME>
struct _GtkFileChooserButtonClass
{
  GtkBoxClass parent_class;

  /*< public >*/

  void (* file_set) (GtkFileChooserButton *fc);

  /*< private >*/

  /* Padding for future expansion */
  void (*__gtk_reserved1);
  void (*__gtk_reserved2);
  void (*__gtk_reserved3);
  void (*__gtk_reserved4);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_file_chooser_button_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_new</NAME>
<RETURNS>GtkWidget  *           </RETURNS>
const gchar          *title, GtkFileChooserAction  action
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_new_with_dialog</NAME>
<RETURNS>GtkWidget  *           </RETURNS>
GtkWidget            *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_get_title</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkFileChooserButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_set_title</NAME>
<RETURNS>void                   </RETURNS>
GtkFileChooserButton *button, const gchar          *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_get_width_chars</NAME>
<RETURNS>gint                   </RETURNS>
GtkFileChooserButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_set_width_chars</NAME>
<RETURNS>void                   </RETURNS>
GtkFileChooserButton *button, gint                  n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_get_focus_on_click</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkFileChooserButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_button_set_focus_on_click</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkFileChooserButton *button, gboolean              focus_on_click
</FUNCTION>
<STRUCT>
<NAME>GtkFileChooserButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FILE_CHOOSER_DIALOG</NAME>
#define GTK_TYPE_FILE_CHOOSER_DIALOG             (gtk_file_chooser_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_DIALOG</NAME>
#define GTK_FILE_CHOOSER_DIALOG(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FILE_CHOOSER_DIALOG, GtkFileChooserDialog))
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_FILE_CHOOSER_DIALOG_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FILE_CHOOSER_DIALOG, GtkFileChooserDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER_DIALOG</NAME>
#define GTK_IS_FILE_CHOOSER_DIALOG(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FILE_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_IS_FILE_CHOOSER_DIALOG_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FILE_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_DIALOG_GET_CLASS</NAME>
#define GTK_FILE_CHOOSER_DIALOG_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FILE_CHOOSER_DIALOG, GtkFileChooserDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkFileChooserDialog</NAME>
struct _GtkFileChooserDialog
{
  GtkDialog parent_instance;

  GtkFileChooserDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFileChooserDialogClass</NAME>
struct _GtkFileChooserDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_file_chooser_dialog_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_dialog_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar          *title, GtkWindow            *parent, GtkFileChooserAction  action, const gchar          *first_button_text, ...
</FUNCTION>
<STRUCT>
<NAME>GtkFileChooserDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FILE_CHOOSER_NATIVE</NAME>
#define GTK_TYPE_FILE_CHOOSER_NATIVE             (gtk_file_chooser_native_get_type ())
</MACRO>
<FUNCTION>
<NAME>gtk_file_chooser_native_new</NAME>
<RETURNS>GtkFileChooserNative  *</RETURNS>
const gchar          *title, GtkWindow            *parent, GtkFileChooserAction  action, const gchar          *accept_label, const gchar          *cancel_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_get_accept_label</NAME>
<RETURNS>const char  *</RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_set_accept_label</NAME>
<RETURNS>void         </RETURNS>
GtkFileChooserNative *self, const char           *accept_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_get_cancel_label</NAME>
<RETURNS>const char  *</RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_set_cancel_label</NAME>
<RETURNS>void         </RETURNS>
GtkFileChooserNative *self, const char           *cancel_label
</FUNCTION>
<STRUCT>
<NAME>GtkFileChooserNative</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkFileChooserNativeChoice</NAME>
typedef struct {
  char *id;
  char *label;
  char **options;
  char **option_labels;
  char *selected;
} GtkFileChooserNativeChoice;
</STRUCT>
<STRUCT>
<NAME>GtkFileChooserNative</NAME>
struct _GtkFileChooserNative
{
  GtkNativeDialog parent_instance;

  char *accept_label;
  char *cancel_label;

  int mode;
  GSList *custom_files;

  GFile *current_folder;
  GFile *current_file;
  char *current_name;
  GtkFileFilter *current_filter;
  GSList *choices;

  /* Fallback mode */
  GtkWidget *dialog;
  GtkWidget *accept_button;
  GtkWidget *cancel_button;

  gpointer mode_data;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_file_chooser_native_win32_show</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_win32_hide</NAME>
<RETURNS>void  </RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_quartz_show</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_quartz_hide</NAME>
<RETURNS>void  </RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_portal_show</NAME>
<RETURNS>gboolean  </RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_native_portal_hide</NAME>
<RETURNS>void  </RETURNS>
GtkFileChooserNative *self
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_FILE_CHOOSER_WIDGET</NAME>
#define GTK_TYPE_FILE_CHOOSER_WIDGET             (gtk_file_chooser_widget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_WIDGET</NAME>
#define GTK_FILE_CHOOSER_WIDGET(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FILE_CHOOSER_WIDGET, GtkFileChooserWidget))
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_FILE_CHOOSER_WIDGET_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FILE_CHOOSER_WIDGET, GtkFileChooserWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER_WIDGET</NAME>
#define GTK_IS_FILE_CHOOSER_WIDGET(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FILE_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_IS_FILE_CHOOSER_WIDGET_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FILE_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_FILE_CHOOSER_WIDGET_GET_CLASS</NAME>
#define GTK_FILE_CHOOSER_WIDGET_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FILE_CHOOSER_WIDGET, GtkFileChooserWidgetClass))
</MACRO>
<STRUCT>
<NAME>GtkFileChooserWidget</NAME>
struct _GtkFileChooserWidget
{
  GtkBox parent_instance;

  GtkFileChooserWidgetPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFileChooserWidgetClass</NAME>
struct _GtkFileChooserWidgetClass
{
  GtkBoxClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_file_chooser_widget_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_chooser_widget_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkFileChooserAction  action
</FUNCTION>
<STRUCT>
<NAME>GtkFileChooserWidgetPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FILE_FILTER</NAME>
#define GTK_TYPE_FILE_FILTER              (gtk_file_filter_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FILE_FILTER</NAME>
#define GTK_FILE_FILTER(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FILE_FILTER, GtkFileFilter))
</MACRO>
<MACRO>
<NAME>GTK_IS_FILE_FILTER</NAME>
#define GTK_IS_FILE_FILTER(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FILE_FILTER))
</MACRO>
<ENUM>
<NAME>GtkFileFilterFlags</NAME>
typedef enum {
  GTK_FILE_FILTER_FILENAME     = 1 << 0,
  GTK_FILE_FILTER_URI          = 1 << 1,
  GTK_FILE_FILTER_DISPLAY_NAME = 1 << 2,
  GTK_FILE_FILTER_MIME_TYPE    = 1 << 3
} GtkFileFilterFlags;
</ENUM>
<USER_FUNCTION>
<NAME>GtkFileFilterFunc</NAME>
<RETURNS>gboolean </RETURNS>
const GtkFileFilterInfo *filter_info,
				       gpointer                 data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkFileFilterInfo</NAME>
struct _GtkFileFilterInfo
{
  GtkFileFilterFlags contains;

  const gchar *filename;
  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_file_filter_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_new</NAME>
<RETURNS>GtkFileFilter  *       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_set_name</NAME>
<RETURNS>void                   </RETURNS>
GtkFileFilter *filter, const gchar   *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_get_name</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkFileFilter *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_add_mime_type</NAME>
<RETURNS>void  </RETURNS>
GtkFileFilter      *filter, const gchar        *mime_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_add_pattern</NAME>
<RETURNS>void  </RETURNS>
GtkFileFilter      *filter, const gchar        *pattern
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_add_pixbuf_formats</NAME>
<RETURNS>void  </RETURNS>
GtkFileFilter      *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_add_custom</NAME>
<RETURNS>void  </RETURNS>
GtkFileFilter      *filter, GtkFileFilterFlags  needed, GtkFileFilterFunc   func, gpointer            data, GDestroyNotify      notify
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_get_needed</NAME>
<RETURNS>GtkFileFilterFlags  </RETURNS>
GtkFileFilter           *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_filter</NAME>
<RETURNS>gboolean            </RETURNS>
GtkFileFilter           *filter, const GtkFileFilterInfo *filter_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_to_gvariant</NAME>
<RETURNS>GVariant       *</RETURNS>
GtkFileFilter *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_filter_new_from_gvariant</NAME>
<RETURNS>GtkFileFilter  *</RETURNS>
GVariant      *variant
</FUNCTION>
<STRUCT>
<NAME>GtkFileFilter</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FIXED</NAME>
#define GTK_TYPE_FIXED                  (gtk_fixed_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FIXED</NAME>
#define GTK_FIXED(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FIXED, GtkFixed))
</MACRO>
<MACRO>
<NAME>GTK_FIXED_CLASS</NAME>
#define GTK_FIXED_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FIXED, GtkFixedClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FIXED</NAME>
#define GTK_IS_FIXED(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FIXED))
</MACRO>
<MACRO>
<NAME>GTK_IS_FIXED_CLASS</NAME>
#define GTK_IS_FIXED_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FIXED))
</MACRO>
<MACRO>
<NAME>GTK_FIXED_GET_CLASS</NAME>
#define GTK_FIXED_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FIXED, GtkFixedClass))
</MACRO>
<STRUCT>
<NAME>GtkFixed</NAME>
struct _GtkFixed
{
  GtkContainer container;

  /*< private >*/
  GtkFixedPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFixedClass</NAME>
struct _GtkFixedClass
{
  GtkContainerClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GtkFixedChild</NAME>
struct _GtkFixedChild
{
  GtkWidget *widget;
  gint x;
  gint y;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_fixed_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_fixed_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_fixed_put</NAME>
<RETURNS>void        </RETURNS>
GtkFixed       *fixed, GtkWidget      *widget, gint            x, gint            y
</FUNCTION>
<FUNCTION>
<NAME>gtk_fixed_move</NAME>
<RETURNS>void        </RETURNS>
GtkFixed       *fixed, GtkWidget      *widget, gint            x, gint            y
</FUNCTION>
<STRUCT>
<NAME>GtkFixedPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FLOW_BOX</NAME>
#define GTK_TYPE_FLOW_BOX                  (gtk_flow_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FLOW_BOX</NAME>
#define GTK_FLOW_BOX(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FLOW_BOX, GtkFlowBox))
</MACRO>
<MACRO>
<NAME>GTK_FLOW_BOX_CLASS</NAME>
#define GTK_FLOW_BOX_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FLOW_BOX, GtkFlowBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FLOW_BOX</NAME>
#define GTK_IS_FLOW_BOX(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FLOW_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_FLOW_BOX_CLASS</NAME>
#define GTK_IS_FLOW_BOX_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FLOW_BOX))
</MACRO>
<MACRO>
<NAME>GTK_FLOW_BOX_GET_CLASS</NAME>
#define GTK_FLOW_BOX_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FLOW_BOX, GtkFlowBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkFlowBox</NAME>
struct _GtkFlowBox
{
  GtkContainer container;
};
</STRUCT>
<STRUCT>
<NAME>GtkFlowBoxClass</NAME>
struct _GtkFlowBoxClass
{
  GtkContainerClass parent_class;

  void (*child_activated)            (GtkFlowBox        *box,
                                      GtkFlowBoxChild   *child);
  void (*selected_children_changed)  (GtkFlowBox        *box);
  void (*activate_cursor_child)      (GtkFlowBox        *box);
  void (*toggle_cursor_child)        (GtkFlowBox        *box);
  gboolean (*move_cursor)            (GtkFlowBox        *box,
                                      GtkMovementStep    step,
                                      gint               count);
  void (*select_all)                 (GtkFlowBox        *box);
  void (*unselect_all)               (GtkFlowBox        *box);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FLOW_BOX_CHILD</NAME>
#define GTK_TYPE_FLOW_BOX_CHILD            (gtk_flow_box_child_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FLOW_BOX_CHILD</NAME>
#define GTK_FLOW_BOX_CHILD(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FLOW_BOX_CHILD, GtkFlowBoxChild))
</MACRO>
<MACRO>
<NAME>GTK_FLOW_BOX_CHILD_CLASS</NAME>
#define GTK_FLOW_BOX_CHILD_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FLOW_BOX_CHILD, GtkFlowBoxChildClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FLOW_BOX_CHILD</NAME>
#define GTK_IS_FLOW_BOX_CHILD(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FLOW_BOX_CHILD))
</MACRO>
<MACRO>
<NAME>GTK_IS_FLOW_BOX_CHILD_CLASS</NAME>
#define GTK_IS_FLOW_BOX_CHILD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FLOW_BOX_CHILD))
</MACRO>
<MACRO>
<NAME>GTK_FLOW_BOX_CHILD_GET_CLASS</NAME>
#define GTK_FLOW_BOX_CHILD_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), EG_TYPE_FLOW_BOX_CHILD, GtkFlowBoxChildClass))
</MACRO>
<STRUCT>
<NAME>GtkFlowBoxChild</NAME>
struct _GtkFlowBoxChild
{
  GtkBin parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkFlowBoxChildClass</NAME>
struct _GtkFlowBoxChildClass
{
  GtkBinClass parent_class;

  void (* activate) (GtkFlowBoxChild *child);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
</STRUCT>
<USER_FUNCTION>
<NAME>GtkFlowBoxCreateWidgetFunc</NAME>
<RETURNS>GtkWidget *</RETURNS>
gpointer item,
                                                   gpointer  user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_child_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_child_new</NAME>
<RETURNS>GtkWidget *            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_child_get_index</NAME>
<RETURNS>gint                   </RETURNS>
GtkFlowBoxChild *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_child_is_selected</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFlowBoxChild *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_child_changed</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBoxChild *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_new</NAME>
<RETURNS>GtkWidget             *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_bind_model</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox                 *box, GListModel                 *model, GtkFlowBoxCreateWidgetFunc  create_widget_func, gpointer                    user_data, GDestroyNotify              user_data_free_func
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_homogeneous</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox           *box, gboolean              homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_homogeneous</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFlowBox           *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_row_spacing</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox           *box, guint                 spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_row_spacing</NAME>
<RETURNS>guint                  </RETURNS>
GtkFlowBox           *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_column_spacing</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox           *box, guint                 spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_column_spacing</NAME>
<RETURNS>guint                  </RETURNS>
GtkFlowBox           *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_min_children_per_line</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox           *box, guint                 n_children
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_min_children_per_line</NAME>
<RETURNS>guint                  </RETURNS>
GtkFlowBox           *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_max_children_per_line</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox           *box, guint                 n_children
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_max_children_per_line</NAME>
<RETURNS>guint                  </RETURNS>
GtkFlowBox           *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_activate_on_single_click</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, gboolean           single
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_activate_on_single_click</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFlowBox        *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_insert</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkWidget         *widget, gint               position
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_child_at_index</NAME>
<RETURNS>GtkFlowBoxChild       *</RETURNS>
GtkFlowBox        *box, gint               idx
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_child_at_pos</NAME>
<RETURNS>GtkFlowBoxChild       *</RETURNS>
GtkFlowBox        *box, gint               x, gint               y
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkFlowBoxForeachFunc</NAME>
<RETURNS>void </RETURNS>
GtkFlowBox      *box,
                                        GtkFlowBoxChild *child,
                                        gpointer         user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_selected_foreach</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkFlowBoxForeachFunc func, gpointer           data
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_selected_children</NAME>
<RETURNS>GList                 *</RETURNS>
GtkFlowBox        *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_select_child</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkFlowBoxChild   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_unselect_child</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkFlowBoxChild   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_select_all</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_unselect_all</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_selection_mode</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkSelectionMode   mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_get_selection_mode</NAME>
<RETURNS>GtkSelectionMode       </RETURNS>
GtkFlowBox        *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_hadjustment</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkAdjustment     *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_vadjustment</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkAdjustment     *adjustment
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkFlowBoxFilterFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkFlowBoxChild *child,
                                          gpointer         user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_filter_func</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkFlowBoxFilterFunc filter_func, gpointer             user_data, GDestroyNotify       destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_invalidate_filter</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkFlowBoxSortFunc</NAME>
<RETURNS>gint </RETURNS>
GtkFlowBoxChild *child1,
                                    GtkFlowBoxChild *child2,
                                    gpointer         user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_set_sort_func</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox        *box, GtkFlowBoxSortFunc  sort_func, gpointer            user_data, GDestroyNotify      destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_flow_box_invalidate_sort</NAME>
<RETURNS>void                   </RETURNS>
GtkFlowBox         *box
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_FONT_BUTTON</NAME>
#define GTK_TYPE_FONT_BUTTON             (gtk_font_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FONT_BUTTON</NAME>
#define GTK_FONT_BUTTON(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FONT_BUTTON, GtkFontButton))
</MACRO>
<MACRO>
<NAME>GTK_FONT_BUTTON_CLASS</NAME>
#define GTK_FONT_BUTTON_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_BUTTON, GtkFontButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_BUTTON</NAME>
#define GTK_IS_FONT_BUTTON(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FONT_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_BUTTON_CLASS</NAME>
#define GTK_IS_FONT_BUTTON_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_FONT_BUTTON_GET_CLASS</NAME>
#define GTK_FONT_BUTTON_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FONT_BUTTON, GtkFontButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkFontButton</NAME>
struct _GtkFontButton {
  GtkButton button;

  /*< private >*/
  GtkFontButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFontButtonClass</NAME>
struct _GtkFontButtonClass {
  GtkButtonClass parent_class;

  /* font_set signal is emitted when font is chosen */
  void (* font_set) (GtkFontButton *gfp);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_font_button_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_new</NAME>
<RETURNS>GtkWidget             *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_new_with_font</NAME>
<RETURNS>GtkWidget             *</RETURNS>
const gchar   *fontname
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_get_title</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkFontButton *font_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_set_title</NAME>
<RETURNS>void                   </RETURNS>
GtkFontButton *font_button, const gchar   *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_get_use_font</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFontButton *font_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_set_use_font</NAME>
<RETURNS>void                   </RETURNS>
GtkFontButton *font_button, gboolean       use_font
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_get_use_size</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFontButton *font_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_set_use_size</NAME>
<RETURNS>void                   </RETURNS>
GtkFontButton *font_button, gboolean       use_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_get_font_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkFontButton *font_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_set_font_name</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkFontButton *font_button, const gchar   *fontname
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_get_show_style</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFontButton *font_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_set_show_style</NAME>
<RETURNS>void                   </RETURNS>
GtkFontButton *font_button, gboolean       show_style
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_get_show_size</NAME>
<RETURNS>gboolean               </RETURNS>
GtkFontButton *font_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_button_set_show_size</NAME>
<RETURNS>void                   </RETURNS>
GtkFontButton *font_button, gboolean       show_size
</FUNCTION>
<STRUCT>
<NAME>GtkFontButtonPrivate</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GtkFontFilterFunc</NAME>
<RETURNS>gboolean </RETURNS>
const PangoFontFamily *family,
                                       const PangoFontFace   *face,
                                       gpointer               data
</USER_FUNCTION>
<MACRO>
<NAME>GTK_TYPE_FONT_CHOOSER</NAME>
#define GTK_TYPE_FONT_CHOOSER			(gtk_font_chooser_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER</NAME>
#define GTK_FONT_CHOOSER(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FONT_CHOOSER, GtkFontChooser))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_CHOOSER</NAME>
#define GTK_IS_FONT_CHOOSER(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FONT_CHOOSER))
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_GET_IFACE</NAME>
#define GTK_FONT_CHOOSER_GET_IFACE(inst)	(G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_FONT_CHOOSER, GtkFontChooserIface))
</MACRO>
<STRUCT>
<NAME>GtkFontChooserIface</NAME>
struct _GtkFontChooserIface
{
  GTypeInterface base_iface;

  /* Methods */
  PangoFontFamily * (* get_font_family)         (GtkFontChooser  *fontchooser);
  PangoFontFace *   (* get_font_face)           (GtkFontChooser  *fontchooser);
  gint              (* get_font_size)           (GtkFontChooser  *fontchooser);

  void              (* set_filter_func)         (GtkFontChooser   *fontchooser,
                                                 GtkFontFilterFunc filter,
                                                 gpointer          user_data,
                                                 GDestroyNotify    destroy);

  /* Signals */
  void (* font_activated) (GtkFontChooser *chooser,
                           const gchar    *fontname);

  /* More methods */
  void              (* set_font_map)            (GtkFontChooser   *fontchooser,
                                                 PangoFontMap     *fontmap);
  PangoFontMap *    (* get_font_map)            (GtkFontChooser   *fontchooser);

   /* Padding */
  gpointer padding[10];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_font_chooser_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_font_family</NAME>
<RETURNS>PangoFontFamily  *</RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_font_face</NAME>
<RETURNS>PangoFontFace    *</RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_font_size</NAME>
<RETURNS>gint              </RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_font_desc</NAME>
<RETURNS>PangoFontDescription  *</RETURNS>
GtkFontChooser             *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_set_font_desc</NAME>
<RETURNS>void              </RETURNS>
GtkFontChooser             *fontchooser, const PangoFontDescription *font_desc
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_font</NAME>
<RETURNS>gchar *           </RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_set_font</NAME>
<RETURNS>void              </RETURNS>
GtkFontChooser   *fontchooser, const gchar      *fontname
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_preview_text</NAME>
<RETURNS>gchar *           </RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_set_preview_text</NAME>
<RETURNS>void              </RETURNS>
GtkFontChooser   *fontchooser, const gchar      *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_show_preview_entry</NAME>
<RETURNS>gboolean          </RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_set_show_preview_entry</NAME>
<RETURNS>void              </RETURNS>
GtkFontChooser   *fontchooser, gboolean          show_preview_entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_set_filter_func</NAME>
<RETURNS>void              </RETURNS>
GtkFontChooser   *fontchooser, GtkFontFilterFunc filter, gpointer          user_data, GDestroyNotify    destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_set_font_map</NAME>
<RETURNS>void              </RETURNS>
GtkFontChooser   *fontchooser, PangoFontMap     *fontmap
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_get_font_map</NAME>
<RETURNS>PangoFontMap  *   </RETURNS>
GtkFontChooser   *fontchooser
</FUNCTION>
<STRUCT>
<NAME>GtkFontChooser</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FONT_CHOOSER_DIALOG</NAME>
#define GTK_TYPE_FONT_CHOOSER_DIALOG              (gtk_font_chooser_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_DIALOG</NAME>
#define GTK_FONT_CHOOSER_DIALOG(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FONT_CHOOSER_DIALOG, GtkFontChooserDialog))
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_FONT_CHOOSER_DIALOG_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_CHOOSER_DIALOG, GtkFontChooserDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_CHOOSER_DIALOG</NAME>
#define GTK_IS_FONT_CHOOSER_DIALOG(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FONT_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_IS_FONT_CHOOSER_DIALOG_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_DIALOG_GET_CLASS</NAME>
#define GTK_FONT_CHOOSER_DIALOG_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FONT_CHOOSER_DIALOG, GtkFontChooserDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkFontChooserDialog</NAME>
struct _GtkFontChooserDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkFontChooserDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFontChooserDialogClass</NAME>
struct _GtkFontChooserDialogClass
{
  GtkDialogClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_font_chooser_dialog_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_dialog_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar          *title, GtkWindow            *parent
</FUNCTION>
<STRUCT>
<NAME>GtkFontChooserDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FONT_CHOOSER_WIDGET</NAME>
#define GTK_TYPE_FONT_CHOOSER_WIDGET              (gtk_font_chooser_widget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_WIDGET</NAME>
#define GTK_FONT_CHOOSER_WIDGET(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FONT_CHOOSER_WIDGET, GtkFontChooserWidget))
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_FONT_CHOOSER_WIDGET_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_CHOOSER_WIDGET, GtkFontChooserWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_CHOOSER_WIDGET</NAME>
#define GTK_IS_FONT_CHOOSER_WIDGET(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FONT_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_IS_FONT_CHOOSER_WIDGET_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_FONT_CHOOSER_WIDGET_GET_CLASS</NAME>
#define GTK_FONT_CHOOSER_WIDGET_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FONT_CHOOSER_WIDGET, GtkFontChooserWidgetClass))
</MACRO>
<STRUCT>
<NAME>GtkFontChooserWidget</NAME>
struct _GtkFontChooserWidget
{
  GtkBox parent_instance;

  /*< private >*/
  GtkFontChooserWidgetPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFontChooserWidgetClass</NAME>
struct _GtkFontChooserWidgetClass
{
  GtkBoxClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_font_chooser_widget_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_chooser_widget_new</NAME>
<RETURNS>GtkWidget *   </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkFontChooserWidgetPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_font_chooser_widget_handle_event</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget   *widget, GdkEventKey *event
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_FRAME</NAME>
#define GTK_TYPE_FRAME                  (gtk_frame_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FRAME</NAME>
#define GTK_FRAME(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FRAME, GtkFrame))
</MACRO>
<MACRO>
<NAME>GTK_FRAME_CLASS</NAME>
#define GTK_FRAME_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FRAME, GtkFrameClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FRAME</NAME>
#define GTK_IS_FRAME(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FRAME))
</MACRO>
<MACRO>
<NAME>GTK_IS_FRAME_CLASS</NAME>
#define GTK_IS_FRAME_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FRAME))
</MACRO>
<MACRO>
<NAME>GTK_FRAME_GET_CLASS</NAME>
#define GTK_FRAME_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FRAME, GtkFrameClass))
</MACRO>
<STRUCT>
<NAME>GtkFrame</NAME>
struct _GtkFrame
{
  GtkBin bin;

  /*< private >*/
  GtkFramePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFrameClass</NAME>
struct _GtkFrameClass
{
  GtkBinClass parent_class;

  /*< public >*/

  void (*compute_child_allocation) (GtkFrame *frame,
                                    GtkAllocation *allocation);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_frame_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar   *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_set_label</NAME>
<RETURNS>void           </RETURNS>
GtkFrame    *frame, const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_get_label</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkFrame    *frame
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_set_label_widget</NAME>
<RETURNS>void        </RETURNS>
GtkFrame      *frame, GtkWidget     *label_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_get_label_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkFrame      *frame
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_set_label_align</NAME>
<RETURNS>void        </RETURNS>
GtkFrame      *frame, gfloat         xalign, gfloat         yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_get_label_align</NAME>
<RETURNS>void        </RETURNS>
GtkFrame      *frame, gfloat        *xalign, gfloat        *yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_set_shadow_type</NAME>
<RETURNS>void        </RETURNS>
GtkFrame      *frame, GtkShadowType  type
</FUNCTION>
<FUNCTION>
<NAME>gtk_frame_get_shadow_type</NAME>
<RETURNS>GtkShadowType  </RETURNS>
GtkFrame    *frame
</FUNCTION>
<STRUCT>
<NAME>GtkFramePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE</NAME>
#define GTK_TYPE_GESTURE         (gtk_gesture_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE</NAME>
#define GTK_GESTURE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE, GtkGesture))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_CLASS</NAME>
#define GTK_GESTURE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE, GtkGestureClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE</NAME>
#define GTK_IS_GESTURE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_CLASS</NAME>
#define GTK_IS_GESTURE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_GET_CLASS</NAME>
#define GTK_GESTURE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE, GtkGestureClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_device</NAME>
<RETURNS>GdkDevice  * </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_set_state</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture            *gesture, GtkEventSequenceState  state
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_sequence_state</NAME>
<RETURNS>GtkEventSequenceState</RETURNS>
GtkGesture            *gesture, GdkEventSequence      *sequence
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_set_sequence_state</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture            *gesture, GdkEventSequence      *sequence, GtkEventSequenceState  state
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_sequences</NAME>
<RETURNS>GList      * </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_last_updated_sequence</NAME>
<RETURNS>GdkEventSequence  *</RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_handles_sequence</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture       *gesture, GdkEventSequence *sequence
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_last_event</NAME>
<RETURNS>const GdkEvent  *</RETURNS>
GtkGesture       *gesture, GdkEventSequence *sequence
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_point</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture       *gesture, GdkEventSequence *sequence, gdouble          *x, gdouble          *y
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_bounding_box</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture       *gesture, GdkRectangle     *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_bounding_box_center</NAME>
<RETURNS>gboolean  </RETURNS>
GtkGesture       *gesture, gdouble          *x, gdouble          *y
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_is_active</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_is_recognized</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_window</NAME>
<RETURNS>GdkWindow  * </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_set_window</NAME>
<RETURNS>void         </RETURNS>
GtkGesture       *gesture, GdkWindow        *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_group</NAME>
<RETURNS>void         </RETURNS>
GtkGesture       *group_gesture, GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_ungroup</NAME>
<RETURNS>void         </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_get_group</NAME>
<RETURNS>GList  *     </RETURNS>
GtkGesture       *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_is_grouped_with</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGesture       *gesture, GtkGesture       *other
</FUNCTION>
<STRUCT>
<NAME>GtkGesture</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_DRAG</NAME>
#define GTK_TYPE_GESTURE_DRAG         (gtk_gesture_drag_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_DRAG</NAME>
#define GTK_GESTURE_DRAG(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_DRAG, GtkGestureDrag))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_DRAG_CLASS</NAME>
#define GTK_GESTURE_DRAG_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_DRAG, GtkGestureDragClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_DRAG</NAME>
#define GTK_IS_GESTURE_DRAG(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_DRAG))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_DRAG_CLASS</NAME>
#define GTK_IS_GESTURE_DRAG_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_DRAG))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_DRAG_GET_CLASS</NAME>
#define GTK_GESTURE_DRAG_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_DRAG, GtkGestureDragClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_drag_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_drag_new</NAME>
<RETURNS>GtkGesture  * </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_drag_get_start_point</NAME>
<RETURNS>gboolean      </RETURNS>
GtkGestureDrag *gesture, gdouble        *x, gdouble        *y
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_drag_get_offset</NAME>
<RETURNS>gboolean      </RETURNS>
GtkGestureDrag *gesture, gdouble        *x, gdouble        *y
</FUNCTION>
<STRUCT>
<NAME>GtkGestureDrag</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureDragClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_LONG_PRESS</NAME>
#define GTK_TYPE_GESTURE_LONG_PRESS         (gtk_gesture_long_press_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_LONG_PRESS</NAME>
#define GTK_GESTURE_LONG_PRESS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_LONG_PRESS, GtkGestureLongPress))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_LONG_PRESS_CLASS</NAME>
#define GTK_GESTURE_LONG_PRESS_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_LONG_PRESS, GtkGestureLongPressClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_LONG_PRESS</NAME>
#define GTK_IS_GESTURE_LONG_PRESS(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_LONG_PRESS))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_LONG_PRESS_CLASS</NAME>
#define GTK_IS_GESTURE_LONG_PRESS_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_LONG_PRESS))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_LONG_PRESS_GET_CLASS</NAME>
#define GTK_GESTURE_LONG_PRESS_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_LONG_PRESS, GtkGestureLongPressClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_long_press_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_long_press_new</NAME>
<RETURNS>GtkGesture  * </RETURNS>
GtkWidget *widget
</FUNCTION>
<STRUCT>
<NAME>GtkGestureLongPress</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureLongPressClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_MULTI_PRESS</NAME>
#define GTK_TYPE_GESTURE_MULTI_PRESS         (gtk_gesture_multi_press_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_MULTI_PRESS</NAME>
#define GTK_GESTURE_MULTI_PRESS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_MULTI_PRESS, GtkGestureMultiPress))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_MULTI_PRESS_CLASS</NAME>
#define GTK_GESTURE_MULTI_PRESS_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_MULTI_PRESS, GtkGestureMultiPressClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_MULTI_PRESS</NAME>
#define GTK_IS_GESTURE_MULTI_PRESS(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_MULTI_PRESS))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_MULTI_PRESS_CLASS</NAME>
#define GTK_IS_GESTURE_MULTI_PRESS_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_MULTI_PRESS))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_MULTI_PRESS_GET_CLASS</NAME>
#define GTK_GESTURE_MULTI_PRESS_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_MULTI_PRESS, GtkGestureMultiPressClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_multi_press_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_multi_press_new</NAME>
<RETURNS>GtkGesture  * </RETURNS>
GtkWidget            *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_multi_press_set_area</NAME>
<RETURNS>void          </RETURNS>
GtkGestureMultiPress *gesture, const GdkRectangle   *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_multi_press_get_area</NAME>
<RETURNS>gboolean      </RETURNS>
GtkGestureMultiPress *gesture, GdkRectangle         *rect
</FUNCTION>
<STRUCT>
<NAME>GtkGestureMultiPress</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureMultiPressClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_PAN</NAME>
#define GTK_TYPE_GESTURE_PAN         (gtk_gesture_pan_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_PAN</NAME>
#define GTK_GESTURE_PAN(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_PAN, GtkGesturePan))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_PAN_CLASS</NAME>
#define GTK_GESTURE_PAN_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_PAN, GtkGesturePanClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_PAN</NAME>
#define GTK_IS_GESTURE_PAN(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_PAN))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_PAN_CLASS</NAME>
#define GTK_IS_GESTURE_PAN_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_PAN))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_PAN_GET_CLASS</NAME>
#define GTK_GESTURE_PAN_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_PAN, GtkGesturePanClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_pan_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_pan_new</NAME>
<RETURNS>GtkGesture  *      </RETURNS>
GtkWidget      *widget, GtkOrientation  orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_pan_get_orientation</NAME>
<RETURNS>GtkOrientation     </RETURNS>
GtkGesturePan  *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_pan_set_orientation</NAME>
<RETURNS>void               </RETURNS>
GtkGesturePan  *gesture, GtkOrientation  orientation
</FUNCTION>
<STRUCT>
<NAME>GtkGesturePan</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGesturePanClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_ROTATE</NAME>
#define GTK_TYPE_GESTURE_ROTATE         (gtk_gesture_rotate_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_ROTATE</NAME>
#define GTK_GESTURE_ROTATE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_ROTATE, GtkGestureRotate))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_ROTATE_CLASS</NAME>
#define GTK_GESTURE_ROTATE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_ROTATE, GtkGestureRotateClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_ROTATE</NAME>
#define GTK_IS_GESTURE_ROTATE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_ROTATE))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_ROTATE_CLASS</NAME>
#define GTK_IS_GESTURE_ROTATE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_ROTATE))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_ROTATE_GET_CLASS</NAME>
#define GTK_GESTURE_ROTATE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_ROTATE, GtkGestureRotateClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_rotate_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_rotate_new</NAME>
<RETURNS>GtkGesture  * </RETURNS>
GtkWidget        *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_rotate_get_angle_delta</NAME>
<RETURNS>gdouble       </RETURNS>
GtkGestureRotate *gesture
</FUNCTION>
<STRUCT>
<NAME>GtkGestureRotate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureRotateClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_SINGLE</NAME>
#define GTK_TYPE_GESTURE_SINGLE         (gtk_gesture_single_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_SINGLE</NAME>
#define GTK_GESTURE_SINGLE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_SINGLE, GtkGestureSingle))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_SINGLE_CLASS</NAME>
#define GTK_GESTURE_SINGLE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_SINGLE, GtkGestureSingleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_SINGLE</NAME>
#define GTK_IS_GESTURE_SINGLE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_SINGLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_SINGLE_CLASS</NAME>
#define GTK_IS_GESTURE_SINGLE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_SINGLE))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_SINGLE_GET_CLASS</NAME>
#define GTK_GESTURE_SINGLE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_SINGLE, GtkGestureSingleClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_single_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_get_touch_only</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGestureSingle *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_set_touch_only</NAME>
<RETURNS>void         </RETURNS>
GtkGestureSingle *gesture, gboolean          touch_only
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_get_exclusive</NAME>
<RETURNS>gboolean     </RETURNS>
GtkGestureSingle *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_set_exclusive</NAME>
<RETURNS>void         </RETURNS>
GtkGestureSingle *gesture, gboolean          exclusive
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_get_button</NAME>
<RETURNS>guint        </RETURNS>
GtkGestureSingle *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_set_button</NAME>
<RETURNS>void         </RETURNS>
GtkGestureSingle *gesture, guint             button
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_get_current_button</NAME>
<RETURNS>guint  </RETURNS>
GtkGestureSingle *gesture
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_single_get_current_sequence</NAME>
<RETURNS>GdkEventSequence  *</RETURNS>
GtkGestureSingle *gesture
</FUNCTION>
<STRUCT>
<NAME>GtkGestureSingle</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureSingleClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_SWIPE</NAME>
#define GTK_TYPE_GESTURE_SWIPE         (gtk_gesture_swipe_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_SWIPE</NAME>
#define GTK_GESTURE_SWIPE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_SWIPE, GtkGestureSwipe))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_SWIPE_CLASS</NAME>
#define GTK_GESTURE_SWIPE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_SWIPE, GtkGestureSwipeClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_SWIPE</NAME>
#define GTK_IS_GESTURE_SWIPE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_SWIPE))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_SWIPE_CLASS</NAME>
#define GTK_IS_GESTURE_SWIPE_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_SWIPE))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_SWIPE_GET_CLASS</NAME>
#define GTK_GESTURE_SWIPE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_SWIPE, GtkGestureSwipeClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_swipe_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_swipe_new</NAME>
<RETURNS>GtkGesture  * </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_swipe_get_velocity</NAME>
<RETURNS>gboolean      </RETURNS>
GtkGestureSwipe *gesture, gdouble         *velocity_x, gdouble         *velocity_y
</FUNCTION>
<STRUCT>
<NAME>GtkGestureSwipe</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureSwipeClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GESTURE_ZOOM</NAME>
#define GTK_TYPE_GESTURE_ZOOM         (gtk_gesture_zoom_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_ZOOM</NAME>
#define GTK_GESTURE_ZOOM(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_GESTURE_ZOOM, GtkGestureZoom))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_ZOOM_CLASS</NAME>
#define GTK_GESTURE_ZOOM_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_GESTURE_ZOOM, GtkGestureZoomClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_ZOOM</NAME>
#define GTK_IS_GESTURE_ZOOM(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_GESTURE_ZOOM))
</MACRO>
<MACRO>
<NAME>GTK_IS_GESTURE_ZOOM_CLASS</NAME>
#define GTK_IS_GESTURE_ZOOM_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_GESTURE_ZOOM))
</MACRO>
<MACRO>
<NAME>GTK_GESTURE_ZOOM_GET_CLASS</NAME>
#define GTK_GESTURE_ZOOM_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_GESTURE_ZOOM, GtkGestureZoomClass))
</MACRO>
<FUNCTION>
<NAME>gtk_gesture_zoom_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_zoom_new</NAME>
<RETURNS>GtkGesture  * </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_gesture_zoom_get_scale_delta</NAME>
<RETURNS>gdouble       </RETURNS>
GtkGestureZoom *gesture
</FUNCTION>
<STRUCT>
<NAME>GtkGestureZoom</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkGestureZoomClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GL_AREA</NAME>
#define GTK_TYPE_GL_AREA                (gtk_gl_area_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GL_AREA</NAME>
#define GTK_GL_AREA(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_GL_AREA, GtkGLArea))
</MACRO>
<MACRO>
<NAME>GTK_IS_GL_AREA</NAME>
#define GTK_IS_GL_AREA(obj)             (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_GL_AREA))
</MACRO>
<MACRO>
<NAME>GTK_GL_AREA_CLASS</NAME>
#define GTK_GL_AREA_CLASS(klass)        (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_GL_AREA, GtkGLAreaClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GL_AREA_CLASS</NAME>
#define GTK_IS_GL_AREA_CLASS(klass)     (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_GL_AREA))
</MACRO>
<MACRO>
<NAME>GTK_GL_AREA_GET_CLASS</NAME>
#define GTK_GL_AREA_GET_CLASS(obj)      (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_GL_AREA, GtkGLAreaClass))
</MACRO>
<STRUCT>
<NAME>GtkGLArea</NAME>
struct _GtkGLArea
{
  /*< private >*/
  GtkWidget parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkGLAreaClass</NAME>
struct _GtkGLAreaClass
{
  /*< private >*/
  GtkWidgetClass parent_class;

  /*< public >*/
  gboolean       (* render)         (GtkGLArea        *area,
                                     GdkGLContext     *context);
  void           (* resize)         (GtkGLArea        *area,
                                     int               width,
                                     int               height);
  GdkGLContext * (* create_context) (GtkGLArea        *area);

  /*< private >*/
  gpointer _padding[6];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_gl_area_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_new</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_use_es</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gboolean      use_es
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_use_es</NAME>
<RETURNS>gboolean         </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_required_version</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gint          major, gint          minor
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_required_version</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gint         *major, gint         *minor
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_has_alpha</NAME>
<RETURNS>gboolean         </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_has_alpha</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gboolean      has_alpha
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_has_depth_buffer</NAME>
<RETURNS>gboolean         </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_has_depth_buffer</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gboolean      has_depth_buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_has_stencil_buffer</NAME>
<RETURNS>gboolean         </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_has_stencil_buffer</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gboolean      has_stencil_buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_auto_render</NAME>
<RETURNS>gboolean         </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_auto_render</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, gboolean      auto_render
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_queue_render</NAME>
<RETURNS>void            </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_context</NAME>
<RETURNS>GdkGLContext  *  </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_make_current</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_attach_buffers</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_set_error</NAME>
<RETURNS>void             </RETURNS>
GtkGLArea    *area, const GError *error
</FUNCTION>
<FUNCTION>
<NAME>gtk_gl_area_get_error</NAME>
<RETURNS>GError  *        </RETURNS>
GtkGLArea    *area
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_GRID</NAME>
#define GTK_TYPE_GRID                   (gtk_grid_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_GRID</NAME>
#define GTK_GRID(obj)                   (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_GRID, GtkGrid))
</MACRO>
<MACRO>
<NAME>GTK_GRID_CLASS</NAME>
#define GTK_GRID_CLASS(klass)           (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_GRID, GtkGridClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_GRID</NAME>
#define GTK_IS_GRID(obj)                (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_GRID))
</MACRO>
<MACRO>
<NAME>GTK_IS_GRID_CLASS</NAME>
#define GTK_IS_GRID_CLASS(klass)        (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_GRID))
</MACRO>
<MACRO>
<NAME>GTK_GRID_GET_CLASS</NAME>
#define GTK_GRID_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_GRID, GtkGridClass))
</MACRO>
<STRUCT>
<NAME>GtkGrid</NAME>
struct _GtkGrid
{
  /*< private >*/
  GtkContainer container;

  GtkGridPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkGridClass</NAME>
struct _GtkGridClass
{
  GtkContainerClass parent_class;

  /*< private >*/

  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_grid_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_attach</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, GtkWidget       *child, gint             left, gint             top, gint             width, gint             height
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_attach_next_to</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, GtkWidget       *child, GtkWidget       *sibling, GtkPositionType  side, gint             width, gint             height
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_child_at</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkGrid         *grid, gint             left, gint             top
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_insert_row</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gint             position
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_insert_column</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gint             position
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_remove_row</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gint             position
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_remove_column</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gint             position
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_insert_next_to</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, GtkWidget       *sibling, GtkPositionType  side
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_set_row_homogeneous</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gboolean         homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_row_homogeneous</NAME>
<RETURNS>gboolean    </RETURNS>
GtkGrid         *grid
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_set_row_spacing</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, guint            spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_row_spacing</NAME>
<RETURNS>guint       </RETURNS>
GtkGrid         *grid
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_set_column_homogeneous</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gboolean         homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_column_homogeneous</NAME>
<RETURNS>gboolean    </RETURNS>
GtkGrid         *grid
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_set_column_spacing</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, guint            spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_column_spacing</NAME>
<RETURNS>guint       </RETURNS>
GtkGrid         *grid
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_set_row_baseline_position</NAME>
<RETURNS>void        </RETURNS>
GtkGrid      *grid, gint          row, GtkBaselinePosition pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_row_baseline_position</NAME>
<RETURNS>GtkBaselinePosition  </RETURNS>
GtkGrid      *grid, gint          row
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_set_baseline_row</NAME>
<RETURNS>void        </RETURNS>
GtkGrid         *grid, gint             row
</FUNCTION>
<FUNCTION>
<NAME>gtk_grid_get_baseline_row</NAME>
<RETURNS>gint        </RETURNS>
GtkGrid         *grid
</FUNCTION>
<STRUCT>
<NAME>GtkGridPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_HEADER_BAR</NAME>
#define GTK_TYPE_HEADER_BAR            (gtk_header_bar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HEADER_BAR</NAME>
#define GTK_HEADER_BAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HEADER_BAR, GtkHeaderBar))
</MACRO>
<MACRO>
<NAME>GTK_HEADER_BAR_CLASS</NAME>
#define GTK_HEADER_BAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HEADER_BAR, GtkHeaderBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HEADER_BAR</NAME>
#define GTK_IS_HEADER_BAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HEADER_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_HEADER_BAR_CLASS</NAME>
#define GTK_IS_HEADER_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HEADER_BAR))
</MACRO>
<MACRO>
<NAME>GTK_HEADER_BAR_GET_CLASS</NAME>
#define GTK_HEADER_BAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HEADER_BAR, GtkHeaderBarClass))
</MACRO>
<STRUCT>
<NAME>GtkHeaderBar</NAME>
struct _GtkHeaderBar
{
  GtkContainer container;
};
</STRUCT>
<STRUCT>
<NAME>GtkHeaderBarClass</NAME>
struct _GtkHeaderBarClass
{
  GtkContainerClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_header_bar_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_new</NAME>
<RETURNS>GtkWidget    *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_set_title</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, const gchar  *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_get_title</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkHeaderBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_set_subtitle</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, const gchar  *subtitle
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_get_subtitle</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkHeaderBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_set_custom_title</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, GtkWidget    *title_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_get_custom_title</NAME>
<RETURNS>GtkWidget    *</RETURNS>
GtkHeaderBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_pack_start</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, GtkWidget    *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_pack_end</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, GtkWidget    *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_get_show_close_button</NAME>
<RETURNS>gboolean      </RETURNS>
GtkHeaderBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_set_show_close_button</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, gboolean      setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_set_has_subtitle</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, gboolean      setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_get_has_subtitle</NAME>
<RETURNS>gboolean      </RETURNS>
GtkHeaderBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_set_decoration_layout</NAME>
<RETURNS>void          </RETURNS>
GtkHeaderBar *bar, const gchar  *layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_header_bar_get_decoration_layout</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkHeaderBar *bar
</FUNCTION>
<STRUCT>
<NAME>GtkHeaderBarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ICON</NAME>
#define GTK_TYPE_ICON           (gtk_icon_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ICON</NAME>
#define GTK_ICON(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_ICON, GtkIcon))
</MACRO>
<MACRO>
<NAME>GTK_ICON_CLASS</NAME>
#define GTK_ICON_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_ICON, GtkIconClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON</NAME>
#define GTK_IS_ICON(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_ICON))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_CLASS</NAME>
#define GTK_IS_ICON_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_ICON))
</MACRO>
<MACRO>
<NAME>GTK_ICON_GET_CLASS</NAME>
#define GTK_ICON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ICON, GtkIconClass))
</MACRO>
<STRUCT>
<NAME>GtkIcon</NAME>
struct _GtkIcon
{
  GtkWidget parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkIconClass</NAME>
struct _GtkIconClass
{
  GtkWidgetClass  parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_icon_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_new</NAME>
<RETURNS>GtkWidget  *  </RETURNS>
const char *css_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_get_css_name</NAME>
<RETURNS>const char  * </RETURNS>
GtkIcon    *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_css_name</NAME>
<RETURNS>void          </RETURNS>
GtkIcon    *icon, const char *css_name
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_ICON_INFO</NAME>
#define GTK_TYPE_ICON_INFO              (gtk_icon_info_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ICON_INFO</NAME>
#define GTK_ICON_INFO(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ICON_INFO, GtkIconInfo))
</MACRO>
<MACRO>
<NAME>GTK_ICON_INFO_CLASS</NAME>
#define GTK_ICON_INFO_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ICON_INFO, GtkIconInfoClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_INFO</NAME>
#define GTK_IS_ICON_INFO(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ICON_INFO))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_INFO_CLASS</NAME>
#define GTK_IS_ICON_INFO_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ICON_INFO))
</MACRO>
<MACRO>
<NAME>GTK_ICON_INFO_GET_CLASS</NAME>
#define GTK_ICON_INFO_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ICON_INFO, GtkIconInfoClass))
</MACRO>
<MACRO>
<NAME>GTK_TYPE_ICON_THEME</NAME>
#define GTK_TYPE_ICON_THEME             (gtk_icon_theme_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ICON_THEME</NAME>
#define GTK_ICON_THEME(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ICON_THEME, GtkIconTheme))
</MACRO>
<MACRO>
<NAME>GTK_ICON_THEME_CLASS</NAME>
#define GTK_ICON_THEME_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ICON_THEME, GtkIconThemeClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_THEME</NAME>
#define GTK_IS_ICON_THEME(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ICON_THEME))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_THEME_CLASS</NAME>
#define GTK_IS_ICON_THEME_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ICON_THEME))
</MACRO>
<MACRO>
<NAME>GTK_ICON_THEME_GET_CLASS</NAME>
#define GTK_ICON_THEME_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ICON_THEME, GtkIconThemeClass))
</MACRO>
<STRUCT>
<NAME>GtkIconTheme</NAME>
struct _GtkIconTheme
{
  /*< private >*/
  GObject parent_instance;

  GtkIconThemePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkIconThemeClass</NAME>
struct _GtkIconThemeClass
{
  GObjectClass parent_class;

  /*< public >*/

  void (* changed)  (GtkIconTheme *icon_theme);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkIconLookupFlags</NAME>
typedef enum
{
  GTK_ICON_LOOKUP_NO_SVG           = 1 << 0,
  GTK_ICON_LOOKUP_FORCE_SVG        = 1 << 1,
  GTK_ICON_LOOKUP_USE_BUILTIN      = 1 << 2,
  GTK_ICON_LOOKUP_GENERIC_FALLBACK = 1 << 3,
  GTK_ICON_LOOKUP_FORCE_SIZE       = 1 << 4,
  GTK_ICON_LOOKUP_FORCE_REGULAR    = 1 << 5,
  GTK_ICON_LOOKUP_FORCE_SYMBOLIC   = 1 << 6,
  GTK_ICON_LOOKUP_DIR_LTR          = 1 << 7,
  GTK_ICON_LOOKUP_DIR_RTL          = 1 << 8
} GtkIconLookupFlags;
</ENUM>
<MACRO>
<NAME>GTK_ICON_THEME_ERROR</NAME>
#define GTK_ICON_THEME_ERROR gtk_icon_theme_error_quark ()
</MACRO>
<ENUM>
<NAME>GtkIconThemeError</NAME>
typedef enum {
  GTK_ICON_THEME_NOT_FOUND,
  GTK_ICON_THEME_FAILED
} GtkIconThemeError;
</ENUM>
<FUNCTION>
<NAME>gtk_icon_theme_error_quark</NAME>
<RETURNS>GQuark  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_new</NAME>
<RETURNS>GtkIconTheme  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_get_default</NAME>
<RETURNS>GtkIconTheme  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_get_for_screen</NAME>
<RETURNS>GtkIconTheme  *</RETURNS>
GdkScreen                   *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_set_screen</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, GdkScreen                   *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_set_search_path</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *path[], gint                         n_elements
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_get_search_path</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, gchar                      **path[], gint                        *n_elements
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_append_search_path</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_prepend_search_path</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_add_resource_path</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_set_custom_theme</NAME>
<RETURNS>void           </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *theme_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_has_icon</NAME>
<RETURNS>gboolean       </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_get_icon_sizes</NAME>
<RETURNS>gint          *</RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_lookup_icon</NAME>
<RETURNS>GtkIconInfo  * </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_name, gint                         size, GtkIconLookupFlags           flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_lookup_icon_for_scale</NAME>
<RETURNS>GtkIconInfo  * </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_name, gint                         size, gint                         scale, GtkIconLookupFlags           flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_choose_icon</NAME>
<RETURNS>GtkIconInfo  * </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_names[], gint                         size, GtkIconLookupFlags           flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_choose_icon_for_scale</NAME>
<RETURNS>GtkIconInfo  * </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_names[], gint                         size, gint                         scale, GtkIconLookupFlags           flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_load_icon</NAME>
<RETURNS>GdkPixbuf  *   </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_name, gint                         size, GtkIconLookupFlags           flags, GError                     **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_load_icon_for_scale</NAME>
<RETURNS>GdkPixbuf  *   </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *icon_name, gint                         size, gint                         scale, GtkIconLookupFlags           flags, GError                     **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_load_surface</NAME>
<RETURNS>cairo_surface_t  * </RETURNS>
GtkIconTheme        *icon_theme, const gchar         *icon_name, gint                 size, gint                 scale, GdkWindow           *for_window, GtkIconLookupFlags   flags, GError             **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_lookup_by_gicon</NAME>
<RETURNS>GtkIconInfo  * </RETURNS>
GtkIconTheme                *icon_theme, GIcon                       *icon, gint                         size, GtkIconLookupFlags           flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_lookup_by_gicon_for_scale</NAME>
<RETURNS>GtkIconInfo  * </RETURNS>
GtkIconTheme             *icon_theme, GIcon                    *icon, gint                      size, gint                      scale, GtkIconLookupFlags        flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_list_icons</NAME>
<RETURNS>GList  *       </RETURNS>
GtkIconTheme                *icon_theme, const gchar                 *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_list_contexts</NAME>
<RETURNS>GList  *       </RETURNS>
GtkIconTheme                *icon_theme
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_get_example_icon_name</NAME>
<RETURNS>char  *        </RETURNS>
GtkIconTheme                *icon_theme
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_rescan_if_needed</NAME>
<RETURNS>gboolean       </RETURNS>
GtkIconTheme                *icon_theme
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_add_builtin_icon</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
const gchar *icon_name, gint         size, GdkPixbuf   *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_copy</NAME>
<DEPRECATED/>
<RETURNS>GtkIconInfo  *         </RETURNS>
GtkIconInfo  *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_free</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkIconInfo  *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_new_for_pixbuf</NAME>
<RETURNS>GtkIconInfo  *         </RETURNS>
GtkIconTheme  *icon_theme, GdkPixbuf     *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_base_size</NAME>
<RETURNS>gint                   </RETURNS>
GtkIconInfo   *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_base_scale</NAME>
<RETURNS>gint                   </RETURNS>
GtkIconInfo   *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_filename</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkIconInfo   *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_builtin_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo   *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_is_symbolic</NAME>
<RETURNS>gboolean               </RETURNS>
GtkIconInfo   *icon_info
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_icon</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo   *icon_info, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_surface</NAME>
<RETURNS>cairo_surface_t  *     </RETURNS>
GtkIconInfo   *icon_info, GdkWindow     *for_window, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_icon_async</NAME>
<RETURNS>void                   </RETURNS>
GtkIconInfo          *icon_info, GCancellable         *cancellable, GAsyncReadyCallback   callback, gpointer              user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_icon_finish</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo          *icon_info, GAsyncResult         *res, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo   *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, gboolean      *was_symbolic, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic_async</NAME>
<RETURNS>void                   </RETURNS>
GtkIconInfo   *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, GCancellable         *cancellable, GAsyncReadyCallback   callback, gpointer              user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic_finish</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo   *icon_info, GAsyncResult         *res, gboolean      *was_symbolic, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic_for_context</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo      *icon_info, GtkStyleContext  *context, gboolean         *was_symbolic, GError          **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic_for_context_async</NAME>
<RETURNS>void                   </RETURNS>
GtkIconInfo      *icon_info, GtkStyleContext  *context, GCancellable     *cancellable, GAsyncReadyCallback callback, gpointer          user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic_for_context_finish</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo      *icon_info, GAsyncResult     *res, gboolean         *was_symbolic, GError          **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_load_symbolic_for_style</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkIconInfo   *icon_info, GtkStyle      *style, GtkStateType   state, gboolean      *was_symbolic, GError       **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_set_raw_coordinates</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkIconInfo  *icon_info, gboolean      raw_coordinates
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_embedded_rect</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkIconInfo    *icon_info, GdkRectangle   *rectangle
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_attach_points</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkIconInfo    *icon_info, GdkPoint      **points, gint           *n_points
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_get_display_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkIconInfo    *icon_info
</FUNCTION>
<STRUCT>
<NAME>GtkIconInfo</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkIconInfoClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkIconThemePrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_icon_theme_lookup_symbolic_colors</NAME>
<RETURNS>void         </RETURNS>
GtkCssStyle    *style, GdkRGBA        *color_out, GdkRGBA        *success_out, GdkRGBA        *warning_out, GdkRGBA        *error_out
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_info_new_for_file</NAME>
<RETURNS>GtkIconInfo  *</RETURNS>
GFile *file, gint   size, gint   scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_theme_color_symbolic_pixbuf</NAME>
<RETURNS>GdkPixbuf  * </RETURNS>
GdkPixbuf     *symbolic, const GdkRGBA *fg_color, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_ICON_VIEW</NAME>
#define GTK_TYPE_ICON_VIEW            (gtk_icon_view_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ICON_VIEW</NAME>
#define GTK_ICON_VIEW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ICON_VIEW, GtkIconView))
</MACRO>
<MACRO>
<NAME>GTK_ICON_VIEW_CLASS</NAME>
#define GTK_ICON_VIEW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ICON_VIEW, GtkIconViewClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_VIEW</NAME>
#define GTK_IS_ICON_VIEW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ICON_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_VIEW_CLASS</NAME>
#define GTK_IS_ICON_VIEW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ICON_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_ICON_VIEW_GET_CLASS</NAME>
#define GTK_ICON_VIEW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ICON_VIEW, GtkIconViewClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkIconViewForeachFunc</NAME>
<RETURNS>void </RETURNS>
GtkIconView      *icon_view,
					     GtkTreePath      *path,
					     gpointer          data
</USER_FUNCTION>
<ENUM>
<NAME>GtkIconViewDropPosition</NAME>
typedef enum
{
  GTK_ICON_VIEW_NO_DROP,
  GTK_ICON_VIEW_DROP_INTO,
  GTK_ICON_VIEW_DROP_LEFT,
  GTK_ICON_VIEW_DROP_RIGHT,
  GTK_ICON_VIEW_DROP_ABOVE,
  GTK_ICON_VIEW_DROP_BELOW
} GtkIconViewDropPosition;
</ENUM>
<STRUCT>
<NAME>GtkIconView</NAME>
struct _GtkIconView
{
  GtkContainer parent;

  /*< private >*/
  GtkIconViewPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkIconViewClass</NAME>
struct _GtkIconViewClass
{
  GtkContainerClass parent_class;

  void    (* item_activated)         (GtkIconView      *icon_view,
				      GtkTreePath      *path);
  void    (* selection_changed)      (GtkIconView      *icon_view);

  /* Key binding signals */
  void    (* select_all)             (GtkIconView      *icon_view);
  void    (* unselect_all)           (GtkIconView      *icon_view);
  void    (* select_cursor_item)     (GtkIconView      *icon_view);
  void    (* toggle_cursor_item)     (GtkIconView      *icon_view);
  gboolean (* move_cursor)           (GtkIconView      *icon_view,
				      GtkMovementStep   step,
				      gint              count);
  gboolean (* activate_cursor_item)  (GtkIconView      *icon_view);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_icon_view_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_new</NAME>
<RETURNS>GtkWidget  *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_new_with_area</NAME>
<RETURNS>GtkWidget  *    </RETURNS>
GtkCellArea    *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_new_with_model</NAME>
<RETURNS>GtkWidget  *    </RETURNS>
GtkTreeModel   *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_model</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, GtkTreeModel   *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_model</NAME>
<RETURNS>GtkTreeModel  * </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_text_column</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            column
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_text_column</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_markup_column</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            column
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_markup_column</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_pixbuf_column</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            column
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_pixbuf_column</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_item_orientation</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, GtkOrientation  orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_item_orientation</NAME>
<RETURNS>GtkOrientation  </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_columns</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            columns
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_columns</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_item_width</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            item_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_item_width</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_spacing</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_spacing</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_row_spacing</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            row_spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_row_spacing</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_column_spacing</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            column_spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_column_spacing</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_margin</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_margin</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_item_padding</NAME>
<RETURNS>void            </RETURNS>
GtkIconView    *icon_view, gint            item_padding
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_item_padding</NAME>
<RETURNS>gint            </RETURNS>
GtkIconView    *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_path_at_pos</NAME>
<RETURNS>GtkTreePath  *  </RETURNS>
GtkIconView     *icon_view, gint             x, gint             y
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_item_at_pos</NAME>
<RETURNS>gboolean        </RETURNS>
GtkIconView     *icon_view, gint              x, gint              y, GtkTreePath     **path, GtkCellRenderer **cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_visible_range</NAME>
<RETURNS>gboolean        </RETURNS>
GtkIconView      *icon_view, GtkTreePath     **start_path, GtkTreePath     **end_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_activate_on_single_click</NAME>
<RETURNS>void            </RETURNS>
GtkIconView  *icon_view, gboolean      single
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_activate_on_single_click</NAME>
<RETURNS>gboolean        </RETURNS>
GtkIconView  *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_selected_foreach</NAME>
<RETURNS>void            </RETURNS>
GtkIconView            *icon_view, GtkIconViewForeachFunc  func, gpointer                data
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_selection_mode</NAME>
<RETURNS>void            </RETURNS>
GtkIconView            *icon_view, GtkSelectionMode        mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_selection_mode</NAME>
<RETURNS>GtkSelectionMode  </RETURNS>
GtkIconView            *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_select_path</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_unselect_path</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_path_is_selected</NAME>
<RETURNS>gboolean          </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_item_row</NAME>
<RETURNS>gint              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_item_column</NAME>
<RETURNS>gint              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_selected_items</NAME>
<RETURNS>GList            *</RETURNS>
GtkIconView            *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_select_all</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_unselect_all</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_item_activated</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_cursor</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path, GtkCellRenderer        *cell, gboolean                start_editing
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_cursor</NAME>
<RETURNS>gboolean          </RETURNS>
GtkIconView            *icon_view, GtkTreePath           **path, GtkCellRenderer       **cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_scroll_to_path</NAME>
<RETURNS>void              </RETURNS>
GtkIconView            *icon_view, GtkTreePath            *path, gboolean                use_align, gfloat                  row_align, gfloat                  col_align
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_enable_model_drag_source</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view, GdkModifierType           start_button_mask, const GtkTargetEntry     *targets, gint                      n_targets, GdkDragAction             actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_enable_model_drag_dest</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view, const GtkTargetEntry     *targets, gint                      n_targets, GdkDragAction             actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_unset_model_drag_source</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_unset_model_drag_dest</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_reorderable</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view, gboolean                  reorderable
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_reorderable</NAME>
<RETURNS>gboolean                </RETURNS>
GtkIconView              *icon_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_drag_dest_item</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view, GtkTreePath              *path, GtkIconViewDropPosition   pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_drag_dest_item</NAME>
<RETURNS>void                    </RETURNS>
GtkIconView              *icon_view, GtkTreePath             **path, GtkIconViewDropPosition  *pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_dest_item_at_pos</NAME>
<RETURNS>gboolean                </RETURNS>
GtkIconView              *icon_view, gint                      drag_x, gint                      drag_y, GtkTreePath             **path, GtkIconViewDropPosition  *pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_create_drag_icon</NAME>
<RETURNS>cairo_surface_t        *</RETURNS>
GtkIconView              *icon_view, GtkTreePath              *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_convert_widget_to_bin_window_coords</NAME>
<RETURNS>void     </RETURNS>
GtkIconView *icon_view, gint         wx, gint         wy, gint        *bx, gint        *by
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_cell_rect</NAME>
<RETURNS>gboolean  </RETURNS>
GtkIconView     *icon_view, GtkTreePath     *path, GtkCellRenderer *cell, GdkRectangle    *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_tooltip_item</NAME>
<RETURNS>void     </RETURNS>
GtkIconView     *icon_view, GtkTooltip      *tooltip, GtkTreePath     *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_tooltip_cell</NAME>
<RETURNS>void     </RETURNS>
GtkIconView     *icon_view, GtkTooltip      *tooltip, GtkTreePath     *path, GtkCellRenderer *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_tooltip_context</NAME>
<RETURNS>gboolean  </RETURNS>
GtkIconView       *icon_view, gint              *x, gint              *y, gboolean           keyboard_tip, GtkTreeModel     **model, GtkTreePath      **path, GtkTreeIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_set_tooltip_column</NAME>
<RETURNS>void      </RETURNS>
GtkIconView       *icon_view, gint               column
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_view_get_tooltip_column</NAME>
<RETURNS>gint      </RETURNS>
GtkIconView       *icon_view
</FUNCTION>
<STRUCT>
<NAME>GtkIconViewPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_IMAGE</NAME>
#define GTK_TYPE_IMAGE                  (gtk_image_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_IMAGE</NAME>
#define GTK_IMAGE(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IMAGE, GtkImage))
</MACRO>
<MACRO>
<NAME>GTK_IMAGE_CLASS</NAME>
#define GTK_IMAGE_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IMAGE, GtkImageClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_IMAGE</NAME>
#define GTK_IS_IMAGE(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IMAGE))
</MACRO>
<MACRO>
<NAME>GTK_IS_IMAGE_CLASS</NAME>
#define GTK_IS_IMAGE_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IMAGE))
</MACRO>
<MACRO>
<NAME>GTK_IMAGE_GET_CLASS</NAME>
#define GTK_IMAGE_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IMAGE, GtkImageClass))
</MACRO>
<ENUM>
<NAME>GtkImageType</NAME>
typedef enum
{
  GTK_IMAGE_EMPTY,
  GTK_IMAGE_PIXBUF,
  GTK_IMAGE_STOCK,
  GTK_IMAGE_ICON_SET,
  GTK_IMAGE_ANIMATION,
  GTK_IMAGE_ICON_NAME,
  GTK_IMAGE_GICON,
  GTK_IMAGE_SURFACE
} GtkImageType;
</ENUM>
<STRUCT>
<NAME>GtkImage</NAME>
struct _GtkImage
{
  GtkMisc misc;

  /*< private >*/
  GtkImagePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkImageClass</NAME>
struct _GtkImageClass
{
  GtkMiscClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_image_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_file</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_resource</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *resource_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_pixbuf</NAME>
<RETURNS>GtkWidget * </RETURNS>
GdkPixbuf       *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *stock_id, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_icon_set</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkIconSet      *icon_set, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_animation</NAME>
<RETURNS>GtkWidget * </RETURNS>
GdkPixbufAnimation *animation
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_icon_name</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *icon_name, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_gicon</NAME>
<RETURNS>GtkWidget * </RETURNS>
GIcon           *icon, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_new_from_surface</NAME>
<RETURNS>GtkWidget * </RETURNS>
cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_clear</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_file</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, const gchar     *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_resource</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, const gchar     *resource_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_pixbuf</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, GdkPixbuf       *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_stock</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkImage        *image, const gchar     *stock_id, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_icon_set</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkImage        *image, GtkIconSet      *icon_set, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_animation</NAME>
<RETURNS>void  </RETURNS>
GtkImage           *image, GdkPixbufAnimation *animation
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_icon_name</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, const gchar     *icon_name, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_gicon</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, GIcon           *icon, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_from_surface</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, cairo_surface_t *surface
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_set_pixel_size</NAME>
<RETURNS>void  </RETURNS>
GtkImage        *image, gint             pixel_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_storage_type</NAME>
<RETURNS>GtkImageType  </RETURNS>
GtkImage   *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_pixbuf</NAME>
<RETURNS>GdkPixbuf * </RETURNS>
GtkImage         *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_stock</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkImage         *image, gchar           **stock_id, GtkIconSize      *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_icon_set</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkImage         *image, GtkIconSet      **icon_set, GtkIconSize      *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_animation</NAME>
<RETURNS>GdkPixbufAnimation * </RETURNS>
GtkImage *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_icon_name</NAME>
<RETURNS>void        </RETURNS>
GtkImage     *image, const gchar **icon_name, GtkIconSize  *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_gicon</NAME>
<RETURNS>void        </RETURNS>
GtkImage              *image, GIcon                **gicon, GtkIconSize           *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_get_pixel_size</NAME>
<RETURNS>gint        </RETURNS>
GtkImage             *image
</FUNCTION>
<STRUCT>
<NAME>GtkImagePrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_image_definition_new_empty</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_pixbuf</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
GdkPixbuf                      *pixbuf, int                             scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_stock</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
const char                     *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_icon_set</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
GtkIconSet                     *icon_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_animation</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
GdkPixbufAnimation             *animation, int                             scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_icon_name</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
const char                     *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_gicon</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
GIcon                          *gicon
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_new_surface</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
cairo_surface_t                *surface
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_ref</NAME>
<RETURNS>GtkImageDefinition  *    </RETURNS>
GtkImageDefinition             *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_unref</NAME>
<RETURNS>void                     </RETURNS>
GtkImageDefinition             *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_storage_type</NAME>
<RETURNS>GtkImageType             </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_scale</NAME>
<RETURNS>gint                     </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_pixbuf</NAME>
<RETURNS>GdkPixbuf  *             </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_stock</NAME>
<RETURNS>const gchar  *           </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_icon_set</NAME>
<RETURNS>GtkIconSet  *            </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_animation</NAME>
<RETURNS>GdkPixbufAnimation  *    </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_icon_name</NAME>
<RETURNS>const gchar  *           </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_gicon</NAME>
<RETURNS>GIcon  *                 </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_definition_get_surface</NAME>
<RETURNS>cairo_surface_t  *       </RETURNS>
const GtkImageDefinition       *def
</FUNCTION>
<UNION>
<NAME>GtkImageDefinition</NAME>
</UNION>
<MACRO>
<NAME>GTK_TYPE_IM_CONTEXT</NAME>
#define GTK_TYPE_IM_CONTEXT              (gtk_im_context_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_IM_CONTEXT</NAME>
#define GTK_IM_CONTEXT(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT, GtkIMContext))
</MACRO>
<MACRO>
<NAME>GTK_IM_CONTEXT_CLASS</NAME>
#define GTK_IM_CONTEXT_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT, GtkIMContextClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_IM_CONTEXT</NAME>
#define GTK_IS_IM_CONTEXT(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_IS_IM_CONTEXT_CLASS</NAME>
#define GTK_IS_IM_CONTEXT_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_IM_CONTEXT_GET_CLASS</NAME>
#define GTK_IM_CONTEXT_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT, GtkIMContextClass))
</MACRO>
<STRUCT>
<NAME>GtkIMContext</NAME>
struct _GtkIMContext
{
  GObject parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkIMContextClass</NAME>
struct _GtkIMContextClass
{
  /*< private >*/
  GObjectClass parent_class;

  /*< public >*/
  /* Signals */
  void     (*preedit_start)        (GtkIMContext *context);
  void     (*preedit_end)          (GtkIMContext *context);
  void     (*preedit_changed)      (GtkIMContext *context);
  void     (*commit)               (GtkIMContext *context, const gchar *str);
  gboolean (*retrieve_surrounding) (GtkIMContext *context);
  gboolean (*delete_surrounding)   (GtkIMContext *context,
				    gint          offset,
				    gint          n_chars);

  /* Virtual functions */
  void     (*set_client_window)   (GtkIMContext   *context,
				   GdkWindow      *window);
  void     (*get_preedit_string)  (GtkIMContext   *context,
				   gchar         **str,
				   PangoAttrList **attrs,
				   gint           *cursor_pos);
  gboolean (*filter_keypress)     (GtkIMContext   *context,
			           GdkEventKey    *event);
  void     (*focus_in)            (GtkIMContext   *context);
  void     (*focus_out)           (GtkIMContext   *context);
  void     (*reset)               (GtkIMContext   *context);
  void     (*set_cursor_location) (GtkIMContext   *context,
				   GdkRectangle   *area);
  void     (*set_use_preedit)     (GtkIMContext   *context,
				   gboolean        use_preedit);
  void     (*set_surrounding)     (GtkIMContext   *context,
				   const gchar    *text,
				   gint            len,
				   gint            cursor_index);
  gboolean (*get_surrounding)     (GtkIMContext   *context,
				   gchar         **text,
				   gint           *cursor_index);
  /*< private >*/
  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_im_context_get_type</NAME>
<RETURNS>GType     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_set_client_window</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context, GdkWindow          *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_get_preedit_string</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context, gchar             **str, PangoAttrList     **attrs, gint               *cursor_pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_filter_keypress</NAME>
<RETURNS>gboolean  </RETURNS>
GtkIMContext       *context, GdkEventKey        *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_focus_in</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_focus_out</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_reset</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_set_cursor_location</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context, const GdkRectangle *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_set_use_preedit</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context, gboolean            use_preedit
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_set_surrounding</NAME>
<RETURNS>void      </RETURNS>
GtkIMContext       *context, const gchar        *text, gint                len, gint                cursor_index
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_get_surrounding</NAME>
<RETURNS>gboolean  </RETURNS>
GtkIMContext       *context, gchar             **text, gint               *cursor_index
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_delete_surrounding</NAME>
<RETURNS>gboolean  </RETURNS>
GtkIMContext       *context, gint                offset, gint                n_chars
</FUNCTION>
<STRUCT>
<NAME>GtkIMContextInfo</NAME>
struct _GtkIMContextInfo
{
  const gchar *context_id;
  const gchar *context_name;
  const gchar *domain;
  const gchar *domain_dirname;
  const gchar *default_locales;
};
</STRUCT>
<MACRO>
<NAME>GTK_MAX_COMPOSE_LEN</NAME>
#define GTK_MAX_COMPOSE_LEN 7
</MACRO>
<MACRO>
<NAME>GTK_TYPE_IM_CONTEXT_SIMPLE</NAME>
#define GTK_TYPE_IM_CONTEXT_SIMPLE              (gtk_im_context_simple_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_IM_CONTEXT_SIMPLE</NAME>
#define GTK_IM_CONTEXT_SIMPLE(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimple))
</MACRO>
<MACRO>
<NAME>GTK_IM_CONTEXT_SIMPLE_CLASS</NAME>
#define GTK_IM_CONTEXT_SIMPLE_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimpleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_IM_CONTEXT_SIMPLE</NAME>
#define GTK_IS_IM_CONTEXT_SIMPLE(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT_SIMPLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_IM_CONTEXT_SIMPLE_CLASS</NAME>
#define GTK_IS_IM_CONTEXT_SIMPLE_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_SIMPLE))
</MACRO>
<MACRO>
<NAME>GTK_IM_CONTEXT_SIMPLE_GET_CLASS</NAME>
#define GTK_IM_CONTEXT_SIMPLE_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_SIMPLE, GtkIMContextSimpleClass))
</MACRO>
<STRUCT>
<NAME>GtkIMContextSimple</NAME>
struct _GtkIMContextSimple
{
  GtkIMContext object;

  /*< private >*/
  GtkIMContextSimplePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkIMContextSimpleClass</NAME>
struct _GtkIMContextSimpleClass
{
  GtkIMContextClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_im_context_simple_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_simple_new</NAME>
<RETURNS>GtkIMContext  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_simple_add_table</NAME>
<RETURNS>void           </RETURNS>
GtkIMContextSimple *context_simple, guint16            *data, gint                max_seq_len, gint                n_seqs
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_context_simple_add_compose_file</NAME>
<RETURNS>void           </RETURNS>
GtkIMContextSimple *context_simple, const gchar        *compose_file
</FUNCTION>
<STRUCT>
<NAME>GtkIMContextSimplePrivate</NAME>
</STRUCT>
<VARIABLE>
<NAME>gtk_compose_table_compact</NAME>
extern const GtkComposeTableCompact gtk_compose_table_compact;
</VARIABLE>
<FUNCTION>
<NAME>gtk_check_algorithmically</NAME>
<RETURNS>gboolean  </RETURNS>
const guint16                *compose_buffer, gint                          n_compose, gunichar                     *output
</FUNCTION>
<FUNCTION>
<NAME>gtk_check_compact_table</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkComposeTableCompact *table, guint16                      *compose_buffer, gint                          n_compose, gboolean                     *compose_finish, gboolean                     *compose_match, gunichar                     *output_char
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_IM_MULTICONTEXT</NAME>
#define GTK_TYPE_IM_MULTICONTEXT              (gtk_im_multicontext_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_IM_MULTICONTEXT</NAME>
#define GTK_IM_MULTICONTEXT(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontext))
</MACRO>
<MACRO>
<NAME>GTK_IM_MULTICONTEXT_CLASS</NAME>
#define GTK_IM_MULTICONTEXT_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontextClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_IM_MULTICONTEXT</NAME>
#define GTK_IS_IM_MULTICONTEXT(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_MULTICONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_IS_IM_MULTICONTEXT_CLASS</NAME>
#define GTK_IS_IM_MULTICONTEXT_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_MULTICONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_IM_MULTICONTEXT_GET_CLASS</NAME>
#define GTK_IM_MULTICONTEXT_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_MULTICONTEXT, GtkIMMulticontextClass))
</MACRO>
<STRUCT>
<NAME>GtkIMMulticontext</NAME>
struct _GtkIMMulticontext
{
  GtkIMContext object;

  /*< private >*/
  GtkIMMulticontextPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkIMMulticontextClass</NAME>
struct _GtkIMMulticontextClass
{
  GtkIMContextClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_im_multicontext_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_multicontext_new</NAME>
<RETURNS>GtkIMContext  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_multicontext_append_menuitems</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkIMMulticontext *context, GtkMenuShell      *menushell
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_multicontext_get_context_id</NAME>
<RETURNS>const char   * </RETURNS>
GtkIMMulticontext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_im_multicontext_set_context_id</NAME>
<RETURNS>void           </RETURNS>
GtkIMMulticontext *context, const char        *context_id
</FUNCTION>
<STRUCT>
<NAME>GtkIMMulticontextPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_INFO_BAR</NAME>
#define GTK_TYPE_INFO_BAR              (gtk_info_bar_get_type())
</MACRO>
<MACRO>
<NAME>GTK_INFO_BAR</NAME>
#define GTK_INFO_BAR(obj)              (G_TYPE_CHECK_INSTANCE_CAST((obj), GTK_TYPE_INFO_BAR, GtkInfoBar))
</MACRO>
<MACRO>
<NAME>GTK_INFO_BAR_CLASS</NAME>
#define GTK_INFO_BAR_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST((klass), GTK_TYPE_INFO_BAR, GtkInfoBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_INFO_BAR</NAME>
#define GTK_IS_INFO_BAR(obj)           (G_TYPE_CHECK_INSTANCE_TYPE((obj), GTK_TYPE_INFO_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_INFO_BAR_CLASS</NAME>
#define GTK_IS_INFO_BAR_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_INFO_BAR))
</MACRO>
<MACRO>
<NAME>GTK_INFO_BAR_GET_CLASS</NAME>
#define GTK_INFO_BAR_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_INFO_BAR, GtkInfoBarClass))
</MACRO>
<STRUCT>
<NAME>GtkInfoBar</NAME>
struct _GtkInfoBar
{
  GtkBox parent;

  /*< private > */
  GtkInfoBarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkInfoBarClass</NAME>
struct _GtkInfoBarClass
{
  GtkBoxClass parent_class;

  /* Signals */
  void (* response) (GtkInfoBar *info_bar, gint response_id);

  /* Keybinding signals */
  void (* close)    (GtkInfoBar *info_bar);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_info_bar_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_new</NAME>
<RETURNS>GtkWidget      *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_new_with_buttons</NAME>
<RETURNS>GtkWidget      *</RETURNS>
const gchar    *first_button_text, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_get_action_area</NAME>
<RETURNS>GtkWidget      *</RETURNS>
GtkInfoBar     *info_bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_get_content_area</NAME>
<RETURNS>GtkWidget      *</RETURNS>
GtkInfoBar     *info_bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_add_action_widget</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, GtkWidget      *child, gint            response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_add_button</NAME>
<RETURNS>GtkWidget      *</RETURNS>
GtkInfoBar     *info_bar, const gchar    *button_text, gint            response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_add_buttons</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, const gchar    *first_button_text, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_set_response_sensitive</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, gint            response_id, gboolean        setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_set_default_response</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, gint            response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_response</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, gint            response_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_set_message_type</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, GtkMessageType  message_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_get_message_type</NAME>
<RETURNS>GtkMessageType  </RETURNS>
GtkInfoBar     *info_bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_set_show_close_button</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, gboolean        setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_get_show_close_button</NAME>
<RETURNS>gboolean        </RETURNS>
GtkInfoBar     *info_bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_set_revealed</NAME>
<RETURNS>void            </RETURNS>
GtkInfoBar     *info_bar, gboolean        revealed
</FUNCTION>
<FUNCTION>
<NAME>gtk_info_bar_get_revealed</NAME>
<RETURNS>gboolean        </RETURNS>
GtkInfoBar     *info_bar
</FUNCTION>
<STRUCT>
<NAME>GtkInfoBarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_INVISIBLE</NAME>
#define GTK_TYPE_INVISIBLE		(gtk_invisible_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_INVISIBLE</NAME>
#define GTK_INVISIBLE(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_INVISIBLE, GtkInvisible))
</MACRO>
<MACRO>
<NAME>GTK_INVISIBLE_CLASS</NAME>
#define GTK_INVISIBLE_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_INVISIBLE, GtkInvisibleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_INVISIBLE</NAME>
#define GTK_IS_INVISIBLE(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_INVISIBLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_INVISIBLE_CLASS</NAME>
#define GTK_IS_INVISIBLE_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_INVISIBLE))
</MACRO>
<MACRO>
<NAME>GTK_INVISIBLE_GET_CLASS</NAME>
#define GTK_INVISIBLE_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_INVISIBLE, GtkInvisibleClass))
</MACRO>
<STRUCT>
<NAME>GtkInvisible</NAME>
struct _GtkInvisible
{
  GtkWidget widget;

  /*< private >*/
  GtkInvisiblePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkInvisibleClass</NAME>
struct _GtkInvisibleClass
{
  GtkWidgetClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_invisible_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_invisible_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_invisible_new_for_screen</NAME>
<RETURNS>GtkWidget * </RETURNS>
GdkScreen    *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_invisible_set_screen</NAME>
<RETURNS>void 	   </RETURNS>
GtkInvisible *invisible, GdkScreen    *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_invisible_get_screen</NAME>
<RETURNS>GdkScreen * </RETURNS>
GtkInvisible *invisible
</FUNCTION>
<STRUCT>
<NAME>GtkInvisiblePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LABEL</NAME>
#define GTK_TYPE_LABEL		  (gtk_label_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LABEL</NAME>
#define GTK_LABEL(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LABEL, GtkLabel))
</MACRO>
<MACRO>
<NAME>GTK_LABEL_CLASS</NAME>
#define GTK_LABEL_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LABEL, GtkLabelClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LABEL</NAME>
#define GTK_IS_LABEL(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LABEL))
</MACRO>
<MACRO>
<NAME>GTK_IS_LABEL_CLASS</NAME>
#define GTK_IS_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LABEL))
</MACRO>
<MACRO>
<NAME>GTK_LABEL_GET_CLASS</NAME>
#define GTK_LABEL_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LABEL, GtkLabelClass))
</MACRO>
<STRUCT>
<NAME>GtkLabel</NAME>
struct _GtkLabel
{
  GtkMisc misc;

  /*< private >*/
  GtkLabelPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkLabelClass</NAME>
struct _GtkLabelClass
{
  GtkMiscClass parent_class;

  void (* move_cursor)     (GtkLabel       *label,
			    GtkMovementStep step,
			    gint            count,
			    gboolean        extend_selection);
  void (* copy_clipboard)  (GtkLabel       *label);

  /* Hook to customize right-click popup for selectable labels */
  void (* populate_popup)   (GtkLabel       *label,
                             GtkMenu        *menu);

  gboolean (*activate_link) (GtkLabel       *label,
                             const gchar    *uri);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_label_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_new</NAME>
<RETURNS>GtkWidget *            </RETURNS>
const gchar   *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_new_with_mnemonic</NAME>
<RETURNS>GtkWidget *            </RETURNS>
const gchar   *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_text</NAME>
<RETURNS>void                   </RETURNS>
GtkLabel      *label, const gchar   *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_text</NAME>
<RETURNS>const gchar *          </RETURNS>
GtkLabel      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_attributes</NAME>
<RETURNS>void                   </RETURNS>
GtkLabel      *label, PangoAttrList *attrs
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_attributes</NAME>
<RETURNS>PangoAttrList         *</RETURNS>
GtkLabel      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_label</NAME>
<RETURNS>void                   </RETURNS>
GtkLabel      *label, const gchar   *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_label</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkLabel      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_markup</NAME>
<RETURNS>void                   </RETURNS>
GtkLabel      *label, const gchar   *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_use_markup</NAME>
<RETURNS>void                   </RETURNS>
GtkLabel      *label, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_use_markup</NAME>
<RETURNS>gboolean               </RETURNS>
GtkLabel      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_use_underline</NAME>
<RETURNS>void                   </RETURNS>
GtkLabel      *label, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_use_underline</NAME>
<RETURNS>gboolean               </RETURNS>
GtkLabel      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_markup_with_mnemonic</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, const gchar      *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_mnemonic_keyval</NAME>
<RETURNS>guint     </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_mnemonic_widget</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, GtkWidget        *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_mnemonic_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_text_with_mnemonic</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, const gchar      *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_justify</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, GtkJustification  jtype
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_justify</NAME>
<RETURNS>GtkJustification  </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_ellipsize</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, PangoEllipsizeMode mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_ellipsize</NAME>
<RETURNS>PangoEllipsizeMode  </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_width_chars</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gint              n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_width_chars</NAME>
<RETURNS>gint      </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_max_width_chars</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gint              n_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_max_width_chars</NAME>
<RETURNS>gint      </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_lines</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gint              lines
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_lines</NAME>
<RETURNS>gint      </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_pattern</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, const gchar      *pattern
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_line_wrap</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gboolean          wrap
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_line_wrap</NAME>
<RETURNS>gboolean  </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_line_wrap_mode</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, PangoWrapMode     wrap_mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_line_wrap_mode</NAME>
<RETURNS>PangoWrapMode  </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_selectable</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gboolean          setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_selectable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_angle</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gdouble           angle
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_angle</NAME>
<RETURNS>gdouble   </RETURNS>
GtkLabel         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_select_region</NAME>
<RETURNS>void      </RETURNS>
GtkLabel         *label, gint              start_offset, gint              end_offset
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_selection_bounds</NAME>
<RETURNS>gboolean  </RETURNS>
GtkLabel         *label, gint             *start, gint             *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_layout</NAME>
<RETURNS>PangoLayout  *</RETURNS>
GtkLabel *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_layout_offsets</NAME>
<RETURNS>void          </RETURNS>
GtkLabel *label, gint     *x, gint     *y
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_single_line_mode</NAME>
<RETURNS>void          </RETURNS>
GtkLabel *label, gboolean single_line_mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_single_line_mode</NAME>
<RETURNS>gboolean      </RETURNS>
GtkLabel *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_current_uri</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkLabel *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_track_visited_links</NAME>
<RETURNS>void          </RETURNS>
GtkLabel *label, gboolean  track_links
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_track_visited_links</NAME>
<RETURNS>gboolean      </RETURNS>
GtkLabel *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_xalign</NAME>
<RETURNS>void          </RETURNS>
GtkLabel *label, gfloat    xalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_xalign</NAME>
<RETURNS>gfloat        </RETURNS>
GtkLabel *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_set_yalign</NAME>
<RETURNS>void          </RETURNS>
GtkLabel *label, gfloat    yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_label_get_yalign</NAME>
<RETURNS>gfloat        </RETURNS>
GtkLabel *label
</FUNCTION>
<STRUCT>
<NAME>GtkLabelPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkLabelSelectionInfo</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LAYOUT</NAME>
#define GTK_TYPE_LAYOUT            (gtk_layout_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LAYOUT</NAME>
#define GTK_LAYOUT(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LAYOUT, GtkLayout))
</MACRO>
<MACRO>
<NAME>GTK_LAYOUT_CLASS</NAME>
#define GTK_LAYOUT_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LAYOUT, GtkLayoutClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LAYOUT</NAME>
#define GTK_IS_LAYOUT(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LAYOUT))
</MACRO>
<MACRO>
<NAME>GTK_IS_LAYOUT_CLASS</NAME>
#define GTK_IS_LAYOUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LAYOUT))
</MACRO>
<MACRO>
<NAME>GTK_LAYOUT_GET_CLASS</NAME>
#define GTK_LAYOUT_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LAYOUT, GtkLayoutClass))
</MACRO>
<STRUCT>
<NAME>GtkLayout</NAME>
struct _GtkLayout
{
  GtkContainer container;

  /*< private >*/
  GtkLayoutPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkLayoutClass</NAME>
struct _GtkLayoutClass
{
  GtkContainerClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_layout_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_new</NAME>
<RETURNS>GtkWidget *     </RETURNS>
GtkAdjustment *hadjustment, GtkAdjustment *vadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_get_bin_window</NAME>
<RETURNS>GdkWindow *     </RETURNS>
GtkLayout     *layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_put</NAME>
<RETURNS>void            </RETURNS>
GtkLayout     *layout, GtkWidget     *child_widget, gint           x, gint           y
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_move</NAME>
<RETURNS>void            </RETURNS>
GtkLayout     *layout, GtkWidget     *child_widget, gint           x, gint           y
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_set_size</NAME>
<RETURNS>void            </RETURNS>
GtkLayout     *layout, guint          width, guint          height
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_get_size</NAME>
<RETURNS>void            </RETURNS>
GtkLayout     *layout, guint         *width, guint         *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_get_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment * </RETURNS>
GtkLayout     *layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_get_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment * </RETURNS>
GtkLayout     *layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_set_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkLayout     *layout, GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_layout_set_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkLayout     *layout, GtkAdjustment *adjustment
</FUNCTION>
<STRUCT>
<NAME>GtkLayoutPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LEVEL_BAR</NAME>
#define GTK_TYPE_LEVEL_BAR            (gtk_level_bar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LEVEL_BAR</NAME>
#define GTK_LEVEL_BAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LEVEL_BAR, GtkLevelBar))
</MACRO>
<MACRO>
<NAME>GTK_LEVEL_BAR_CLASS</NAME>
#define GTK_LEVEL_BAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LEVEL_BAR, GtkLevelBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LEVEL_BAR</NAME>
#define GTK_IS_LEVEL_BAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LEVEL_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_LEVEL_BAR_CLASS</NAME>
#define GTK_IS_LEVEL_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LEVEL_BAR))
</MACRO>
<MACRO>
<NAME>GTK_LEVEL_BAR_GET_CLASS</NAME>
#define GTK_LEVEL_BAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LEVEL_BAR, GtkLevelBarClass))
</MACRO>
<MACRO>
<NAME>GTK_LEVEL_BAR_OFFSET_LOW</NAME>
#define GTK_LEVEL_BAR_OFFSET_LOW  "low"
</MACRO>
<MACRO>
<NAME>GTK_LEVEL_BAR_OFFSET_HIGH</NAME>
#define GTK_LEVEL_BAR_OFFSET_HIGH "high"
</MACRO>
<MACRO>
<NAME>GTK_LEVEL_BAR_OFFSET_FULL</NAME>
#define GTK_LEVEL_BAR_OFFSET_FULL "full"
</MACRO>
<STRUCT>
<NAME>GtkLevelBar</NAME>
struct _GtkLevelBar {
  /*< private >*/
  GtkWidget parent;

  GtkLevelBarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkLevelBarClass</NAME>
struct _GtkLevelBarClass {
  /*< private >*/
  GtkWidgetClass parent_class;

  void (* offset_changed) (GtkLevelBar *self,
                           const gchar *name);

  /* padding for future class expansion */
  gpointer padding[16];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_level_bar_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_new_for_interval</NAME>
<RETURNS>GtkWidget  *</RETURNS>
gdouble      min_value, gdouble      max_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_set_mode</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, GtkLevelBarMode mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_get_mode</NAME>
<RETURNS>GtkLevelBarMode  </RETURNS>
GtkLevelBar *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_set_value</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, gdouble      value
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_get_value</NAME>
<RETURNS>gdouble     </RETURNS>
GtkLevelBar *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_set_min_value</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, gdouble      value
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_get_min_value</NAME>
<RETURNS>gdouble     </RETURNS>
GtkLevelBar *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_set_max_value</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, gdouble      value
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_get_max_value</NAME>
<RETURNS>gdouble     </RETURNS>
GtkLevelBar *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_set_inverted</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, gboolean     inverted
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_get_inverted</NAME>
<RETURNS>gboolean    </RETURNS>
GtkLevelBar *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_add_offset_value</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, const gchar *name, gdouble      value
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_remove_offset_value</NAME>
<RETURNS>void        </RETURNS>
GtkLevelBar *self, const gchar *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_level_bar_get_offset_value</NAME>
<RETURNS>gboolean    </RETURNS>
GtkLevelBar *self, const gchar *name, gdouble     *value
</FUNCTION>
<STRUCT>
<NAME>GtkLevelBarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LINK_BUTTON</NAME>
#define GTK_TYPE_LINK_BUTTON		(gtk_link_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LINK_BUTTON</NAME>
#define GTK_LINK_BUTTON(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LINK_BUTTON, GtkLinkButton))
</MACRO>
<MACRO>
<NAME>GTK_IS_LINK_BUTTON</NAME>
#define GTK_IS_LINK_BUTTON(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LINK_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_LINK_BUTTON_CLASS</NAME>
#define GTK_LINK_BUTTON_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LINK_BUTTON, GtkLinkButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LINK_BUTTON_CLASS</NAME>
#define GTK_IS_LINK_BUTTON_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LINK_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_LINK_BUTTON_GET_CLASS</NAME>
#define GTK_LINK_BUTTON_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LINK_BUTTON, GtkLinkButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkLinkButton</NAME>
struct _GtkLinkButton
{
  /*< private >*/
  GtkButton parent_instance;

  GtkLinkButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkLinkButtonClass</NAME>
struct _GtkLinkButtonClass
{
  /*< private >*/
  GtkButtonClass parent_class;

  /*< public >*/
  gboolean (* activate_link) (GtkLinkButton *button);

  /*< private >*/
  /* Padding for future expansion */
  void (*_gtk_padding1) (void);
  void (*_gtk_padding2) (void);
  void (*_gtk_padding3) (void);
  void (*_gtk_padding4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_link_button_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_link_button_new</NAME>
<RETURNS>GtkWidget  *           </RETURNS>
const gchar   *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_link_button_new_with_label</NAME>
<RETURNS>GtkWidget  *           </RETURNS>
const gchar   *uri, const gchar   *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_link_button_get_uri</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkLinkButton *link_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_link_button_set_uri</NAME>
<RETURNS>void                   </RETURNS>
GtkLinkButton *link_button, const gchar   *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_link_button_get_visited</NAME>
<RETURNS>gboolean               </RETURNS>
GtkLinkButton *link_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_link_button_set_visited</NAME>
<RETURNS>void                   </RETURNS>
GtkLinkButton *link_button, gboolean       visited
</FUNCTION>
<STRUCT>
<NAME>GtkLinkButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LIST_BOX</NAME>
#define GTK_TYPE_LIST_BOX (gtk_list_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LIST_BOX</NAME>
#define GTK_LIST_BOX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LIST_BOX, GtkListBox))
</MACRO>
<MACRO>
<NAME>GTK_LIST_BOX_CLASS</NAME>
#define GTK_LIST_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LIST_BOX, GtkListBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LIST_BOX</NAME>
#define GTK_IS_LIST_BOX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LIST_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_LIST_BOX_CLASS</NAME>
#define GTK_IS_LIST_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LIST_BOX))
</MACRO>
<MACRO>
<NAME>GTK_LIST_BOX_GET_CLASS</NAME>
#define GTK_LIST_BOX_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LIST_BOX, GtkListBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkListBox</NAME>
struct _GtkListBox
{
  GtkContainer parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkListBoxClass</NAME>
struct _GtkListBoxClass
{
  GtkContainerClass parent_class;

  /*< public >*/

  void (*row_selected)        (GtkListBox      *box,
                               GtkListBoxRow   *row);
  void (*row_activated)       (GtkListBox      *box,
                               GtkListBoxRow   *row);
  void (*activate_cursor_row) (GtkListBox      *box);
  void (*toggle_cursor_row)   (GtkListBox      *box);
  void (*move_cursor)         (GtkListBox      *box,
                               GtkMovementStep  step,
                               gint             count);
  void (*selected_rows_changed) (GtkListBox    *box);
  void (*select_all)            (GtkListBox    *box);
  void (*unselect_all)          (GtkListBox    *box);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LIST_BOX_ROW</NAME>
#define GTK_TYPE_LIST_BOX_ROW            (gtk_list_box_row_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LIST_BOX_ROW</NAME>
#define GTK_LIST_BOX_ROW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LIST_BOX_ROW, GtkListBoxRow))
</MACRO>
<MACRO>
<NAME>GTK_LIST_BOX_ROW_CLASS</NAME>
#define GTK_LIST_BOX_ROW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LIST_BOX_ROW, GtkListBoxRowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LIST_BOX_ROW</NAME>
#define GTK_IS_LIST_BOX_ROW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LIST_BOX_ROW))
</MACRO>
<MACRO>
<NAME>GTK_IS_LIST_BOX_ROW_CLASS</NAME>
#define GTK_IS_LIST_BOX_ROW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LIST_BOX_ROW))
</MACRO>
<MACRO>
<NAME>GTK_LIST_BOX_ROW_GET_CLASS</NAME>
#define GTK_LIST_BOX_ROW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LIST_BOX_ROW, GtkListBoxRowClass))
</MACRO>
<STRUCT>
<NAME>GtkListBoxRow</NAME>
struct _GtkListBoxRow
{
  GtkBin parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkListBoxRowClass</NAME>
struct _GtkListBoxRowClass
{
  GtkBinClass parent_class;

  /*< public >*/

  void (* activate) (GtkListBoxRow *row);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
};
</STRUCT>
<USER_FUNCTION>
<NAME>GtkListBoxFilterFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkListBoxRow *row,
                                          gpointer       user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkListBoxSortFunc</NAME>
<RETURNS>gint </RETURNS>
GtkListBoxRow *row1,
                                    GtkListBoxRow *row2,
                                    gpointer       user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkListBoxUpdateHeaderFunc</NAME>
<RETURNS>void </RETURNS>
GtkListBoxRow *row,
                                            GtkListBoxRow *before,
                                            gpointer       user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkListBoxCreateWidgetFunc</NAME>
<RETURNS>GtkWidget *</RETURNS>
gpointer item,
                                                   gpointer user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_get_header</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkListBoxRow *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_set_header</NAME>
<RETURNS>void        </RETURNS>
GtkListBoxRow *row, GtkWidget     *header
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_get_index</NAME>
<RETURNS>gint        </RETURNS>
GtkListBoxRow *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_changed</NAME>
<RETURNS>void        </RETURNS>
GtkListBoxRow *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_is_selected</NAME>
<RETURNS>gboolean    </RETURNS>
GtkListBoxRow *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_set_selectable</NAME>
<RETURNS>void        </RETURNS>
GtkListBoxRow *row, gboolean       selectable
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_get_selectable</NAME>
<RETURNS>gboolean    </RETURNS>
GtkListBoxRow *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_set_activatable</NAME>
<RETURNS>void        </RETURNS>
GtkListBoxRow *row, gboolean       activatable
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_row_get_activatable</NAME>
<RETURNS>gboolean    </RETURNS>
GtkListBoxRow *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_prepend</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkWidget                     *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_insert</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkWidget                     *child, gint                           position
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_selected_row</NAME>
<RETURNS>GtkListBoxRow * </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_row_at_index</NAME>
<RETURNS>GtkListBoxRow * </RETURNS>
GtkListBox                    *box, gint                           index_
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_row_at_y</NAME>
<RETURNS>GtkListBoxRow * </RETURNS>
GtkListBox                    *box, gint                           y
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_select_row</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxRow                 *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_placeholder</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkWidget                     *placeholder
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_adjustment</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkAdjustment                 *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_adjustment</NAME>
<RETURNS>GtkAdjustment  *</RETURNS>
GtkListBox                    *box
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkListBoxForeachFunc</NAME>
<RETURNS>void </RETURNS>
GtkListBox      *box,
                                        GtkListBoxRow   *row,
                                        gpointer         user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_selected_foreach</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxForeachFunc          func, gpointer                       data
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_selected_rows</NAME>
<RETURNS>GList          *</RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_unselect_row</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxRow                 *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_select_all</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_unselect_all</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_selection_mode</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkSelectionMode               mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_selection_mode</NAME>
<RETURNS>GtkSelectionMode  </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_filter_func</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxFilterFunc           filter_func, gpointer                       user_data, GDestroyNotify                 destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_header_func</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxUpdateHeaderFunc     update_header, gpointer                       user_data, GDestroyNotify                 destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_invalidate_filter</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_invalidate_sort</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_invalidate_headers</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_sort_func</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxSortFunc             sort_func, gpointer                       user_data, GDestroyNotify                 destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_set_activate_on_single_click</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, gboolean                       single
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_get_activate_on_single_click</NAME>
<RETURNS>gboolean        </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_drag_unhighlight_row</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_drag_highlight_row</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                    *box, GtkListBoxRow                 *row
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_new</NAME>
<RETURNS>GtkWidget *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_box_bind_model</NAME>
<RETURNS>void            </RETURNS>
GtkListBox                   *box, GListModel                   *model, GtkListBoxCreateWidgetFunc    create_widget_func, gpointer                      user_data, GDestroyNotify                user_data_free_func
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_LIST_STORE</NAME>
#define GTK_TYPE_LIST_STORE	       (gtk_list_store_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LIST_STORE</NAME>
#define GTK_LIST_STORE(obj)	       (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_LIST_STORE, GtkListStore))
</MACRO>
<MACRO>
<NAME>GTK_LIST_STORE_CLASS</NAME>
#define GTK_LIST_STORE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_LIST_STORE, GtkListStoreClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LIST_STORE</NAME>
#define GTK_IS_LIST_STORE(obj)	       (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_LIST_STORE))
</MACRO>
<MACRO>
<NAME>GTK_IS_LIST_STORE_CLASS</NAME>
#define GTK_IS_LIST_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_LIST_STORE))
</MACRO>
<MACRO>
<NAME>GTK_LIST_STORE_GET_CLASS</NAME>
#define GTK_LIST_STORE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_LIST_STORE, GtkListStoreClass))
</MACRO>
<STRUCT>
<NAME>GtkListStore</NAME>
struct _GtkListStore
{
  GObject parent;

  /*< private >*/
  GtkListStorePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkListStoreClass</NAME>
struct _GtkListStoreClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_list_store_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_new</NAME>
<RETURNS>GtkListStore  *</RETURNS>
gint          n_columns, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_newv</NAME>
<RETURNS>GtkListStore  *</RETURNS>
gint          n_columns, GType        *types
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_set_column_types</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, gint          n_columns, GType        *types
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_set_value</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, gint          column, GValue       *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_set</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_set_valuesv</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, gint         *columns, GValue       *values, gint          n_values
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_set_valist</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, va_list       var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_remove</NAME>
<RETURNS>gboolean       </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_insert</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, gint          position
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_insert_before</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, GtkTreeIter  *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_insert_after</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, GtkTreeIter  *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_insert_with_values</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, gint          position, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_insert_with_valuesv</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter, gint          position, gint         *columns, GValue       *values, gint          n_values
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_prepend</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_append</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_clear</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *list_store
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_iter_is_valid</NAME>
<RETURNS>gboolean       </RETURNS>
GtkListStore *list_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_reorder</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *store, gint         *new_order
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_swap</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *store, GtkTreeIter  *a, GtkTreeIter  *b
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_move_after</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *store, GtkTreeIter  *iter, GtkTreeIter  *position
</FUNCTION>
<FUNCTION>
<NAME>gtk_list_store_move_before</NAME>
<RETURNS>void           </RETURNS>
GtkListStore *store, GtkTreeIter  *iter, GtkTreeIter  *position
</FUNCTION>
<STRUCT>
<NAME>GtkListStorePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_LOCK_BUTTON</NAME>
#define GTK_TYPE_LOCK_BUTTON         (gtk_lock_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_LOCK_BUTTON</NAME>
#define GTK_LOCK_BUTTON(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_LOCK_BUTTON, GtkLockButton))
</MACRO>
<MACRO>
<NAME>GTK_LOCK_BUTTON_CLASS</NAME>
#define GTK_LOCK_BUTTON_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_LOCK_BUTTON,  GtkLockButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_LOCK_BUTTON</NAME>
#define GTK_IS_LOCK_BUTTON(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_LOCK_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_LOCK_BUTTON_CLASS</NAME>
#define GTK_IS_LOCK_BUTTON_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_LOCK_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_LOCK_BUTTON_GET_CLASS</NAME>
#define GTK_LOCK_BUTTON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_LOCK_BUTTON, GtkLockButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkLockButton</NAME>
struct _GtkLockButton
{
  GtkButton parent;

  GtkLockButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkLockButtonClass</NAME>
struct _GtkLockButtonClass
{
  GtkButtonClass parent_class;

  /*< private >*/

  void (*reserved0) (void);
  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
  void (*reserved5) (void);
  void (*reserved6) (void);
  void (*reserved7) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_lock_button_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_lock_button_new</NAME>
<RETURNS>GtkWidget    *</RETURNS>
GPermission   *permission
</FUNCTION>
<FUNCTION>
<NAME>gtk_lock_button_get_permission</NAME>
<RETURNS>GPermission  *</RETURNS>
GtkLockButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_lock_button_set_permission</NAME>
<RETURNS>void          </RETURNS>
GtkLockButton *button, GPermission   *permission
</FUNCTION>
<STRUCT>
<NAME>GtkLockButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_PRIORITY_RESIZE</NAME>
#define GTK_PRIORITY_RESIZE (G_PRIORITY_HIGH_IDLE + 10)
</MACRO>
<USER_FUNCTION>
<NAME>GtkKeySnoopFunc</NAME>
<RETURNS>gint </RETURNS>
GtkWidget   *grab_widget,
                                 GdkEventKey *event,
                                 gpointer     func_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_get_major_version</NAME>
<RETURNS>guint  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_minor_version</NAME>
<RETURNS>guint  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_micro_version</NAME>
<RETURNS>guint  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_binary_age</NAME>
<RETURNS>guint  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_interface_age</NAME>
<RETURNS>guint  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>gtk_major_version</NAME>
#define gtk_major_version gtk_get_major_version ()
</MACRO>
<MACRO>
<NAME>gtk_minor_version</NAME>
#define gtk_minor_version gtk_get_minor_version ()
</MACRO>
<MACRO>
<NAME>gtk_micro_version</NAME>
#define gtk_micro_version gtk_get_micro_version ()
</MACRO>
<MACRO>
<NAME>gtk_binary_age</NAME>
#define gtk_binary_age gtk_get_binary_age ()
</MACRO>
<MACRO>
<NAME>gtk_interface_age</NAME>
#define gtk_interface_age gtk_get_interface_age ()
</MACRO>
<FUNCTION>
<NAME>gtk_check_version</NAME>
<RETURNS>const gchar * </RETURNS>
guint   required_major, guint   required_minor, guint   required_micro
</FUNCTION>
<FUNCTION>
<NAME>gtk_parse_args</NAME>
<RETURNS>gboolean  </RETURNS>
int    *argc, char ***argv
</FUNCTION>
<FUNCTION>
<NAME>gtk_init</NAME>
<RETURNS>void      </RETURNS>
int    *argc, char ***argv
</FUNCTION>
<FUNCTION>
<NAME>gtk_init_check</NAME>
<RETURNS>gboolean  </RETURNS>
int    *argc, char ***argv
</FUNCTION>
<FUNCTION>
<NAME>gtk_init_with_args</NAME>
<RETURNS>gboolean  </RETURNS>
gint                 *argc, gchar              ***argv, const gchar          *parameter_string, const GOptionEntry   *entries, const gchar          *translation_domain, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_option_group</NAME>
<RETURNS>GOptionGroup  *</RETURNS>
gboolean open_default_display
</FUNCTION>
<FUNCTION>
<NAME>gtk_init_abi_check</NAME>
<RETURNS>void      </RETURNS>
int    *argc, char ***argv, int     num_checks, size_t  sizeof_GtkWindow, size_t  sizeof_GtkBox
</FUNCTION>
<FUNCTION>
<NAME>gtk_init_check_abi_check</NAME>
<RETURNS>gboolean  </RETURNS>
int    *argc, char ***argv, int     num_checks, size_t  sizeof_GtkWindow, size_t  sizeof_GtkBox
</FUNCTION>
<FUNCTION>
<NAME>gtk_disable_setlocale</NAME>
<RETURNS>void            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_default_language</NAME>
<RETURNS>PangoLanguage  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_locale_direction</NAME>
<RETURNS>GtkTextDirection  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_events_pending</NAME>
<RETURNS>gboolean        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_main_do_event</NAME>
<RETURNS>void        </RETURNS>
GdkEvent           *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_main</NAME>
<RETURNS>void        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_main_level</NAME>
<RETURNS>guint       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_main_quit</NAME>
<RETURNS>void        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_main_iteration</NAME>
<RETURNS>gboolean    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_main_iteration_do</NAME>
<RETURNS>gboolean    </RETURNS>
gboolean            blocking
</FUNCTION>
<FUNCTION>
<NAME>gtk_true</NAME>
<RETURNS>gboolean    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_false</NAME>
<RETURNS>gboolean    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_grab_add</NAME>
<RETURNS>void        </RETURNS>
GtkWidget          *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_grab_get_current</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_grab_remove</NAME>
<RETURNS>void        </RETURNS>
GtkWidget          *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_device_grab_add</NAME>
<RETURNS>void        </RETURNS>
GtkWidget          *widget, GdkDevice          *device, gboolean            block_others
</FUNCTION>
<FUNCTION>
<NAME>gtk_device_grab_remove</NAME>
<RETURNS>void        </RETURNS>
GtkWidget          *widget, GdkDevice          *device
</FUNCTION>
<FUNCTION>
<NAME>gtk_key_snooper_install</NAME>
<DEPRECATED/>
<RETURNS>guint       </RETURNS>
GtkKeySnoopFunc snooper, gpointer        func_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_key_snooper_remove</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
guint           snooper_handler_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_current_event</NAME>
<RETURNS>GdkEvent  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_current_event_time</NAME>
<RETURNS>guint32     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_current_event_state</NAME>
<RETURNS>gboolean    </RETURNS>
GdkModifierType *state
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_current_event_device</NAME>
<RETURNS>GdkDevice  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_get_event_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GdkEvent        *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_propagate_event</NAME>
<RETURNS>void        </RETURNS>
GtkWidget       *widget, GdkEvent        *event
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_MENU</NAME>
#define GTK_TYPE_MENU			(gtk_menu_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MENU</NAME>
#define GTK_MENU(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MENU, GtkMenu))
</MACRO>
<MACRO>
<NAME>GTK_MENU_CLASS</NAME>
#define GTK_MENU_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU, GtkMenuClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU</NAME>
#define GTK_IS_MENU(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MENU))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_CLASS</NAME>
#define GTK_IS_MENU_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU))
</MACRO>
<MACRO>
<NAME>GTK_MENU_GET_CLASS</NAME>
#define GTK_MENU_GET_CLASS(obj)         (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MENU, GtkMenuClass))
</MACRO>
<ENUM>
<NAME>GtkArrowPlacement</NAME>
typedef enum
{
  GTK_ARROWS_BOTH,
  GTK_ARROWS_START,
  GTK_ARROWS_END
} GtkArrowPlacement;
</ENUM>
<USER_FUNCTION>
<NAME>GtkMenuPositionFunc</NAME>
<RETURNS>void </RETURNS>
GtkMenu   *menu,
				     gint      *x,
				     gint      *y,
				     gboolean  *push_in,
				     gpointer	user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkMenuDetachFunc</NAME>
<RETURNS>void </RETURNS>
GtkWidget *attach_widget,
				     GtkMenu   *menu
</USER_FUNCTION>
<STRUCT>
<NAME>GtkMenu</NAME>
struct _GtkMenu
{
  GtkMenuShell menu_shell;

  /*< private >*/
  GtkMenuPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMenuClass</NAME>
struct _GtkMenuClass
{
  GtkMenuShellClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_menu_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_new_from_model</NAME>
<RETURNS>GtkWidget * </RETURNS>
GMenuModel *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_popup</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu, GtkWidget	       *parent_menu_shell, GtkWidget	       *parent_menu_item, GtkMenuPositionFunc	func, gpointer		data, guint		button, guint32		activate_time
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_popup_for_device</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, GdkDevice           *device, GtkWidget           *parent_menu_shell, GtkWidget           *parent_menu_item, GtkMenuPositionFunc  func, gpointer             data, GDestroyNotify       destroy, guint                button, guint32              activate_time
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_popup_at_rect</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, GdkWindow           *rect_window, const GdkRectangle  *rect, GdkGravity           rect_anchor, GdkGravity           menu_anchor, const GdkEvent      *trigger_event
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_popup_at_widget</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, GtkWidget           *widget, GdkGravity           widget_anchor, GdkGravity           menu_anchor, const GdkEvent      *trigger_event
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_popup_at_pointer</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, const GdkEvent      *trigger_event
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_reposition</NAME>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_popdown</NAME>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_active</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkMenu	       *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_active</NAME>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu, guint		index
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_accel_group</NAME>
<RETURNS>void 	       </RETURNS>
GtkMenu	       *menu, GtkAccelGroup       *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_accel_group</NAME>
<RETURNS>GtkAccelGroup * </RETURNS>
GtkMenu	       *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_accel_path</NAME>
<RETURNS>void            </RETURNS>
GtkMenu             *menu, const gchar         *accel_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_accel_path</NAME>
<RETURNS>const gchar *   </RETURNS>
GtkMenu             *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_attach_to_widget</NAME>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu, GtkWidget	       *attach_widget, GtkMenuDetachFunc	detacher
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_detach</NAME>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_attach_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkMenu	       *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_tearoff_state</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, gboolean             torn_off
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_tearoff_state</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkMenu             *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_title</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkMenu             *menu, const gchar         *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_title</NAME>
<DEPRECATED/>
<RETURNS>const gchar  * </RETURNS>
GtkMenu             *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_reorder_child</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, GtkWidget           *child, gint                position
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_screen</NAME>
<RETURNS>void 	   </RETURNS>
GtkMenu	       *menu, GdkScreen	       *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_attach</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, GtkWidget           *child, guint                left_attach, guint                right_attach, guint                top_attach, guint                bottom_attach
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_monitor</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, gint                 monitor_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_monitor</NAME>
<RETURNS>gint        </RETURNS>
GtkMenu             *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_place_on_monitor</NAME>
<RETURNS>void        </RETURNS>
GtkMenu             *menu, GdkMonitor          *monitor
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_for_attach_widget</NAME>
<RETURNS>GList *     </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_set_reserve_toggle_size</NAME>
<RETURNS>void      </RETURNS>
GtkMenu  *menu, gboolean   reserve_toggle_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_get_reserve_toggle_size</NAME>
<RETURNS>gboolean  </RETURNS>
GtkMenu  *menu
</FUNCTION>
<STRUCT>
<NAME>GtkMenuPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MENU_BAR</NAME>
#define	GTK_TYPE_MENU_BAR               (gtk_menu_bar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MENU_BAR</NAME>
#define GTK_MENU_BAR(obj)               (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MENU_BAR, GtkMenuBar))
</MACRO>
<MACRO>
<NAME>GTK_MENU_BAR_CLASS</NAME>
#define GTK_MENU_BAR_CLASS(klass)       (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_BAR, GtkMenuBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_BAR</NAME>
#define GTK_IS_MENU_BAR(obj)            (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MENU_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_BAR_CLASS</NAME>
#define GTK_IS_MENU_BAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_BAR))
</MACRO>
<MACRO>
<NAME>GTK_MENU_BAR_GET_CLASS</NAME>
#define GTK_MENU_BAR_GET_CLASS(obj)     (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MENU_BAR, GtkMenuBarClass))
</MACRO>
<STRUCT>
<NAME>GtkMenuBar</NAME>
struct _GtkMenuBar
{
  GtkMenuShell menu_shell;

  /*< private >*/
  GtkMenuBarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMenuBarClass</NAME>
struct _GtkMenuBarClass
{
  GtkMenuShellClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_menu_bar_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_bar_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_bar_new_from_model</NAME>
<RETURNS>GtkWidget * </RETURNS>
GMenuModel *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_bar_get_pack_direction</NAME>
<RETURNS>GtkPackDirection  </RETURNS>
GtkMenuBar       *menubar
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_bar_set_pack_direction</NAME>
<RETURNS>void              </RETURNS>
GtkMenuBar       *menubar, GtkPackDirection  pack_dir
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_bar_get_child_pack_direction</NAME>
<RETURNS>GtkPackDirection  </RETURNS>
GtkMenuBar       *menubar
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_bar_set_child_pack_direction</NAME>
<RETURNS>void              </RETURNS>
GtkMenuBar       *menubar, GtkPackDirection  child_pack_dir
</FUNCTION>
<STRUCT>
<NAME>GtkMenuBarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MENU_BUTTON</NAME>
#define GTK_TYPE_MENU_BUTTON            (gtk_menu_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MENU_BUTTON</NAME>
#define GTK_MENU_BUTTON(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MENU_BUTTON, GtkMenuButton))
</MACRO>
<MACRO>
<NAME>GTK_MENU_BUTTON_CLASS</NAME>
#define GTK_MENU_BUTTON_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_BUTTON, GtkMenuButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_BUTTON</NAME>
#define GTK_IS_MENU_BUTTON(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MENU_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_BUTTON_CLASS</NAME>
#define GTK_IS_MENU_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_MENU_BUTTON_GET_CLASS</NAME>
#define GTK_MENU_BUTTON_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MENU_BUTTON, GtkMenuButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkMenuButton</NAME>
struct _GtkMenuButton
{
  GtkToggleButton parent;

  /*< private >*/
  GtkMenuButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMenuButtonClass</NAME>
struct _GtkMenuButtonClass
{
  GtkToggleButtonClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_menu_button_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_new</NAME>
<RETURNS>GtkWidget    *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_set_popup</NAME>
<RETURNS>void          </RETURNS>
GtkMenuButton *menu_button, GtkWidget     *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_get_popup</NAME>
<RETURNS>GtkMenu      *</RETURNS>
GtkMenuButton *menu_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_set_popover</NAME>
<RETURNS>void          </RETURNS>
GtkMenuButton *menu_button, GtkWidget     *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_get_popover</NAME>
<RETURNS>GtkPopover   *</RETURNS>
GtkMenuButton *menu_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_set_direction</NAME>
<RETURNS>void          </RETURNS>
GtkMenuButton *menu_button, GtkArrowType   direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_get_direction</NAME>
<RETURNS>GtkArrowType  </RETURNS>
GtkMenuButton *menu_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_set_menu_model</NAME>
<RETURNS>void          </RETURNS>
GtkMenuButton *menu_button, GMenuModel    *menu_model
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_get_menu_model</NAME>
<RETURNS>GMenuModel   *</RETURNS>
GtkMenuButton *menu_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_set_align_widget</NAME>
<RETURNS>void          </RETURNS>
GtkMenuButton *menu_button, GtkWidget     *align_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_get_align_widget</NAME>
<RETURNS>GtkWidget    *</RETURNS>
GtkMenuButton *menu_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_set_use_popover</NAME>
<RETURNS>void          </RETURNS>
GtkMenuButton *menu_button, gboolean       use_popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_button_get_use_popover</NAME>
<RETURNS>gboolean      </RETURNS>
GtkMenuButton *menu_button
</FUNCTION>
<STRUCT>
<NAME>GtkMenuButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MENU_ITEM</NAME>
#define GTK_TYPE_MENU_ITEM            (gtk_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MENU_ITEM</NAME>
#define GTK_MENU_ITEM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MENU_ITEM, GtkMenuItem))
</MACRO>
<MACRO>
<NAME>GTK_MENU_ITEM_CLASS</NAME>
#define GTK_MENU_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_ITEM, GtkMenuItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_ITEM</NAME>
#define GTK_IS_MENU_ITEM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_ITEM_CLASS</NAME>
#define GTK_IS_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_MENU_ITEM_GET_CLASS</NAME>
#define GTK_MENU_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MENU_ITEM, GtkMenuItemClass))
</MACRO>
<STRUCT>
<NAME>GtkMenuItem</NAME>
struct _GtkMenuItem
{
  GtkBin bin;

  /*< private >*/
  GtkMenuItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMenuItemClass</NAME>
struct _GtkMenuItemClass
{
  GtkBinClass parent_class;

  /*< public >*/

  /* If the following flag is true, then we should always
   * hide the menu when the MenuItem is activated. Otherwise,
   * it is up to the caller. For instance, when navigating
   * a menu with the keyboard, <Space> doesn't hide, but
   * <Return> does.
   */
  guint hide_on_activate : 1;

  void (* activate)             (GtkMenuItem *menu_item);
  void (* activate_item)        (GtkMenuItem *menu_item);
  void (* toggle_size_request)  (GtkMenuItem *menu_item,
                                 gint        *requisition);
  void (* toggle_size_allocate) (GtkMenuItem *menu_item,
                                 gint         allocation);
  void (* set_label)            (GtkMenuItem *menu_item,
                                 const gchar *label);
  const gchar * (* get_label)   (GtkMenuItem *menu_item);

  void (* select)               (GtkMenuItem *menu_item);
  void (* deselect)             (GtkMenuItem *menu_item);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_menu_item_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_new_with_label</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_new_with_mnemonic</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_set_submenu</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item, GtkWidget           *submenu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_get_submenu</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_select</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_deselect</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_activate</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_toggle_size_request</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item, gint                *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_toggle_size_allocate</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item, gint                 allocation
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_set_right_justified</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item, gboolean             right_justified
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_get_right_justified</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_set_accel_path</NAME>
<RETURNS>void           </RETURNS>
GtkMenuItem         *menu_item, const gchar         *accel_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_get_accel_path</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkMenuItem    *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_set_label</NAME>
<RETURNS>void           </RETURNS>
GtkMenuItem         *menu_item, const gchar         *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_get_label</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_set_use_underline</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem         *menu_item, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_get_use_underline</NAME>
<RETURNS>gboolean    </RETURNS>
GtkMenuItem         *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_set_reserve_indicator</NAME>
<RETURNS>void        </RETURNS>
GtkMenuItem        *menu_item, gboolean            reserve
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_item_get_reserve_indicator</NAME>
<RETURNS>gboolean    </RETURNS>
GtkMenuItem        *menu_item
</FUNCTION>
<STRUCT>
<NAME>GtkMenuItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MENU_SHELL</NAME>
#define GTK_TYPE_MENU_SHELL             (gtk_menu_shell_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MENU_SHELL</NAME>
#define GTK_MENU_SHELL(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MENU_SHELL, GtkMenuShell))
</MACRO>
<MACRO>
<NAME>GTK_MENU_SHELL_CLASS</NAME>
#define GTK_MENU_SHELL_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MENU_SHELL, GtkMenuShellClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_SHELL</NAME>
#define GTK_IS_MENU_SHELL(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MENU_SHELL))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_SHELL_CLASS</NAME>
#define GTK_IS_MENU_SHELL_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MENU_SHELL))
</MACRO>
<MACRO>
<NAME>GTK_MENU_SHELL_GET_CLASS</NAME>
#define GTK_MENU_SHELL_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MENU_SHELL, GtkMenuShellClass))
</MACRO>
<STRUCT>
<NAME>GtkMenuShell</NAME>
struct _GtkMenuShell
{
  GtkContainer container;

  /*< private >*/
  GtkMenuShellPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMenuShellClass</NAME>
struct _GtkMenuShellClass
{
  GtkContainerClass parent_class;

  guint submenu_placement : 1;

  void     (*deactivate)       (GtkMenuShell *menu_shell);
  void     (*selection_done)   (GtkMenuShell *menu_shell);

  void     (*move_current)     (GtkMenuShell *menu_shell,
                                GtkMenuDirectionType direction);
  void     (*activate_current) (GtkMenuShell *menu_shell,
                                gboolean      force_hide);
  void     (*cancel)           (GtkMenuShell *menu_shell);
  void     (*select_item)      (GtkMenuShell *menu_shell,
                                GtkWidget    *menu_item);
  void     (*insert)           (GtkMenuShell *menu_shell,
                                GtkWidget    *child,
                                gint          position);
  gint     (*get_popup_delay)  (GtkMenuShell *menu_shell);
  gboolean (*move_selected)    (GtkMenuShell *menu_shell,
                                gint          distance);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_menu_shell_get_type</NAME>
<RETURNS>GType     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_append</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, GtkWidget    *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_prepend</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, GtkWidget    *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_insert</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, GtkWidget    *child, gint          position
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_deactivate</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_select_item</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, GtkWidget    *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_deselect</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_activate_item</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, GtkWidget    *menu_item, gboolean      force_deactivate
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_select_first</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, gboolean      search_sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_cancel</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_get_take_focus</NAME>
<RETURNS>gboolean  </RETURNS>
GtkMenuShell *menu_shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_set_take_focus</NAME>
<RETURNS>void      </RETURNS>
GtkMenuShell *menu_shell, gboolean      take_focus
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_get_selected_item</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkMenuShell *menu_shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_get_parent_shell</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkMenuShell *menu_shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_shell_bind_model</NAME>
<RETURNS>void        </RETURNS>
GtkMenuShell *menu_shell, GMenuModel   *model, const gchar  *action_namespace, gboolean      with_separators
</FUNCTION>
<STRUCT>
<NAME>GtkMenuShellPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MENU_TOOL_BUTTON</NAME>
#define GTK_TYPE_MENU_TOOL_BUTTON         (gtk_menu_tool_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MENU_TOOL_BUTTON</NAME>
#define GTK_MENU_TOOL_BUTTON(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_MENU_TOOL_BUTTON, GtkMenuToolButton))
</MACRO>
<MACRO>
<NAME>GTK_MENU_TOOL_BUTTON_CLASS</NAME>
#define GTK_MENU_TOOL_BUTTON_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), GTK_TYPE_MENU_TOOL_BUTTON, GtkMenuToolButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_TOOL_BUTTON</NAME>
#define GTK_IS_MENU_TOOL_BUTTON(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_MENU_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_MENU_TOOL_BUTTON_CLASS</NAME>
#define GTK_IS_MENU_TOOL_BUTTON_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_MENU_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_MENU_TOOL_BUTTON_GET_CLASS</NAME>
#define GTK_MENU_TOOL_BUTTON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_MENU_TOOL_BUTTON, GtkMenuToolButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkMenuToolButton</NAME>
struct _GtkMenuToolButton
{
  GtkToolButton parent;

  /*< private >*/
  GtkMenuToolButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMenuToolButtonClass</NAME>
struct _GtkMenuToolButtonClass
{
  GtkToolButtonClass parent_class;

  /*< public >*/

  void (*show_menu) (GtkMenuToolButton *button);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_menu_tool_button_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_tool_button_new</NAME>
<RETURNS>GtkToolItem   *</RETURNS>
GtkWidget   *icon_widget, const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_tool_button_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkToolItem   *</RETURNS>
const gchar *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_tool_button_set_menu</NAME>
<RETURNS>void           </RETURNS>
GtkMenuToolButton *button, GtkWidget         *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_tool_button_get_menu</NAME>
<RETURNS>GtkWidget     *</RETURNS>
GtkMenuToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_tool_button_set_arrow_tooltip_text</NAME>
<RETURNS>void           </RETURNS>
GtkMenuToolButton *button, const gchar       *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_menu_tool_button_set_arrow_tooltip_markup</NAME>
<RETURNS>void           </RETURNS>
GtkMenuToolButton *button, const gchar       *markup
</FUNCTION>
<STRUCT>
<NAME>GtkMenuToolButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MESSAGE_DIALOG</NAME>
#define GTK_TYPE_MESSAGE_DIALOG                  (gtk_message_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MESSAGE_DIALOG</NAME>
#define GTK_MESSAGE_DIALOG(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialog))
</MACRO>
<MACRO>
<NAME>GTK_MESSAGE_DIALOG_CLASS</NAME>
#define GTK_MESSAGE_DIALOG_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MESSAGE_DIALOG</NAME>
#define GTK_IS_MESSAGE_DIALOG(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MESSAGE_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_MESSAGE_DIALOG_CLASS</NAME>
#define GTK_IS_MESSAGE_DIALOG_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MESSAGE_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_MESSAGE_DIALOG_GET_CLASS</NAME>
#define GTK_MESSAGE_DIALOG_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MESSAGE_DIALOG, GtkMessageDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkMessageDialog</NAME>
struct _GtkMessageDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkMessageDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMessageDialogClass</NAME>
struct _GtkMessageDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkButtonsType</NAME>
typedef enum
{
  GTK_BUTTONS_NONE,
  GTK_BUTTONS_OK,
  GTK_BUTTONS_CLOSE,
  GTK_BUTTONS_CANCEL,
  GTK_BUTTONS_YES_NO,
  GTK_BUTTONS_OK_CANCEL
} GtkButtonsType;
</ENUM>
<FUNCTION>
<NAME>gtk_message_dialog_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkWindow      *parent, GtkDialogFlags  flags, GtkMessageType  type, GtkButtonsType  buttons, const gchar    *message_format, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_new_with_markup</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkWindow      *parent, GtkDialogFlags  flags, GtkMessageType  type, GtkButtonsType  buttons, const gchar    *message_format, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_set_image</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkMessageDialog *dialog, GtkWidget        *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_get_image</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  * </RETURNS>
GtkMessageDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_set_markup</NAME>
<RETURNS>void        </RETURNS>
GtkMessageDialog *message_dialog, const gchar      *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_format_secondary_text</NAME>
<RETURNS>void        </RETURNS>
GtkMessageDialog *message_dialog, const gchar      *message_format, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_format_secondary_markup</NAME>
<RETURNS>void        </RETURNS>
GtkMessageDialog *message_dialog, const gchar      *message_format, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_message_dialog_get_message_area</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkMessageDialog *message_dialog
</FUNCTION>
<STRUCT>
<NAME>GtkMessageDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MODEL_BUTTON</NAME>
#define GTK_TYPE_MODEL_BUTTON         (gtk_model_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MODEL_BUTTON</NAME>
#define GTK_MODEL_BUTTON(inst)        (G_TYPE_CHECK_INSTANCE_CAST ((inst),                      \
                                      GTK_TYPE_MODEL_BUTTON, GtkModelButton))
</MACRO>
<MACRO>
<NAME>GTK_IS_MODEL_BUTTON</NAME>
#define GTK_IS_MODEL_BUTTON(inst)     (G_TYPE_CHECK_INSTANCE_TYPE ((inst),                      \
                                      GTK_TYPE_MODEL_BUTTON))
</MACRO>
<ENUM>
<NAME>GtkButtonRole</NAME>
typedef enum {
  GTK_BUTTON_ROLE_NORMAL,
  GTK_BUTTON_ROLE_CHECK,
  GTK_BUTTON_ROLE_RADIO
} GtkButtonRole;
</ENUM>
<FUNCTION>
<NAME>gtk_model_button_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_model_button_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkModelButton</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GtkModuleInitFunc</NAME>
<RETURNS>void </RETURNS>
gint        *argc,
                                              gchar      ***argv
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkModuleDisplayInitFunc</NAME>
<RETURNS>void </RETURNS>
GdkDisplay   *display
</USER_FUNCTION>
<MACRO>
<NAME>GTK_TYPE_MOUNT_OPERATION</NAME>
#define GTK_TYPE_MOUNT_OPERATION         (gtk_mount_operation_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MOUNT_OPERATION</NAME>
#define GTK_MOUNT_OPERATION(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_MOUNT_OPERATION, GtkMountOperation))
</MACRO>
<MACRO>
<NAME>GTK_MOUNT_OPERATION_CLASS</NAME>
#define GTK_MOUNT_OPERATION_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), GTK_TYPE_MOUNT_OPERATION, GtkMountOperationClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MOUNT_OPERATION</NAME>
#define GTK_IS_MOUNT_OPERATION(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_MOUNT_OPERATION))
</MACRO>
<MACRO>
<NAME>GTK_IS_MOUNT_OPERATION_CLASS</NAME>
#define GTK_IS_MOUNT_OPERATION_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_MOUNT_OPERATION))
</MACRO>
<MACRO>
<NAME>GTK_MOUNT_OPERATION_GET_CLASS</NAME>
#define GTK_MOUNT_OPERATION_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_MOUNT_OPERATION, GtkMountOperationClass))
</MACRO>
<STRUCT>
<NAME>GtkMountOperation</NAME>
struct _GtkMountOperation
{
  GMountOperation parent_instance;

  GtkMountOperationPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMountOperationClass</NAME>
struct _GtkMountOperationClass
{
  GMountOperationClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_mount_operation_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_mount_operation_new</NAME>
<RETURNS>GMountOperation  *</RETURNS>
GtkWindow         *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_mount_operation_is_showing</NAME>
<RETURNS>gboolean          </RETURNS>
GtkMountOperation *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_mount_operation_set_parent</NAME>
<RETURNS>void              </RETURNS>
GtkMountOperation *op, GtkWindow         *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_mount_operation_get_parent</NAME>
<RETURNS>GtkWindow  *      </RETURNS>
GtkMountOperation *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_mount_operation_set_screen</NAME>
<RETURNS>void              </RETURNS>
GtkMountOperation *op, GdkScreen         *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_mount_operation_get_screen</NAME>
<RETURNS>GdkScreen        *</RETURNS>
GtkMountOperation *op
</FUNCTION>
<STRUCT>
<NAME>GtkMountOperationPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_NATIVE_DIALOG</NAME>
#define GTK_TYPE_NATIVE_DIALOG             (gtk_native_dialog_get_type ())
</MACRO>
<STRUCT>
<NAME>GtkNativeDialogClass</NAME>
struct _GtkNativeDialogClass
{
  GObjectClass parent_class;

  void (* response) (GtkNativeDialog *self, gint response_id);

  /* <private> */
  void (* show) (GtkNativeDialog *self);
  void (* hide) (GtkNativeDialog *self);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_native_dialog_show</NAME>
<RETURNS>void                   </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_hide</NAME>
<RETURNS>void                   </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_destroy</NAME>
<RETURNS>void                   </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_get_visible</NAME>
<RETURNS>gboolean               </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_set_modal</NAME>
<RETURNS>void                   </RETURNS>
GtkNativeDialog *self, gboolean modal
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_get_modal</NAME>
<RETURNS>gboolean               </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_set_title</NAME>
<RETURNS>void                   </RETURNS>
GtkNativeDialog *self, const char *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_get_title</NAME>
<RETURNS>const char  *          </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_set_transient_for</NAME>
<RETURNS>void                   </RETURNS>
GtkNativeDialog *self, GtkWindow *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_get_transient_for</NAME>
<RETURNS>GtkWindow  *           </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_native_dialog_run</NAME>
<RETURNS>gint                   </RETURNS>
GtkNativeDialog *self
</FUNCTION>
<STRUCT>
<NAME>GtkNativeDialog</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_NOTEBOOK</NAME>
#define GTK_TYPE_NOTEBOOK                  (gtk_notebook_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_NOTEBOOK</NAME>
#define GTK_NOTEBOOK(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_NOTEBOOK, GtkNotebook))
</MACRO>
<MACRO>
<NAME>GTK_NOTEBOOK_CLASS</NAME>
#define GTK_NOTEBOOK_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_NOTEBOOK, GtkNotebookClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_NOTEBOOK</NAME>
#define GTK_IS_NOTEBOOK(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_NOTEBOOK))
</MACRO>
<MACRO>
<NAME>GTK_IS_NOTEBOOK_CLASS</NAME>
#define GTK_IS_NOTEBOOK_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_NOTEBOOK))
</MACRO>
<MACRO>
<NAME>GTK_NOTEBOOK_GET_CLASS</NAME>
#define GTK_NOTEBOOK_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_NOTEBOOK, GtkNotebookClass))
</MACRO>
<ENUM>
<NAME>GtkNotebookTab</NAME>
typedef enum
{
  GTK_NOTEBOOK_TAB_FIRST,
  GTK_NOTEBOOK_TAB_LAST
} GtkNotebookTab;
</ENUM>
<STRUCT>
<NAME>GtkNotebook</NAME>
struct _GtkNotebook
{
  /*< private >*/
  GtkContainer container;

  GtkNotebookPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkNotebookClass</NAME>
struct _GtkNotebookClass
{
  GtkContainerClass parent_class;

  void (* switch_page)       (GtkNotebook     *notebook,
                              GtkWidget       *page,
			      guint            page_num);

  /* Action signals for keybindings */
  gboolean (* select_page)     (GtkNotebook       *notebook,
                                gboolean           move_focus);
  gboolean (* focus_tab)       (GtkNotebook       *notebook,
                                GtkNotebookTab     type);
  gboolean (* change_current_page) (GtkNotebook   *notebook,
                                gint               offset);
  void (* move_focus_out)      (GtkNotebook       *notebook,
				GtkDirectionType   direction);
  gboolean (* reorder_tab)     (GtkNotebook       *notebook,
				GtkDirectionType   direction,
				gboolean           move_to_last);

  /* More vfuncs */
  gint (* insert_page)         (GtkNotebook       *notebook,
			        GtkWidget         *child,
				GtkWidget         *tab_label,
				GtkWidget         *menu_label,
				gint               position);

  GtkNotebook * (* create_window) (GtkNotebook       *notebook,
                                   GtkWidget         *page,
                                   gint               x,
                                   gint               y);

  void (* page_reordered)      (GtkNotebook     *notebook,
                                GtkWidget       *child,
                                guint            page_num);

  void (* page_removed)        (GtkNotebook     *notebook,
                                GtkWidget       *child,
                                guint            page_num);

  void (* page_added)          (GtkNotebook     *notebook,
                                GtkWidget       *child,
                                guint            page_num);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_notebook_get_type</NAME>
<RETURNS>GType    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_append_page</NAME>
<RETURNS>gint  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_append_page_menu</NAME>
<RETURNS>gint  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label, GtkWidget   *menu_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_prepend_page</NAME>
<RETURNS>gint  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_prepend_page_menu</NAME>
<RETURNS>gint  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label, GtkWidget   *menu_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_insert_page</NAME>
<RETURNS>gint  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label, gint         position
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_insert_page_menu</NAME>
<RETURNS>gint  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label, GtkWidget   *menu_label, gint         position
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_remove_page</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, gint         page_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_group_name</NAME>
<RETURNS>void          </RETURNS>
GtkNotebook *notebook, const gchar *group_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_group_name</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_current_page</NAME>
<RETURNS>gint        </RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_nth_page</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkNotebook *notebook, gint         page_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_n_pages</NAME>
<RETURNS>gint        </RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_page_num</NAME>
<RETURNS>gint        </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_current_page</NAME>
<RETURNS>void        </RETURNS>
GtkNotebook *notebook, gint         page_num
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_next_page</NAME>
<RETURNS>void        </RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_prev_page</NAME>
<RETURNS>void        </RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_show_border</NAME>
<RETURNS>void      </RETURNS>
GtkNotebook     *notebook, gboolean         show_border
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_show_border</NAME>
<RETURNS>gboolean  </RETURNS>
GtkNotebook     *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_show_tabs</NAME>
<RETURNS>void      </RETURNS>
GtkNotebook     *notebook, gboolean         show_tabs
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_show_tabs</NAME>
<RETURNS>gboolean  </RETURNS>
GtkNotebook     *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_tab_pos</NAME>
<RETURNS>void      </RETURNS>
GtkNotebook     *notebook, GtkPositionType  pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_pos</NAME>
<RETURNS>GtkPositionType  </RETURNS>
GtkNotebook     *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_scrollable</NAME>
<RETURNS>void      </RETURNS>
GtkNotebook     *notebook, gboolean         scrollable
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_scrollable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkNotebook     *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_hborder</NAME>
<DEPRECATED/>
<RETURNS>guint16   </RETURNS>
GtkNotebook     *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_vborder</NAME>
<DEPRECATED/>
<RETURNS>guint16   </RETURNS>
GtkNotebook     *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_popup_enable</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_popup_disable</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_label</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_tab_label</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *tab_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_tab_label_text</NAME>
<RETURNS>void           </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, const gchar *tab_text
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_label_text</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_menu_label</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_menu_label</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, GtkWidget   *menu_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_menu_label_text</NAME>
<RETURNS>void           </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, const gchar *menu_text
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_menu_label_text</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_reorder_child</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, gint         position
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_reorderable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_tab_reorderable</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, gboolean     reorderable
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_tab_detachable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_tab_detachable</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child, gboolean     detachable
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_detach_tab</NAME>
<RETURNS>void  </RETURNS>
GtkNotebook *notebook, GtkWidget   *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_get_action_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkNotebook *notebook, GtkPackType  pack_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_notebook_set_action_widget</NAME>
<RETURNS>void        </RETURNS>
GtkNotebook *notebook, GtkWidget   *widget, GtkPackType  pack_type
</FUNCTION>
<STRUCT>
<NAME>GtkNotebookPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_OFFSCREEN_WINDOW</NAME>
#define GTK_TYPE_OFFSCREEN_WINDOW         (gtk_offscreen_window_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_OFFSCREEN_WINDOW</NAME>
#define GTK_OFFSCREEN_WINDOW(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_OFFSCREEN_WINDOW, GtkOffscreenWindow))
</MACRO>
<MACRO>
<NAME>GTK_OFFSCREEN_WINDOW_CLASS</NAME>
#define GTK_OFFSCREEN_WINDOW_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_OFFSCREEN_WINDOW, GtkOffscreenWindowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_OFFSCREEN_WINDOW</NAME>
#define GTK_IS_OFFSCREEN_WINDOW(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_OFFSCREEN_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_IS_OFFSCREEN_WINDOW_CLASS</NAME>
#define GTK_IS_OFFSCREEN_WINDOW_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_OFFSCREEN_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_OFFSCREEN_WINDOW_GET_CLASS</NAME>
#define GTK_OFFSCREEN_WINDOW_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_OFFSCREEN_WINDOW, GtkOffscreenWindowClass))
</MACRO>
<STRUCT>
<NAME>GtkOffscreenWindow</NAME>
struct _GtkOffscreenWindow
{
  GtkWindow parent_object;
};
</STRUCT>
<STRUCT>
<NAME>GtkOffscreenWindowClass</NAME>
struct _GtkOffscreenWindowClass
{
  GtkWindowClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_offscreen_window_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_offscreen_window_new</NAME>
<RETURNS>GtkWidget        *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_offscreen_window_get_surface</NAME>
<RETURNS>cairo_surface_t  *</RETURNS>
GtkOffscreenWindow *offscreen
</FUNCTION>
<FUNCTION>
<NAME>gtk_offscreen_window_get_pixbuf</NAME>
<RETURNS>GdkPixbuf        *</RETURNS>
GtkOffscreenWindow *offscreen
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_ORIENTABLE</NAME>
#define GTK_TYPE_ORIENTABLE             (gtk_orientable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ORIENTABLE</NAME>
#define GTK_ORIENTABLE(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ORIENTABLE, GtkOrientable))
</MACRO>
<MACRO>
<NAME>GTK_ORIENTABLE_CLASS</NAME>
#define GTK_ORIENTABLE_CLASS(vtable)    (G_TYPE_CHECK_CLASS_CAST ((vtable), GTK_TYPE_ORIENTABLE, GtkOrientableIface))
</MACRO>
<MACRO>
<NAME>GTK_IS_ORIENTABLE</NAME>
#define GTK_IS_ORIENTABLE(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ORIENTABLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_ORIENTABLE_CLASS</NAME>
#define GTK_IS_ORIENTABLE_CLASS(vtable) (G_TYPE_CHECK_CLASS_TYPE ((vtable), GTK_TYPE_ORIENTABLE))
</MACRO>
<MACRO>
<NAME>GTK_ORIENTABLE_GET_IFACE</NAME>
#define GTK_ORIENTABLE_GET_IFACE(inst)  (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_ORIENTABLE, GtkOrientableIface))
</MACRO>
<STRUCT>
<NAME>GtkOrientableIface</NAME>
struct _GtkOrientableIface
{
  GTypeInterface base_iface;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_orientable_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_orientable_set_orientation</NAME>
<RETURNS>void            </RETURNS>
GtkOrientable  *orientable, GtkOrientation  orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_orientable_get_orientation</NAME>
<RETURNS>GtkOrientation  </RETURNS>
GtkOrientable  *orientable
</FUNCTION>
<STRUCT>
<NAME>GtkOrientable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_OVERLAY</NAME>
#define GTK_TYPE_OVERLAY             (gtk_overlay_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_OVERLAY</NAME>
#define GTK_OVERLAY(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_OVERLAY, GtkOverlay))
</MACRO>
<MACRO>
<NAME>GTK_OVERLAY_CLASS</NAME>
#define GTK_OVERLAY_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_OVERLAY, GtkOverlayClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_OVERLAY</NAME>
#define GTK_IS_OVERLAY(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_OVERLAY))
</MACRO>
<MACRO>
<NAME>GTK_IS_OVERLAY_CLASS</NAME>
#define GTK_IS_OVERLAY_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_OVERLAY))
</MACRO>
<MACRO>
<NAME>GTK_OVERLAY_GET_CLASS</NAME>
#define GTK_OVERLAY_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_OVERLAY, GtkOverlayClass))
</MACRO>
<STRUCT>
<NAME>GtkOverlay</NAME>
struct _GtkOverlay
{
  GtkBin parent;

  GtkOverlayPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkOverlayClass</NAME>
struct _GtkOverlayClass
{
  GtkBinClass parent_class;

  /*< public >*/

  gboolean (*get_child_position) (GtkOverlay    *overlay,
                                  GtkWidget     *widget,
                                  GtkAllocation *allocation);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_overlay_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_overlay_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_overlay_add_overlay</NAME>
<RETURNS>void        </RETURNS>
GtkOverlay *overlay, GtkWidget  *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_overlay_reorder_overlay</NAME>
<RETURNS>void        </RETURNS>
GtkOverlay     *overlay, GtkWidget      *child, gint            position
</FUNCTION>
<FUNCTION>
<NAME>gtk_overlay_get_overlay_pass_through</NAME>
<RETURNS>gboolean    </RETURNS>
GtkOverlay *overlay, GtkWidget  *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_overlay_set_overlay_pass_through</NAME>
<RETURNS>void        </RETURNS>
GtkOverlay *overlay, GtkWidget  *widget, gboolean    pass_through
</FUNCTION>
<STRUCT>
<NAME>GtkOverlayPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PAD_CONTROLLER</NAME>
#define GTK_TYPE_PAD_CONTROLLER         (gtk_pad_controller_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PAD_CONTROLLER</NAME>
#define GTK_PAD_CONTROLLER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_PAD_CONTROLLER, GtkPadController))
</MACRO>
<MACRO>
<NAME>GTK_PAD_CONTROLLER_CLASS</NAME>
#define GTK_PAD_CONTROLLER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_PAD_CONTROLLER, GtkPadControllerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PAD_CONTROLLER</NAME>
#define GTK_IS_PAD_CONTROLLER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_PAD_CONTROLLER))
</MACRO>
<MACRO>
<NAME>GTK_IS_PAD_CONTROLLER_CLASS</NAME>
#define GTK_IS_PAD_CONTROLLER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_PAD_CONTROLLER))
</MACRO>
<MACRO>
<NAME>GTK_PAD_CONTROLLER_GET_CLASS</NAME>
#define GTK_PAD_CONTROLLER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_PAD_CONTROLLER, GtkPadControllerClass))
</MACRO>
<ENUM>
<NAME>GtkPadActionType</NAME>
typedef enum {
  GTK_PAD_ACTION_BUTTON,
  GTK_PAD_ACTION_RING,
  GTK_PAD_ACTION_STRIP
} GtkPadActionType;
</ENUM>
<STRUCT>
<NAME>GtkPadActionEntry</NAME>
struct _GtkPadActionEntry {
  GtkPadActionType type;
  gint index;
  gint mode;
  gchar *label;
  gchar *action_name;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_pad_controller_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_pad_controller_new</NAME>
<RETURNS>GtkPadController  *</RETURNS>
GtkWindow        *window, GActionGroup     *group, GdkDevice        *pad
</FUNCTION>
<FUNCTION>
<NAME>gtk_pad_controller_set_action_entries</NAME>
<RETURNS>void   </RETURNS>
GtkPadController        *controller, const GtkPadActionEntry *entries, gint                     n_entries
</FUNCTION>
<FUNCTION>
<NAME>gtk_pad_controller_set_action</NAME>
<RETURNS>void   </RETURNS>
GtkPadController *controller, GtkPadActionType  type, gint              index, gint              mode, const gchar      *label, const gchar      *action_name
</FUNCTION>
<STRUCT>
<NAME>GtkPadController</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkPadControllerClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PAGE_SETUP</NAME>
#define GTK_TYPE_PAGE_SETUP    (gtk_page_setup_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PAGE_SETUP</NAME>
#define GTK_PAGE_SETUP(obj)    (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PAGE_SETUP, GtkPageSetup))
</MACRO>
<MACRO>
<NAME>GTK_IS_PAGE_SETUP</NAME>
#define GTK_IS_PAGE_SETUP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PAGE_SETUP))
</MACRO>
<FUNCTION>
<NAME>gtk_page_setup_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_new</NAME>
<RETURNS>GtkPageSetup  *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_copy</NAME>
<RETURNS>GtkPageSetup  *     </RETURNS>
GtkPageSetup       *other
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_orientation</NAME>
<RETURNS>GtkPageOrientation  </RETURNS>
GtkPageSetup       *setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_orientation</NAME>
<RETURNS>void                </RETURNS>
GtkPageSetup       *setup, GtkPageOrientation  orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_paper_size</NAME>
<RETURNS>GtkPaperSize  *     </RETURNS>
GtkPageSetup       *setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_paper_size</NAME>
<RETURNS>void                </RETURNS>
GtkPageSetup       *setup, GtkPaperSize       *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_top_margin</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_top_margin</NAME>
<RETURNS>void                </RETURNS>
GtkPageSetup       *setup, gdouble             margin, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_bottom_margin</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_bottom_margin</NAME>
<RETURNS>void                </RETURNS>
GtkPageSetup       *setup, gdouble             margin, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_left_margin</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_left_margin</NAME>
<RETURNS>void                </RETURNS>
GtkPageSetup       *setup, gdouble             margin, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_right_margin</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_right_margin</NAME>
<RETURNS>void                </RETURNS>
GtkPageSetup       *setup, gdouble             margin, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_set_paper_size_and_default_margins</NAME>
<RETURNS>void  </RETURNS>
GtkPageSetup    *setup, GtkPaperSize    *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_paper_width</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_paper_height</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_page_width</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_get_page_height</NAME>
<RETURNS>gdouble             </RETURNS>
GtkPageSetup       *setup, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_new_from_file</NAME>
<RETURNS>GtkPageSetup 	  *</RETURNS>
const gchar         *file_name, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_load_file</NAME>
<RETURNS>gboolean 	   </RETURNS>
GtkPageSetup        *setup, const char          *file_name, GError             **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_to_file</NAME>
<RETURNS>gboolean 	   </RETURNS>
GtkPageSetup        *setup, const char          *file_name, GError             **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_new_from_key_file</NAME>
<RETURNS>GtkPageSetup 	  *</RETURNS>
GKeyFile            *key_file, const gchar         *group_name, GError             **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_load_key_file</NAME>
<RETURNS>gboolean            </RETURNS>
GtkPageSetup        *setup, GKeyFile            *key_file, const gchar         *group_name, GError             **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_to_key_file</NAME>
<RETURNS>void 		   </RETURNS>
GtkPageSetup        *setup, GKeyFile            *key_file, const gchar         *group_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_to_gvariant</NAME>
<RETURNS>GVariant           *</RETURNS>
GtkPageSetup        *setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_new_from_gvariant</NAME>
<RETURNS>GtkPageSetup       *</RETURNS>
GVariant            *variant
</FUNCTION>
<STRUCT>
<NAME>GtkPageSetup</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PAGE_SETUP_UNIX_DIALOG</NAME>
#define GTK_TYPE_PAGE_SETUP_UNIX_DIALOG                  (gtk_page_setup_unix_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PAGE_SETUP_UNIX_DIALOG</NAME>
#define GTK_PAGE_SETUP_UNIX_DIALOG(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PAGE_SETUP_UNIX_DIALOG, GtkPageSetupUnixDialog))
</MACRO>
<MACRO>
<NAME>GTK_PAGE_SETUP_UNIX_DIALOG_CLASS</NAME>
#define GTK_PAGE_SETUP_UNIX_DIALOG_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PAGE_SETUP_UNIX_DIALOG, GtkPageSetupUnixDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PAGE_SETUP_UNIX_DIALOG</NAME>
#define GTK_IS_PAGE_SETUP_UNIX_DIALOG(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PAGE_SETUP_UNIX_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_PAGE_SETUP_UNIX_DIALOG_CLASS</NAME>
#define GTK_IS_PAGE_SETUP_UNIX_DIALOG_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PAGE_SETUP_UNIX_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_PAGE_SETUP_UNIX_DIALOG_GET_CLASS</NAME>
#define GTK_PAGE_SETUP_UNIX_DIALOG_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PAGE_SETUP_UNIX_DIALOG, GtkPageSetupUnixDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkPageSetupUnixDialog</NAME>
struct _GtkPageSetupUnixDialog
{
  GtkDialog parent_instance;

  GtkPageSetupUnixDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPageSetupUnixDialogClass</NAME>
struct _GtkPageSetupUnixDialogClass
{
  GtkDialogClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_page_setup_unix_dialog_get_type</NAME>
<RETURNS>GType  		  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_unix_dialog_new</NAME>
<RETURNS>GtkWidget  *       </RETURNS>
const gchar            *title, GtkWindow              *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_unix_dialog_set_page_setup</NAME>
<RETURNS>void               </RETURNS>
GtkPageSetupUnixDialog *dialog, GtkPageSetup           *page_setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_unix_dialog_get_page_setup</NAME>
<RETURNS>GtkPageSetup  *    </RETURNS>
GtkPageSetupUnixDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_unix_dialog_set_print_settings</NAME>
<RETURNS>void               </RETURNS>
GtkPageSetupUnixDialog *dialog, GtkPrintSettings       *print_settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_page_setup_unix_dialog_get_print_settings</NAME>
<RETURNS>GtkPrintSettings  *</RETURNS>
GtkPageSetupUnixDialog *dialog
</FUNCTION>
<STRUCT>
<NAME>GtkPageSetupUnixDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PANED</NAME>
#define GTK_TYPE_PANED                  (gtk_paned_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PANED</NAME>
#define GTK_PANED(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PANED, GtkPaned))
</MACRO>
<MACRO>
<NAME>GTK_PANED_CLASS</NAME>
#define GTK_PANED_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PANED, GtkPanedClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PANED</NAME>
#define GTK_IS_PANED(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PANED))
</MACRO>
<MACRO>
<NAME>GTK_IS_PANED_CLASS</NAME>
#define GTK_IS_PANED_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PANED))
</MACRO>
<MACRO>
<NAME>GTK_PANED_GET_CLASS</NAME>
#define GTK_PANED_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PANED, GtkPanedClass))
</MACRO>
<STRUCT>
<NAME>GtkPaned</NAME>
struct _GtkPaned
{
  GtkContainer container;

  /*< private >*/
  GtkPanedPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPanedClass</NAME>
struct _GtkPanedClass
{
  GtkContainerClass parent_class;

  gboolean (* cycle_child_focus)   (GtkPaned      *paned,
				    gboolean       reverse);
  gboolean (* toggle_handle_focus) (GtkPaned      *paned);
  gboolean (* move_handle)         (GtkPaned      *paned,
				    GtkScrollType  scroll);
  gboolean (* cycle_handle_focus)  (GtkPaned      *paned,
				    gboolean       reverse);
  gboolean (* accept_position)     (GtkPaned	  *paned);
  gboolean (* cancel_position)     (GtkPaned	  *paned);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_paned_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkOrientation orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_add1</NAME>
<RETURNS>void         </RETURNS>
GtkPaned       *paned, GtkWidget      *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_add2</NAME>
<RETURNS>void         </RETURNS>
GtkPaned       *paned, GtkWidget      *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_pack1</NAME>
<RETURNS>void         </RETURNS>
GtkPaned       *paned, GtkWidget      *child, gboolean        resize, gboolean        shrink
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_pack2</NAME>
<RETURNS>void         </RETURNS>
GtkPaned       *paned, GtkWidget      *child, gboolean        resize, gboolean        shrink
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_get_position</NAME>
<RETURNS>gint         </RETURNS>
GtkPaned       *paned
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_set_position</NAME>
<RETURNS>void         </RETURNS>
GtkPaned       *paned, gint            position
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_get_child1</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkPaned       *paned
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_get_child2</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkPaned       *paned
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_get_handle_window</NAME>
<RETURNS>GdkWindow  * </RETURNS>
GtkPaned  *paned
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_set_wide_handle</NAME>
<RETURNS>void         </RETURNS>
GtkPaned    *paned, gboolean     wide
</FUNCTION>
<FUNCTION>
<NAME>gtk_paned_get_wide_handle</NAME>
<RETURNS>gboolean     </RETURNS>
GtkPaned    *paned
</FUNCTION>
<STRUCT>
<NAME>GtkPanedPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PAPER_SIZE</NAME>
#define GTK_TYPE_PAPER_SIZE    (gtk_paper_size_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_A3</NAME>
#define GTK_PAPER_NAME_A3 "iso_a3"
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_A4</NAME>
#define GTK_PAPER_NAME_A4 "iso_a4"
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_A5</NAME>
#define GTK_PAPER_NAME_A5 "iso_a5"
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_B5</NAME>
#define GTK_PAPER_NAME_B5 "iso_b5"
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_LETTER</NAME>
#define GTK_PAPER_NAME_LETTER "na_letter"
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_EXECUTIVE</NAME>
#define GTK_PAPER_NAME_EXECUTIVE "na_executive"
</MACRO>
<MACRO>
<NAME>GTK_PAPER_NAME_LEGAL</NAME>
#define GTK_PAPER_NAME_LEGAL "na_legal"
</MACRO>
<FUNCTION>
<NAME>gtk_paper_size_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_new</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
const gchar  *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_new_from_ppd</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
const gchar  *ppd_name, const gchar  *ppd_display_name, gdouble       width, gdouble       height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_new_from_ipp</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
const gchar  *ipp_name, gdouble       width, gdouble       height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_new_custom</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
const gchar  *name, const gchar  *display_name, gdouble       width, gdouble       height, GtkUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_copy</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
GtkPaperSize *other
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_free</NAME>
<RETURNS>void           </RETURNS>
GtkPaperSize *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_is_equal</NAME>
<RETURNS>gboolean       </RETURNS>
GtkPaperSize *size1, GtkPaperSize *size2
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_paper_sizes</NAME>
<RETURNS>GList         *</RETURNS>
gboolean include_custom
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_name</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkPaperSize *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_display_name</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkPaperSize *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_ppd_name</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkPaperSize *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_width</NAME>
<RETURNS>gdouble   </RETURNS>
GtkPaperSize *size, GtkUnit unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_height</NAME>
<RETURNS>gdouble   </RETURNS>
GtkPaperSize *size, GtkUnit unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_is_custom</NAME>
<RETURNS>gboolean  </RETURNS>
GtkPaperSize *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_is_ipp</NAME>
<RETURNS>gboolean  </RETURNS>
GtkPaperSize *size
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_set_size</NAME>
<RETURNS>void     </RETURNS>
GtkPaperSize *size, gdouble       width, gdouble       height, GtkUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_default_top_margin</NAME>
<RETURNS>gdouble  </RETURNS>
GtkPaperSize *size, GtkUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_default_bottom_margin</NAME>
<RETURNS>gdouble  </RETURNS>
GtkPaperSize *size, GtkUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_default_left_margin</NAME>
<RETURNS>gdouble  </RETURNS>
GtkPaperSize *size, GtkUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_default_right_margin</NAME>
<RETURNS>gdouble  </RETURNS>
GtkPaperSize *size, GtkUnit       unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_get_default</NAME>
<RETURNS>const gchar  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_new_from_key_file</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
GKeyFile    *key_file, const gchar *group_name, GError     **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_to_key_file</NAME>
<RETURNS>void      </RETURNS>
GtkPaperSize *size, GKeyFile     *key_file, const gchar  *group_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_new_from_gvariant</NAME>
<RETURNS>GtkPaperSize  *</RETURNS>
GVariant     *variant
</FUNCTION>
<FUNCTION>
<NAME>gtk_paper_size_to_gvariant</NAME>
<RETURNS>GVariant      *</RETURNS>
GtkPaperSize *paper_size
</FUNCTION>
<STRUCT>
<NAME>GtkPaperSize</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PLACES_SIDEBAR</NAME>
#define GTK_TYPE_PLACES_SIDEBAR			(gtk_places_sidebar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PLACES_SIDEBAR</NAME>
#define GTK_PLACES_SIDEBAR(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PLACES_SIDEBAR, GtkPlacesSidebar))
</MACRO>
<MACRO>
<NAME>GTK_PLACES_SIDEBAR_CLASS</NAME>
#define GTK_PLACES_SIDEBAR_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PLACES_SIDEBAR, GtkPlacesSidebarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PLACES_SIDEBAR</NAME>
#define GTK_IS_PLACES_SIDEBAR(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PLACES_SIDEBAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_PLACES_SIDEBAR_CLASS</NAME>
#define GTK_IS_PLACES_SIDEBAR_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PLACES_SIDEBAR))
</MACRO>
<MACRO>
<NAME>GTK_PLACES_SIDEBAR_GET_CLASS</NAME>
#define GTK_PLACES_SIDEBAR_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PLACES_SIDEBAR, GtkPlacesSidebarClass))
</MACRO>
<ENUM>
<NAME>GtkPlacesOpenFlags</NAME>
typedef enum {
  GTK_PLACES_OPEN_NORMAL     = 1 << 0,
  GTK_PLACES_OPEN_NEW_TAB    = 1 << 1,
  GTK_PLACES_OPEN_NEW_WINDOW = 1 << 2
} GtkPlacesOpenFlags;
</ENUM>
<FUNCTION>
<NAME>gtk_places_sidebar_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_new</NAME>
<RETURNS>GtkWidget  *        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_open_flags</NAME>
<RETURNS>GtkPlacesOpenFlags  </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_open_flags</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, GtkPlacesOpenFlags  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_location</NAME>
<RETURNS>GFile  *            </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_location</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, GFile              *location
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_recent</NAME>
<RETURNS>gboolean            </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_recent</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_recent
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_desktop</NAME>
<RETURNS>gboolean            </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_desktop</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_desktop
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_connect_to_server</NAME>
<DEPRECATED/>
<RETURNS>gboolean            </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_connect_to_server</NAME>
<DEPRECATED/>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_connect_to_server
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_enter_location</NAME>
<RETURNS>gboolean            </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_enter_location</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_enter_location
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_local_only</NAME>
<RETURNS>void                  </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            local_only
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_local_only</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_add_shortcut</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, GFile              *location
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_remove_shortcut</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, GFile              *location
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_list_shortcuts</NAME>
<RETURNS>GSList  *           </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_nth_bookmark</NAME>
<RETURNS>GFile  *            </RETURNS>
GtkPlacesSidebar   *sidebar, gint                n
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_drop_targets_visible</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            visible, GdkDragContext     *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_trash</NAME>
<RETURNS>gboolean            </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_trash</NAME>
<RETURNS>void                </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_trash
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_other_locations</NAME>
<RETURNS>void                  </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_other_locations
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_other_locations</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_set_show_starred_location</NAME>
<RETURNS>void                  </RETURNS>
GtkPlacesSidebar   *sidebar, gboolean            show_starred_location
</FUNCTION>
<FUNCTION>
<NAME>gtk_places_sidebar_get_show_starred_location</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPlacesSidebar   *sidebar
</FUNCTION>
<STRUCT>
<NAME>GtkPlacesSidebar</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkPlacesSidebarClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PLUG</NAME>
#define GTK_TYPE_PLUG            (gtk_plug_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PLUG</NAME>
#define GTK_PLUG(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PLUG, GtkPlug))
</MACRO>
<MACRO>
<NAME>GTK_PLUG_CLASS</NAME>
#define GTK_PLUG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PLUG, GtkPlugClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PLUG</NAME>
#define GTK_IS_PLUG(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PLUG))
</MACRO>
<MACRO>
<NAME>GTK_IS_PLUG_CLASS</NAME>
#define GTK_IS_PLUG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PLUG))
</MACRO>
<MACRO>
<NAME>GTK_PLUG_GET_CLASS</NAME>
#define GTK_PLUG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PLUG, GtkPlugClass))
</MACRO>
<STRUCT>
<NAME>GtkPlug</NAME>
struct _GtkPlug
{
  GtkWindow window;

  GtkPlugPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPlugClass</NAME>
struct _GtkPlugClass
{
  GtkWindowClass parent_class;

  void (*embedded) (GtkPlug *plug);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_plug_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_construct</NAME>
<RETURNS>void        </RETURNS>
GtkPlug    *plug, Window      socket_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
Window      socket_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_construct_for_display</NAME>
<RETURNS>void        </RETURNS>
GtkPlug    *plug, GdkDisplay *display, Window      socket_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_new_for_display</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GdkDisplay *display, Window      socket_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_get_id</NAME>
<RETURNS>Window      </RETURNS>
GtkPlug    *plug
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_get_embedded</NAME>
<RETURNS>gboolean    </RETURNS>
GtkPlug    *plug
</FUNCTION>
<FUNCTION>
<NAME>gtk_plug_get_socket_window</NAME>
<RETURNS>GdkWindow  *</RETURNS>
GtkPlug    *plug
</FUNCTION>
<STRUCT>
<NAME>GtkPlugPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_POPOVER</NAME>
#define GTK_TYPE_POPOVER           (gtk_popover_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_POPOVER</NAME>
#define GTK_POPOVER(o)             (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_POPOVER, GtkPopover))
</MACRO>
<MACRO>
<NAME>GTK_POPOVER_CLASS</NAME>
#define GTK_POPOVER_CLASS(c)       (G_TYPE_CHECK_CLASS_CAST ((c), GTK_TYPE_POPOVER, GtkPopoverClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_POPOVER</NAME>
#define GTK_IS_POPOVER(o)          (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_POPOVER))
</MACRO>
<MACRO>
<NAME>GTK_IS_POPOVER_CLASS</NAME>
#define GTK_IS_POPOVER_CLASS(o)    (G_TYPE_CHECK_CLASS_TYPE ((o), GTK_TYPE_POPOVER))
</MACRO>
<MACRO>
<NAME>GTK_POPOVER_GET_CLASS</NAME>
#define GTK_POPOVER_GET_CLASS(o)   (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_POPOVER, GtkPopoverClass))
</MACRO>
<STRUCT>
<NAME>GtkPopover</NAME>
struct _GtkPopover
{
  GtkBin parent_instance;

  /*< private >*/

  GtkPopoverPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPopoverClass</NAME>
struct _GtkPopoverClass
{
  GtkBinClass parent_class;

  void (* closed) (GtkPopover *popover);

  /*< private >*/

  /* Padding for future expansion */
  gpointer reserved[10];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_popover_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_new</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkWidget             *relative_to
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_new_from_model</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkWidget             *relative_to, GMenuModel            *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_relative_to</NAME>
<RETURNS>void             </RETURNS>
GtkPopover            *popover, GtkWidget             *relative_to
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_relative_to</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkPopover            *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_pointing_to</NAME>
<RETURNS>void             </RETURNS>
GtkPopover            *popover, const GdkRectangle    *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_pointing_to</NAME>
<RETURNS>gboolean         </RETURNS>
GtkPopover            *popover, GdkRectangle          *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_position</NAME>
<RETURNS>void             </RETURNS>
GtkPopover            *popover, GtkPositionType        position
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_position</NAME>
<RETURNS>GtkPositionType  </RETURNS>
GtkPopover            *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_modal</NAME>
<RETURNS>void             </RETURNS>
GtkPopover            *popover, gboolean               modal
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_modal</NAME>
<RETURNS>gboolean         </RETURNS>
GtkPopover            *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_bind_model</NAME>
<RETURNS>void             </RETURNS>
GtkPopover            *popover, GMenuModel            *model, const gchar           *action_namespace
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_transitions_enabled</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkPopover *popover, gboolean    transitions_enabled
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_transitions_enabled</NAME>
<DEPRECATED/>
<RETURNS>gboolean         </RETURNS>
GtkPopover *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_default_widget</NAME>
<RETURNS>void             </RETURNS>
GtkPopover *popover, GtkWidget  *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_default_widget</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkPopover *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_set_constrain_to</NAME>
<RETURNS>void                  </RETURNS>
GtkPopover           *popover, GtkPopoverConstraint  constraint
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_get_constrain_to</NAME>
<RETURNS>GtkPopoverConstraint  </RETURNS>
GtkPopover           *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_popup</NAME>
<RETURNS>void                  </RETURNS>
GtkPopover *popover
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_popdown</NAME>
<RETURNS>void                  </RETURNS>
GtkPopover *popover
</FUNCTION>
<STRUCT>
<NAME>GtkPopoverPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_POPOVER_MENU</NAME>
#define GTK_TYPE_POPOVER_MENU           (gtk_popover_menu_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_POPOVER_MENU</NAME>
#define GTK_POPOVER_MENU(o)             (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_POPOVER_MENU, GtkPopoverMenu))
</MACRO>
<MACRO>
<NAME>GTK_POPOVER_MENU_CLASS</NAME>
#define GTK_POPOVER_MENU_CLASS(c)       (G_TYPE_CHECK_CLASS_CAST ((c), GTK_TYPE_POPOVER_MENU, GtkPopoverMenuClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_POPOVER_MENU</NAME>
#define GTK_IS_POPOVER_MENU(o)          (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_POPOVER_MENU))
</MACRO>
<MACRO>
<NAME>GTK_IS_POPOVER_MENU_CLASS</NAME>
#define GTK_IS_POPOVER_MENU_CLASS(o)    (G_TYPE_CHECK_CLASS_TYPE ((o), GTK_TYPE_POPOVER_MENU))
</MACRO>
<MACRO>
<NAME>GTK_POPOVER_MENU_GET_CLASS</NAME>
#define GTK_POPOVER_MENU_GET_CLASS(o)   (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_POPOVER_MENU, GtkPopoverMenuClass))
</MACRO>
<STRUCT>
<NAME>GtkPopoverMenuClass</NAME>
struct _GtkPopoverMenuClass
{
  GtkPopoverClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  gpointer reserved[10];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_popover_menu_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_menu_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_popover_menu_open_submenu</NAME>
<RETURNS>void         </RETURNS>
GtkPopoverMenu *popover, const gchar    *name
</FUNCTION>
<STRUCT>
<NAME>GtkPopoverMenu</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PRINT_CONTEXT</NAME>
#define GTK_TYPE_PRINT_CONTEXT    (gtk_print_context_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINT_CONTEXT</NAME>
#define GTK_PRINT_CONTEXT(obj)    (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINT_CONTEXT, GtkPrintContext))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_CONTEXT</NAME>
#define GTK_IS_PRINT_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINT_CONTEXT))
</MACRO>
<FUNCTION>
<NAME>gtk_print_context_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_cairo_context</NAME>
<RETURNS>cairo_t       *</RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_page_setup</NAME>
<RETURNS>GtkPageSetup  *</RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_width</NAME>
<RETURNS>gdouble        </RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_height</NAME>
<RETURNS>gdouble        </RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_dpi_x</NAME>
<RETURNS>gdouble        </RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_dpi_y</NAME>
<RETURNS>gdouble        </RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_hard_margins</NAME>
<RETURNS>gboolean       </RETURNS>
GtkPrintContext *context, gdouble         *top, gdouble         *bottom, gdouble         *left, gdouble         *right
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_get_pango_fontmap</NAME>
<RETURNS>PangoFontMap  *</RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_create_pango_context</NAME>
<RETURNS>PangoContext  *</RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_create_pango_layout</NAME>
<RETURNS>PangoLayout   *</RETURNS>
GtkPrintContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_context_set_cairo_context</NAME>
<RETURNS>void          </RETURNS>
GtkPrintContext *context, cairo_t         *cr, double           dpi_x, double           dpi_y
</FUNCTION>
<STRUCT>
<NAME>GtkPrintContext</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PRINT_CAPABILITIES</NAME>
#define GTK_TYPE_PRINT_CAPABILITIES (gtk_print_capabilities_get_type ())
</MACRO>
<ENUM>
<NAME>GtkPrintCapabilities</NAME>
typedef enum
{
  GTK_PRINT_CAPABILITY_PAGE_SET         = 1 << 0,
  GTK_PRINT_CAPABILITY_COPIES           = 1 << 1,
  GTK_PRINT_CAPABILITY_COLLATE          = 1 << 2,
  GTK_PRINT_CAPABILITY_REVERSE          = 1 << 3,
  GTK_PRINT_CAPABILITY_SCALE            = 1 << 4,
  GTK_PRINT_CAPABILITY_GENERATE_PDF     = 1 << 5,
  GTK_PRINT_CAPABILITY_GENERATE_PS      = 1 << 6,
  GTK_PRINT_CAPABILITY_PREVIEW          = 1 << 7,
  GTK_PRINT_CAPABILITY_NUMBER_UP        = 1 << 8,
  GTK_PRINT_CAPABILITY_NUMBER_UP_LAYOUT = 1 << 9
} GtkPrintCapabilities;
</ENUM>
<FUNCTION>
<NAME>gtk_print_capabilities_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_PRINTER</NAME>
#define GTK_TYPE_PRINTER                  (gtk_printer_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINTER</NAME>
#define GTK_PRINTER(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINTER, GtkPrinter))
</MACRO>
<MACRO>
<NAME>GTK_PRINTER_CLASS</NAME>
#define GTK_PRINTER_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PRINTER, GtkPrinterClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINTER</NAME>
#define GTK_IS_PRINTER(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINTER))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINTER_CLASS</NAME>
#define GTK_IS_PRINTER_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PRINTER))
</MACRO>
<MACRO>
<NAME>GTK_PRINTER_GET_CLASS</NAME>
#define GTK_PRINTER_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PRINTER, GtkPrinterClass))
</MACRO>
<STRUCT>
<NAME>GtkPrinter</NAME>
struct _GtkPrinter
{
  GObject parent_instance;

  /*< private >*/
  GtkPrinterPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPrinterClass</NAME>
struct _GtkPrinterClass
{
  GObjectClass parent_class;

  void (*details_acquired) (GtkPrinter *printer,
                            gboolean    success);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_printer_get_type</NAME>
<RETURNS>GType                     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_new</NAME>
<RETURNS>GtkPrinter               *</RETURNS>
const gchar     *name, GtkPrintBackend *backend, gboolean         virtual_
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_backend</NAME>
<RETURNS>GtkPrintBackend          *</RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_name</NAME>
<RETURNS>const gchar  *            </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_state_message</NAME>
<RETURNS>const gchar  *            </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_description</NAME>
<RETURNS>const gchar  *            </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_location</NAME>
<RETURNS>const gchar  *            </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_icon_name</NAME>
<RETURNS>const gchar  *            </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_job_count</NAME>
<RETURNS>gint                      </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_is_active</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_is_paused</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_is_accepting_jobs</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_is_virtual</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_is_default</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_accepts_pdf</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_accepts_ps</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_list_papers</NAME>
<RETURNS>GList                    *</RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_default_page_size</NAME>
<RETURNS>GtkPageSetup             *</RETURNS>
GtkPrinter      *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_compare</NAME>
<RETURNS>gint                      </RETURNS>
GtkPrinter *a, GtkPrinter *b
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_has_details</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter       *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_request_details</NAME>
<RETURNS>void                      </RETURNS>
GtkPrinter       *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_capabilities</NAME>
<RETURNS>GtkPrintCapabilities      </RETURNS>
GtkPrinter       *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_printer_get_hard_margins</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrinter       *printer, gdouble          *top, gdouble          *bottom, gdouble          *left, gdouble          *right
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkPrinterFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkPrinter *printer,
				    gpointer    data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_enumerate_printers</NAME>
<RETURNS>void                      </RETURNS>
GtkPrinterFunc   func, gpointer         data, GDestroyNotify   destroy, gboolean         wait
</FUNCTION>
<STRUCT>
<NAME>GtkPrintBackend</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkPrinterPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PRINT_JOB</NAME>
#define GTK_TYPE_PRINT_JOB                  (gtk_print_job_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINT_JOB</NAME>
#define GTK_PRINT_JOB(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINT_JOB, GtkPrintJob))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_JOB_CLASS</NAME>
#define GTK_PRINT_JOB_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PRINT_JOB, GtkPrintJobClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_JOB</NAME>
#define GTK_IS_PRINT_JOB(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINT_JOB))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_JOB_CLASS</NAME>
#define GTK_IS_PRINT_JOB_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PRINT_JOB))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_JOB_GET_CLASS</NAME>
#define GTK_PRINT_JOB_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PRINT_JOB, GtkPrintJobClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkPrintJobCompleteFunc</NAME>
<RETURNS>void </RETURNS>
GtkPrintJob  *print_job,
                                         gpointer      user_data,
                                         const GError *error
</USER_FUNCTION>
<STRUCT>
<NAME>GtkPrintJob</NAME>
struct _GtkPrintJob
{
  GObject parent_instance;

  GtkPrintJobPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPrintJobClass</NAME>
struct _GtkPrintJobClass
{
  GObjectClass parent_class;

  void (*status_changed) (GtkPrintJob *job);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_print_job_get_type</NAME>
<RETURNS>GType                     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_new</NAME>
<RETURNS>GtkPrintJob              *</RETURNS>
const gchar              *title, GtkPrinter               *printer, GtkPrintSettings         *settings, GtkPageSetup             *page_setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_settings</NAME>
<RETURNS>GtkPrintSettings         *</RETURNS>
GtkPrintJob              *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_printer</NAME>
<RETURNS>GtkPrinter               *</RETURNS>
GtkPrintJob              *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_title</NAME>
<RETURNS>const gchar  *            </RETURNS>
GtkPrintJob              *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_status</NAME>
<RETURNS>GtkPrintStatus            </RETURNS>
GtkPrintJob              *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_source_file</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrintJob              *job, const gchar              *filename, GError                  **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_source_fd</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrintJob              *job, int                       fd, GError                  **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_surface</NAME>
<RETURNS>cairo_surface_t          *</RETURNS>
GtkPrintJob              *job, GError                  **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_track_print_status</NAME>
<RETURNS>void                      </RETURNS>
GtkPrintJob              *job, gboolean                  track_status
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_track_print_status</NAME>
<RETURNS>gboolean                  </RETURNS>
GtkPrintJob              *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_send</NAME>
<RETURNS>void                      </RETURNS>
GtkPrintJob              *job, GtkPrintJobCompleteFunc   callback, gpointer                  user_data, GDestroyNotify            dnotify
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_pages</NAME>
<RETURNS>GtkPrintPages      </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_pages</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, GtkPrintPages      pages
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_page_ranges</NAME>
<RETURNS>GtkPageRange  *    </RETURNS>
GtkPrintJob       *job, gint              *n_ranges
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_page_ranges</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, GtkPageRange      *ranges, gint               n_ranges
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_page_set</NAME>
<RETURNS>GtkPageSet         </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_page_set</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, GtkPageSet         page_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_num_copies</NAME>
<RETURNS>gint               </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_num_copies</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, gint               num_copies
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_scale</NAME>
<RETURNS>gdouble            </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_scale</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, gdouble            scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_n_up</NAME>
<RETURNS>guint              </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_n_up</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, guint              n_up
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_n_up_layout</NAME>
<RETURNS>GtkNumberUpLayout  </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_n_up_layout</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, GtkNumberUpLayout  layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_rotate</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_rotate</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, gboolean           rotate
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_collate</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_collate</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, gboolean           collate
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_get_reverse</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintJob       *job
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_job_set_reverse</NAME>
<RETURNS>void               </RETURNS>
GtkPrintJob       *job, gboolean           reverse
</FUNCTION>
<STRUCT>
<NAME>GtkPrintJobPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_print_operation_portal_run_dialog</NAME>
<RETURNS>GtkPrintOperationResult  </RETURNS>
GtkPrintOperation           *op, gboolean                     show_dialog, GtkWindow                   *parent, gboolean                    *do_print
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_portal_run_dialog_async</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation           *op, gboolean                     show_dialog, GtkWindow                   *parent, GtkPrintOperationPrintFunc   print_cb
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_portal_launch_preview</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation           *op, cairo_surface_t             *surface, GtkWindow                   *parent, const char                  *filename
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_PRINT_OPERATION</NAME>
#define GTK_TYPE_PRINT_OPERATION                (gtk_print_operation_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINT_OPERATION</NAME>
#define GTK_PRINT_OPERATION(obj)                (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINT_OPERATION, GtkPrintOperation))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_OPERATION_CLASS</NAME>
#define GTK_PRINT_OPERATION_CLASS(klass)        (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PRINT_OPERATION, GtkPrintOperationClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_OPERATION</NAME>
#define GTK_IS_PRINT_OPERATION(obj)             (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINT_OPERATION))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_OPERATION_CLASS</NAME>
#define GTK_IS_PRINT_OPERATION_CLASS(klass)     (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PRINT_OPERATION))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_OPERATION_GET_CLASS</NAME>
#define GTK_PRINT_OPERATION_GET_CLASS(obj)      (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PRINT_OPERATION, GtkPrintOperationClass))
</MACRO>
<ENUM>
<NAME>GtkPrintStatus</NAME>
typedef enum {
  GTK_PRINT_STATUS_INITIAL,
  GTK_PRINT_STATUS_PREPARING,
  GTK_PRINT_STATUS_GENERATING_DATA,
  GTK_PRINT_STATUS_SENDING_DATA,
  GTK_PRINT_STATUS_PENDING,
  GTK_PRINT_STATUS_PENDING_ISSUE,
  GTK_PRINT_STATUS_PRINTING,
  GTK_PRINT_STATUS_FINISHED,
  GTK_PRINT_STATUS_FINISHED_ABORTED
} GtkPrintStatus;
</ENUM>
<ENUM>
<NAME>GtkPrintOperationResult</NAME>
typedef enum {
  GTK_PRINT_OPERATION_RESULT_ERROR,
  GTK_PRINT_OPERATION_RESULT_APPLY,
  GTK_PRINT_OPERATION_RESULT_CANCEL,
  GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
} GtkPrintOperationResult;
</ENUM>
<ENUM>
<NAME>GtkPrintOperationAction</NAME>
typedef enum {
  GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG,
  GTK_PRINT_OPERATION_ACTION_PRINT,
  GTK_PRINT_OPERATION_ACTION_PREVIEW,
  GTK_PRINT_OPERATION_ACTION_EXPORT
} GtkPrintOperationAction;
</ENUM>
<STRUCT>
<NAME>GtkPrintOperation</NAME>
struct _GtkPrintOperation
{
  GObject parent_instance;

  /*< private >*/
  GtkPrintOperationPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPrintOperationClass</NAME>
struct _GtkPrintOperationClass
{
  GObjectClass parent_class;

  /*< public >*/

  void     (*done)               (GtkPrintOperation *operation,
                                  GtkPrintOperationResult result);
  void     (*begin_print)        (GtkPrintOperation *operation,
                                  GtkPrintContext   *context);
  gboolean (*paginate)           (GtkPrintOperation *operation,
                                  GtkPrintContext   *context);
  void     (*request_page_setup) (GtkPrintOperation *operation,
                                  GtkPrintContext   *context,
                                  gint               page_nr,
                                  GtkPageSetup      *setup);
  void     (*draw_page)          (GtkPrintOperation *operation,
                                  GtkPrintContext   *context,
                                  gint               page_nr);
  void     (*end_print)          (GtkPrintOperation *operation,
                                  GtkPrintContext   *context);
  void     (*status_changed)     (GtkPrintOperation *operation);

  GtkWidget *(*create_custom_widget) (GtkPrintOperation *operation);
  void       (*custom_widget_apply)  (GtkPrintOperation *operation,
                                      GtkWidget         *widget);

  gboolean (*preview)        (GtkPrintOperation        *operation,
                              GtkPrintOperationPreview *preview,
                              GtkPrintContext          *context,
                              GtkWindow                *parent);

  void     (*update_custom_widget) (GtkPrintOperation *operation,
                                    GtkWidget         *widget,
                                    GtkPageSetup      *setup,
                                    GtkPrintSettings  *settings);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<MACRO>
<NAME>GTK_PRINT_ERROR</NAME>
#define GTK_PRINT_ERROR gtk_print_error_quark ()
</MACRO>
<ENUM>
<NAME>GtkPrintError</NAME>
typedef enum
{
  GTK_PRINT_ERROR_GENERAL,
  GTK_PRINT_ERROR_INTERNAL_ERROR,
  GTK_PRINT_ERROR_NOMEM,
  GTK_PRINT_ERROR_INVALID_FILE
} GtkPrintError;
</ENUM>
<FUNCTION>
<NAME>gtk_print_error_quark</NAME>
<RETURNS>GQuark  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_type</NAME>
<RETURNS>GType                    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_new</NAME>
<RETURNS>GtkPrintOperation  *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_default_page_setup</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, GtkPageSetup       *default_page_setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_default_page_setup</NAME>
<RETURNS>GtkPageSetup  *          </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_print_settings</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, GtkPrintSettings   *print_settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_print_settings</NAME>
<RETURNS>GtkPrintSettings  *      </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_job_name</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, const gchar        *job_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_n_pages</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gint                n_pages
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_current_page</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gint                current_page
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_use_full_page</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            full_page
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_unit</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_export_filename</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, const gchar        *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_track_print_status</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            track_status
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_show_progress</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            show_progress
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_allow_async</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            allow_async
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_custom_tab_label</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, const gchar        *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_run</NAME>
<RETURNS>GtkPrintOperationResult  </RETURNS>
GtkPrintOperation  *op, GtkPrintOperationAction action, GtkWindow          *parent, GError            **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_error</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, GError            **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_status</NAME>
<RETURNS>GtkPrintStatus           </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_status_string</NAME>
<RETURNS>const gchar  *           </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_is_finished</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_cancel</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_draw_page_finish</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_defer_drawing</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_support_selection</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            support_selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_support_selection</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_has_selection</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            has_selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_has_selection</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_set_embed_page_setup</NAME>
<RETURNS>void                     </RETURNS>
GtkPrintOperation  *op, gboolean            embed
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_embed_page_setup</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_get_n_pages_to_print</NAME>
<RETURNS>gint                     </RETURNS>
GtkPrintOperation  *op
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_run_page_setup_dialog</NAME>
<RETURNS>GtkPageSetup            *</RETURNS>
GtkWindow          *parent, GtkPageSetup       *page_setup, GtkPrintSettings   *settings
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkPageSetupDoneFunc</NAME>
<RETURNS>void </RETURNS>
GtkPageSetup *page_setup,
                                        gpointer      data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_print_run_page_setup_dialog_async</NAME>
<RETURNS>void                     </RETURNS>
GtkWindow            *parent, GtkPageSetup         *page_setup, GtkPrintSettings     *settings, GtkPageSetupDoneFunc  done_cb, gpointer              data
</FUNCTION>
<STRUCT>
<NAME>GtkPrintOperationPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PRINT_OPERATION_PREVIEW</NAME>
#define GTK_TYPE_PRINT_OPERATION_PREVIEW                  (gtk_print_operation_preview_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINT_OPERATION_PREVIEW</NAME>
#define GTK_PRINT_OPERATION_PREVIEW(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW, GtkPrintOperationPreview))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_OPERATION_PREVIEW</NAME>
#define GTK_IS_PRINT_OPERATION_PREVIEW(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_OPERATION_PREVIEW_GET_IFACE</NAME>
#define GTK_PRINT_OPERATION_PREVIEW_GET_IFACE(obj)        (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_PRINT_OPERATION_PREVIEW, GtkPrintOperationPreviewIface))
</MACRO>
<STRUCT>
<NAME>GtkPrintOperationPreviewIface</NAME>
struct _GtkPrintOperationPreviewIface
{
  GTypeInterface g_iface;

  /* signals */
  void              (*ready)          (GtkPrintOperationPreview *preview,
				       GtkPrintContext          *context);
  void              (*got_page_size)  (GtkPrintOperationPreview *preview,
				       GtkPrintContext          *context,
				       GtkPageSetup             *page_setup);

  /* methods */
  void              (*render_page)    (GtkPrintOperationPreview *preview,
				       gint                      page_nr);
  gboolean          (*is_selected)    (GtkPrintOperationPreview *preview,
				       gint                      page_nr);
  void              (*end_preview)    (GtkPrintOperationPreview *preview);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_print_operation_preview_get_type</NAME>
<RETURNS>GType    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_preview_render_page</NAME>
<RETURNS>void      </RETURNS>
GtkPrintOperationPreview *preview, gint                      page_nr
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_preview_end_preview</NAME>
<RETURNS>void      </RETURNS>
GtkPrintOperationPreview *preview
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_operation_preview_is_selected</NAME>
<RETURNS>gboolean  </RETURNS>
GtkPrintOperationPreview *preview, gint                      page_nr
</FUNCTION>
<STRUCT>
<NAME>GtkPrintOperationPreview</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PRINT_SETTINGS</NAME>
#define GTK_TYPE_PRINT_SETTINGS    (gtk_print_settings_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS</NAME>
#define GTK_PRINT_SETTINGS(obj)    (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINT_SETTINGS, GtkPrintSettings))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_SETTINGS</NAME>
#define GTK_IS_PRINT_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINT_SETTINGS))
</MACRO>
<USER_FUNCTION>
<NAME>GtkPrintSettingsFunc</NAME>
<RETURNS>void </RETURNS>
const gchar *key,
					const gchar *value,
					gpointer     user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkPageRange</NAME>
struct _GtkPageRange
{
  gint start;
  gint end;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_print_settings_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_new</NAME>
<RETURNS>GtkPrintSettings  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_copy</NAME>
<RETURNS>GtkPrintSettings  *</RETURNS>
GtkPrintSettings     *other
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_new_from_file</NAME>
<RETURNS>GtkPrintSettings  *</RETURNS>
const gchar          *file_name, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_load_file</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintSettings     *settings, const gchar          *file_name, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_to_file</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintSettings     *settings, const gchar          *file_name, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_new_from_key_file</NAME>
<RETURNS>GtkPrintSettings  *</RETURNS>
GKeyFile             *key_file, const gchar          *group_name, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_load_key_file</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintSettings     *settings, GKeyFile             *key_file, const gchar          *group_name, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_to_key_file</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, GKeyFile             *key_file, const gchar          *group_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_has_key</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintSettings     *settings, const gchar          *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get</NAME>
<RETURNS>const gchar  *     </RETURNS>
GtkPrintSettings     *settings, const gchar          *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, const gchar          *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_unset</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_foreach</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, GtkPrintSettingsFunc  func, gpointer              user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_bool</NAME>
<RETURNS>gboolean           </RETURNS>
GtkPrintSettings     *settings, const gchar          *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_bool</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, gboolean              value
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_double</NAME>
<RETURNS>gdouble            </RETURNS>
GtkPrintSettings     *settings, const gchar          *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_double_with_default</NAME>
<RETURNS>gdouble            </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, gdouble               def
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_double</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, gdouble               value
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_length</NAME>
<RETURNS>gdouble            </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, GtkUnit               unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_length</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, gdouble               value, GtkUnit               unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_int</NAME>
<RETURNS>gint               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_int_with_default</NAME>
<RETURNS>gint               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, gint                  def
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_int</NAME>
<RETURNS>void               </RETURNS>
GtkPrintSettings     *settings, const gchar          *key, gint                  value
</FUNCTION>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PRINTER</NAME>
#define GTK_PRINT_SETTINGS_PRINTER          "printer"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_ORIENTATION</NAME>
#define GTK_PRINT_SETTINGS_ORIENTATION      "orientation"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PAPER_FORMAT</NAME>
#define GTK_PRINT_SETTINGS_PAPER_FORMAT     "paper-format"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PAPER_WIDTH</NAME>
#define GTK_PRINT_SETTINGS_PAPER_WIDTH      "paper-width"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PAPER_HEIGHT</NAME>
#define GTK_PRINT_SETTINGS_PAPER_HEIGHT     "paper-height"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_N_COPIES</NAME>
#define GTK_PRINT_SETTINGS_N_COPIES         "n-copies"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_DEFAULT_SOURCE</NAME>
#define GTK_PRINT_SETTINGS_DEFAULT_SOURCE   "default-source"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_QUALITY</NAME>
#define GTK_PRINT_SETTINGS_QUALITY          "quality"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_RESOLUTION</NAME>
#define GTK_PRINT_SETTINGS_RESOLUTION       "resolution"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_USE_COLOR</NAME>
#define GTK_PRINT_SETTINGS_USE_COLOR        "use-color"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_DUPLEX</NAME>
#define GTK_PRINT_SETTINGS_DUPLEX           "duplex"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_COLLATE</NAME>
#define GTK_PRINT_SETTINGS_COLLATE          "collate"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_REVERSE</NAME>
#define GTK_PRINT_SETTINGS_REVERSE          "reverse"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_MEDIA_TYPE</NAME>
#define GTK_PRINT_SETTINGS_MEDIA_TYPE       "media-type"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_DITHER</NAME>
#define GTK_PRINT_SETTINGS_DITHER           "dither"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_SCALE</NAME>
#define GTK_PRINT_SETTINGS_SCALE            "scale"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PRINT_PAGES</NAME>
#define GTK_PRINT_SETTINGS_PRINT_PAGES      "print-pages"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PAGE_RANGES</NAME>
#define GTK_PRINT_SETTINGS_PAGE_RANGES      "page-ranges"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PAGE_SET</NAME>
#define GTK_PRINT_SETTINGS_PAGE_SET         "page-set"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_FINISHINGS</NAME>
#define GTK_PRINT_SETTINGS_FINISHINGS       "finishings"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_NUMBER_UP</NAME>
#define GTK_PRINT_SETTINGS_NUMBER_UP        "number-up"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT</NAME>
#define GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT "number-up-layout"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_OUTPUT_BIN</NAME>
#define GTK_PRINT_SETTINGS_OUTPUT_BIN       "output-bin"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_RESOLUTION_X</NAME>
#define GTK_PRINT_SETTINGS_RESOLUTION_X     "resolution-x"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_RESOLUTION_Y</NAME>
#define GTK_PRINT_SETTINGS_RESOLUTION_Y     "resolution-y"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_PRINTER_LPI</NAME>
#define GTK_PRINT_SETTINGS_PRINTER_LPI      "printer-lpi"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_OUTPUT_DIR</NAME>
#define GTK_PRINT_SETTINGS_OUTPUT_DIR       "output-dir"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_OUTPUT_BASENAME</NAME>
#define GTK_PRINT_SETTINGS_OUTPUT_BASENAME  "output-basename"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT</NAME>
#define GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT  "output-file-format"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_OUTPUT_URI</NAME>
#define GTK_PRINT_SETTINGS_OUTPUT_URI          "output-uri"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION</NAME>
#define GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION "win32-driver-version"
</MACRO>
<MACRO>
<NAME>GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA</NAME>
#define GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA   "win32-driver-extra"
</MACRO>
<FUNCTION>
<NAME>gtk_print_settings_get_printer</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_printer</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, const gchar        *printer
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_orientation</NAME>
<RETURNS>GtkPageOrientation     </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_orientation</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPageOrientation  orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_paper_size</NAME>
<RETURNS>GtkPaperSize  *        </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_paper_size</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPaperSize       *paper_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_paper_width</NAME>
<RETURNS>gdouble                </RETURNS>
GtkPrintSettings   *settings, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_paper_width</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gdouble             width, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_paper_height</NAME>
<RETURNS>gdouble                </RETURNS>
GtkPrintSettings   *settings, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_paper_height</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gdouble             height, GtkUnit             unit
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_use_color</NAME>
<RETURNS>gboolean               </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_use_color</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gboolean            use_color
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_collate</NAME>
<RETURNS>gboolean               </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_collate</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gboolean            collate
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_reverse</NAME>
<RETURNS>gboolean               </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_reverse</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gboolean            reverse
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_duplex</NAME>
<RETURNS>GtkPrintDuplex         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_duplex</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPrintDuplex      duplex
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_quality</NAME>
<RETURNS>GtkPrintQuality        </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_quality</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPrintQuality     quality
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_n_copies</NAME>
<RETURNS>gint                   </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_n_copies</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gint                num_copies
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_number_up</NAME>
<RETURNS>gint                   </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_number_up</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gint                number_up
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_number_up_layout</NAME>
<RETURNS>GtkNumberUpLayout      </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_number_up_layout</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkNumberUpLayout   number_up_layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_resolution</NAME>
<RETURNS>gint                   </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_resolution</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gint                resolution
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_resolution_x</NAME>
<RETURNS>gint                   </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_resolution_y</NAME>
<RETURNS>gint                   </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_resolution_xy</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gint                resolution_x, gint                resolution_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_printer_lpi</NAME>
<RETURNS>gdouble                </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_printer_lpi</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gdouble             lpi
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_scale</NAME>
<RETURNS>gdouble                </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_scale</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, gdouble             scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_print_pages</NAME>
<RETURNS>GtkPrintPages          </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_print_pages</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPrintPages       pages
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_page_ranges</NAME>
<RETURNS>GtkPageRange  *        </RETURNS>
GtkPrintSettings   *settings, gint               *num_ranges
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_page_ranges</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPageRange       *page_ranges, gint                num_ranges
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_page_set</NAME>
<RETURNS>GtkPageSet             </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_page_set</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, GtkPageSet          page_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_default_source</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_default_source</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, const gchar        *default_source
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_media_type</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_media_type</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, const gchar        *media_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_dither</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_dither</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, const gchar        *dither
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_finishings</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_finishings</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, const gchar        *finishings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_get_output_bin</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_set_output_bin</NAME>
<RETURNS>void                   </RETURNS>
GtkPrintSettings   *settings, const gchar        *output_bin
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_to_gvariant</NAME>
<RETURNS>GVariant              *</RETURNS>
GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_settings_new_from_gvariant</NAME>
<RETURNS>GtkPrintSettings      *</RETURNS>
GVariant           *variant
</FUNCTION>
<STRUCT>
<NAME>GtkPrintSettings</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_PRINT_UNIX_DIALOG</NAME>
#define GTK_TYPE_PRINT_UNIX_DIALOG                  (gtk_print_unix_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PRINT_UNIX_DIALOG</NAME>
#define GTK_PRINT_UNIX_DIALOG(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PRINT_UNIX_DIALOG, GtkPrintUnixDialog))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_UNIX_DIALOG_CLASS</NAME>
#define GTK_PRINT_UNIX_DIALOG_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PRINT_UNIX_DIALOG, GtkPrintUnixDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_UNIX_DIALOG</NAME>
#define GTK_IS_PRINT_UNIX_DIALOG(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PRINT_UNIX_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_PRINT_UNIX_DIALOG_CLASS</NAME>
#define GTK_IS_PRINT_UNIX_DIALOG_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PRINT_UNIX_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_PRINT_UNIX_DIALOG_GET_CLASS</NAME>
#define GTK_PRINT_UNIX_DIALOG_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PRINT_UNIX_DIALOG, GtkPrintUnixDialogClass))
</MACRO>
<TYPEDEF>
<NAME>GtkPrintUnixDialogPrivate</NAME>
typedef struct GtkPrintUnixDialogPrivate   GtkPrintUnixDialogPrivate;
</TYPEDEF>
<STRUCT>
<NAME>GtkPrintUnixDialog</NAME>
struct _GtkPrintUnixDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkPrintUnixDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkPrintUnixDialogClass</NAME>
struct _GtkPrintUnixDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_type</NAME>
<RETURNS>GType                 </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_new</NAME>
<RETURNS>GtkWidget  *          </RETURNS>
const gchar *title, GtkWindow   *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_page_setup</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog *dialog, GtkPageSetup       *page_setup
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_page_setup</NAME>
<RETURNS>GtkPageSetup  *       </RETURNS>
GtkPrintUnixDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_current_page</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog *dialog, gint                current_page
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_current_page</NAME>
<RETURNS>gint                  </RETURNS>
GtkPrintUnixDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_settings</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog *dialog, GtkPrintSettings   *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_settings</NAME>
<RETURNS>GtkPrintSettings  *   </RETURNS>
GtkPrintUnixDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_selected_printer</NAME>
<RETURNS>GtkPrinter  *         </RETURNS>
GtkPrintUnixDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_add_custom_tab</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog *dialog, GtkWidget          *child, GtkWidget          *tab_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_manual_capabilities</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog *dialog, GtkPrintCapabilities capabilities
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_manual_capabilities</NAME>
<RETURNS>GtkPrintCapabilities  </RETURNS>
GtkPrintUnixDialog  *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_support_selection</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog  *dialog, gboolean             support_selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_support_selection</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPrintUnixDialog  *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_has_selection</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog  *dialog, gboolean             has_selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_has_selection</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPrintUnixDialog  *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_set_embed_page_setup</NAME>
<RETURNS>void                  </RETURNS>
GtkPrintUnixDialog *dialog, gboolean            embed
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_embed_page_setup</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPrintUnixDialog *dialog
</FUNCTION>
<FUNCTION>
<NAME>gtk_print_unix_dialog_get_page_setup_set</NAME>
<RETURNS>gboolean              </RETURNS>
GtkPrintUnixDialog *dialog
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_PROGRESS_BAR</NAME>
#define GTK_TYPE_PROGRESS_BAR            (gtk_progress_bar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_PROGRESS_BAR</NAME>
#define GTK_PROGRESS_BAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBar))
</MACRO>
<MACRO>
<NAME>GTK_PROGRESS_BAR_CLASS</NAME>
#define GTK_PROGRESS_BAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_PROGRESS_BAR, GtkProgressBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_PROGRESS_BAR</NAME>
#define GTK_IS_PROGRESS_BAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_PROGRESS_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_PROGRESS_BAR_CLASS</NAME>
#define GTK_IS_PROGRESS_BAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_PROGRESS_BAR))
</MACRO>
<MACRO>
<NAME>GTK_PROGRESS_BAR_GET_CLASS</NAME>
#define GTK_PROGRESS_BAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_PROGRESS_BAR, GtkProgressBarClass))
</MACRO>
<STRUCT>
<NAME>GtkProgressBar</NAME>
struct _GtkProgressBar
{
  GtkWidget parent;

  /*< private >*/
  GtkProgressBarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkProgressBarClass</NAME>
struct _GtkProgressBarClass
{
  GtkWidgetClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_progress_bar_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_pulse</NAME>
<RETURNS>void        </RETURNS>
GtkProgressBar *pbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_set_text</NAME>
<RETURNS>void        </RETURNS>
GtkProgressBar *pbar, const gchar    *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_set_fraction</NAME>
<RETURNS>void        </RETURNS>
GtkProgressBar *pbar, gdouble         fraction
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_set_pulse_step</NAME>
<RETURNS>void        </RETURNS>
GtkProgressBar *pbar, gdouble         fraction
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_set_inverted</NAME>
<RETURNS>void        </RETURNS>
GtkProgressBar *pbar, gboolean        inverted
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_get_text</NAME>
<RETURNS>const gchar  *      </RETURNS>
GtkProgressBar *pbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_get_fraction</NAME>
<RETURNS>gdouble             </RETURNS>
GtkProgressBar *pbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_get_pulse_step</NAME>
<RETURNS>gdouble             </RETURNS>
GtkProgressBar *pbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_get_inverted</NAME>
<RETURNS>gboolean            </RETURNS>
GtkProgressBar *pbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_set_ellipsize</NAME>
<RETURNS>void                </RETURNS>
GtkProgressBar     *pbar, PangoEllipsizeMode  mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_get_ellipsize</NAME>
<RETURNS>PangoEllipsizeMode  </RETURNS>
GtkProgressBar     *pbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_set_show_text</NAME>
<RETURNS>void                </RETURNS>
GtkProgressBar     *pbar, gboolean            show_text
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_bar_get_show_text</NAME>
<RETURNS>gboolean            </RETURNS>
GtkProgressBar     *pbar
</FUNCTION>
<STRUCT>
<NAME>GtkProgressBarPrivate</NAME>
</STRUCT>
<ENUM>
<NAME>GtkProgressState</NAME>
typedef enum {
  GTK_PROGRESS_STATE_BEFORE,
  GTK_PROGRESS_STATE_DURING,
  GTK_PROGRESS_STATE_AFTER,
} GtkProgressState;
</ENUM>
<STRUCT>
<NAME>GtkProgressTracker</NAME>
struct _GtkProgressTracker
{
  gboolean is_running;
  guint64 last_frame_time;
  guint64 duration;
  gdouble iteration;
  gdouble iteration_count;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_progress_tracker_init_copy</NAME>
<RETURNS>void                  </RETURNS>
GtkProgressTracker *source, GtkProgressTracker *dest
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_start</NAME>
<RETURNS>void                  </RETURNS>
GtkProgressTracker *tracker, guint64 duration, gint64 delay, gdouble iteration_count
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_finish</NAME>
<RETURNS>void                  </RETURNS>
GtkProgressTracker *tracker
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_advance_frame</NAME>
<RETURNS>void                  </RETURNS>
GtkProgressTracker *tracker, guint64 frame_time
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_skip_frame</NAME>
<RETURNS>void                  </RETURNS>
GtkProgressTracker *tracker, guint64 frame_time
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_get_state</NAME>
<RETURNS>GtkProgressState      </RETURNS>
GtkProgressTracker *tracker
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_get_iteration</NAME>
<RETURNS>gdouble               </RETURNS>
GtkProgressTracker *tracker
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_get_iteration_cycle</NAME>
<RETURNS>guint64               </RETURNS>
GtkProgressTracker *tracker
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_get_progress</NAME>
<RETURNS>gdouble               </RETURNS>
GtkProgressTracker *tracker, gboolean reverse
</FUNCTION>
<FUNCTION>
<NAME>gtk_progress_tracker_get_ease_out_cubic</NAME>
<RETURNS>gdouble               </RETURNS>
GtkProgressTracker *tracker, gboolean reverse
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_RADIO_BUTTON</NAME>
#define GTK_TYPE_RADIO_BUTTON		       (gtk_radio_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RADIO_BUTTON</NAME>
#define GTK_RADIO_BUTTON(obj)		       (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButton))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_BUTTON_CLASS</NAME>
#define GTK_RADIO_BUTTON_CLASS(klass)	       (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RADIO_BUTTON, GtkRadioButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_BUTTON</NAME>
#define GTK_IS_RADIO_BUTTON(obj)	       (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RADIO_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_BUTTON_CLASS</NAME>
#define GTK_IS_RADIO_BUTTON_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RADIO_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_BUTTON_GET_CLASS</NAME>
#define GTK_RADIO_BUTTON_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RADIO_BUTTON, GtkRadioButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkRadioButton</NAME>
struct _GtkRadioButton
{
  GtkCheckButton check_button;

  /*< private >*/
  GtkRadioButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRadioButtonClass</NAME>
struct _GtkRadioButtonClass
{
  GtkCheckButtonClass parent_class;

  /* Signals */
  void (*group_changed) (GtkRadioButton *radio_button);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_radio_button_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
GSList         *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_new_from_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkRadioButton *radio_group_member
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_new_with_label</NAME>
<RETURNS>GtkWidget * </RETURNS>
GSList         *group, const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_new_with_label_from_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkRadioButton *radio_group_member, const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_new_with_mnemonic</NAME>
<RETURNS>GtkWidget * </RETURNS>
GSList         *group, const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_new_with_mnemonic_from_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkRadioButton *radio_group_member, const gchar    *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_get_group</NAME>
<RETURNS>GSList *    </RETURNS>
GtkRadioButton *radio_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_set_group</NAME>
<RETURNS>void        </RETURNS>
GtkRadioButton *radio_button, GSList         *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_button_join_group</NAME>
<RETURNS>void             </RETURNS>
GtkRadioButton        *radio_button, GtkRadioButton        *group_source
</FUNCTION>
<STRUCT>
<NAME>GtkRadioButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RADIO_MENU_ITEM</NAME>
#define GTK_TYPE_RADIO_MENU_ITEM	      (gtk_radio_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RADIO_MENU_ITEM</NAME>
#define GTK_RADIO_MENU_ITEM(obj)	      (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItem))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_MENU_ITEM_CLASS</NAME>
#define GTK_RADIO_MENU_ITEM_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_MENU_ITEM</NAME>
#define GTK_IS_RADIO_MENU_ITEM(obj)	      (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RADIO_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_MENU_ITEM_CLASS</NAME>
#define GTK_IS_RADIO_MENU_ITEM_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RADIO_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_MENU_ITEM_GET_CLASS</NAME>
#define GTK_RADIO_MENU_ITEM_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RADIO_MENU_ITEM, GtkRadioMenuItemClass))
</MACRO>
<STRUCT>
<NAME>GtkRadioMenuItem</NAME>
struct _GtkRadioMenuItem
{
  GtkCheckMenuItem check_menu_item;

  /*< private >*/
  GtkRadioMenuItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRadioMenuItemClass</NAME>
struct _GtkRadioMenuItemClass
{
  GtkCheckMenuItemClass parent_class;

  /* Signals */
  void (*group_changed) (GtkRadioMenuItem *radio_menu_item);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_radio_menu_item_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
GSList           *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_new_with_label</NAME>
<RETURNS>GtkWidget * </RETURNS>
GSList           *group, const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_new_with_mnemonic</NAME>
<RETURNS>GtkWidget * </RETURNS>
GSList           *group, const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_new_from_widget</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkRadioMenuItem *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_new_with_mnemonic_from_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkRadioMenuItem *group, const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_new_with_label_from_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkRadioMenuItem *group, const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_get_group</NAME>
<RETURNS>GSList *    </RETURNS>
GtkRadioMenuItem *radio_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_set_group</NAME>
<RETURNS>void        </RETURNS>
GtkRadioMenuItem *radio_menu_item, GSList           *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_menu_item_join_group</NAME>
<RETURNS>void        </RETURNS>
GtkRadioMenuItem *radio_menu_item, GtkRadioMenuItem *group_source
</FUNCTION>
<STRUCT>
<NAME>GtkRadioMenuItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RADIO_TOOL_BUTTON</NAME>
#define GTK_TYPE_RADIO_TOOL_BUTTON            (gtk_radio_tool_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RADIO_TOOL_BUTTON</NAME>
#define GTK_RADIO_TOOL_BUTTON(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RADIO_TOOL_BUTTON, GtkRadioToolButton))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_TOOL_BUTTON_CLASS</NAME>
#define GTK_RADIO_TOOL_BUTTON_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RADIO_TOOL_BUTTON, GtkRadioToolButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_TOOL_BUTTON</NAME>
#define GTK_IS_RADIO_TOOL_BUTTON(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RADIO_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_TOOL_BUTTON_CLASS</NAME>
#define GTK_IS_RADIO_TOOL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RADIO_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_TOOL_BUTTON_GET_CLASS</NAME>
#define GTK_RADIO_TOOL_BUTTON_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_TOOL_BUTTON, GtkRadioToolButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkRadioToolButton</NAME>
struct _GtkRadioToolButton
{
  GtkToggleToolButton parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkRadioToolButtonClass</NAME>
struct _GtkRadioToolButtonClass
{
  GtkToggleToolButtonClass parent_class;

  /* Padding for future expansion */
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_radio_tool_button_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_tool_button_new</NAME>
<RETURNS>GtkToolItem  *</RETURNS>
GSList             *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_tool_button_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkToolItem  *</RETURNS>
GSList             *group, const gchar        *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_tool_button_new_from_widget</NAME>
<RETURNS>GtkToolItem  *</RETURNS>
GtkRadioToolButton *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_tool_button_new_with_stock_from_widget</NAME>
<DEPRECATED/>
<RETURNS>GtkToolItem  *</RETURNS>
GtkRadioToolButton *group, const gchar        *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_tool_button_get_group</NAME>
<RETURNS>GSList  *     </RETURNS>
GtkRadioToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_tool_button_set_group</NAME>
<RETURNS>void          </RETURNS>
GtkRadioToolButton *button, GSList             *group
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_RANGE</NAME>
#define GTK_TYPE_RANGE            (gtk_range_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RANGE</NAME>
#define GTK_RANGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RANGE, GtkRange))
</MACRO>
<MACRO>
<NAME>GTK_RANGE_CLASS</NAME>
#define GTK_RANGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RANGE, GtkRangeClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RANGE</NAME>
#define GTK_IS_RANGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RANGE))
</MACRO>
<MACRO>
<NAME>GTK_IS_RANGE_CLASS</NAME>
#define GTK_IS_RANGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RANGE))
</MACRO>
<MACRO>
<NAME>GTK_RANGE_GET_CLASS</NAME>
#define GTK_RANGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RANGE, GtkRangeClass))
</MACRO>
<STRUCT>
<NAME>GtkRange</NAME>
struct _GtkRange
{
  GtkWidget widget;

  GtkRangePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRangeClass</NAME>
<DEPRECATED/>
struct _GtkRangeClass
{
  GtkWidgetClass parent_class;

  /* what detail to pass to GTK drawing functions */
  G_GNUC_DEPRECATED gchar *slider_detail;
  G_GNUC_DEPRECATED gchar *stepper_detail;

  void (* value_changed)    (GtkRange     *range);
  void (* adjust_bounds)    (GtkRange     *range,
                             gdouble	   new_value);

  /* action signals for keybindings */
  void (* move_slider)      (GtkRange     *range,
                             GtkScrollType scroll);

  /* Virtual functions */
  void (* get_range_border) (GtkRange     *range,
                             GtkBorder    *border_);

  gboolean (* change_value) (GtkRange     *range,
                             GtkScrollType scroll,
                             gdouble       new_value);

   void (* get_range_size_request) (GtkRange       *range,
                                    GtkOrientation  orientation,
                                    gint           *minimum,
                                    gint           *natural);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_range_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_adjustment</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_adjustment</NAME>
<RETURNS>GtkAdjustment *     </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_inverted</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_inverted</NAME>
<RETURNS>gboolean            </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_flippable</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gboolean       flippable
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_flippable</NAME>
<RETURNS>gboolean            </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_slider_size_fixed</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gboolean       size_fixed
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_slider_size_fixed</NAME>
<RETURNS>gboolean            </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_min_slider_size</NAME>
<DEPRECATED/>
<RETURNS>void                </RETURNS>
GtkRange      *range, gint           min_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_min_slider_size</NAME>
<DEPRECATED/>
<RETURNS>gint                </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_range_rect</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, GdkRectangle  *range_rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_slider_range</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gint          *slider_start, gint          *slider_end
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_lower_stepper_sensitivity</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, GtkSensitivityType sensitivity
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_lower_stepper_sensitivity</NAME>
<RETURNS>GtkSensitivityType  </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_upper_stepper_sensitivity</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, GtkSensitivityType sensitivity
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_upper_stepper_sensitivity</NAME>
<RETURNS>GtkSensitivityType  </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_increments</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gdouble        step, gdouble        page
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_range</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gdouble        min, gdouble        max
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_value</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gdouble        value
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_value</NAME>
<RETURNS>gdouble             </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_show_fill_level</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gboolean       show_fill_level
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_show_fill_level</NAME>
<RETURNS>gboolean            </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_restrict_to_fill_level</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gboolean       restrict_to_fill_level
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_restrict_to_fill_level</NAME>
<RETURNS>gboolean            </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_fill_level</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gdouble        fill_level
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_fill_level</NAME>
<RETURNS>gdouble             </RETURNS>
GtkRange      *range
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_set_round_digits</NAME>
<RETURNS>void                </RETURNS>
GtkRange      *range, gint           round_digits
</FUNCTION>
<FUNCTION>
<NAME>gtk_range_get_round_digits</NAME>
<RETURNS>gint                 </RETURNS>
GtkRange      *range
</FUNCTION>
<STRUCT>
<NAME>GtkRangePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_CHOOSER</NAME>
#define GTK_TYPE_RECENT_CHOOSER			(gtk_recent_chooser_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER</NAME>
#define GTK_RECENT_CHOOSER(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_CHOOSER, GtkRecentChooser))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER</NAME>
#define GTK_IS_RECENT_CHOOSER(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_CHOOSER))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_GET_IFACE</NAME>
#define GTK_RECENT_CHOOSER_GET_IFACE(inst)	(G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_RECENT_CHOOSER, GtkRecentChooserIface))
</MACRO>
<ENUM>
<NAME>GtkRecentSortType</NAME>
typedef enum
{
  GTK_RECENT_SORT_NONE = 0,
  GTK_RECENT_SORT_MRU,
  GTK_RECENT_SORT_LRU,
  GTK_RECENT_SORT_CUSTOM
} GtkRecentSortType;
</ENUM>
<USER_FUNCTION>
<NAME>GtkRecentSortFunc</NAME>
<RETURNS>gint </RETURNS>
GtkRecentInfo *a,
				   GtkRecentInfo *b,
				   gpointer       user_data
</USER_FUNCTION>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_ERROR</NAME>
#define GTK_RECENT_CHOOSER_ERROR	(gtk_recent_chooser_error_quark ())
</MACRO>
<ENUM>
<NAME>GtkRecentChooserError</NAME>
typedef enum
{
  GTK_RECENT_CHOOSER_ERROR_NOT_FOUND,
  GTK_RECENT_CHOOSER_ERROR_INVALID_URI
} GtkRecentChooserError;
</ENUM>
<FUNCTION>
<NAME>gtk_recent_chooser_error_quark</NAME>
<RETURNS>GQuark   </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkRecentChooserIface</NAME>
struct _GtkRecentChooserIface
{
  /*< private >*/
  GTypeInterface base_iface;

  /*< public >*/

  /*
   * Methods
   */
  gboolean          (* set_current_uri)    (GtkRecentChooser  *chooser,
  					    const gchar       *uri,
  					    GError           **error);
  gchar *           (* get_current_uri)    (GtkRecentChooser  *chooser);
  gboolean          (* select_uri)         (GtkRecentChooser  *chooser,
  					    const gchar       *uri,
  					    GError           **error);
  void              (* unselect_uri)       (GtkRecentChooser  *chooser,
                                            const gchar       *uri);
  void              (* select_all)         (GtkRecentChooser  *chooser);
  void              (* unselect_all)       (GtkRecentChooser  *chooser);
  GList *           (* get_items)          (GtkRecentChooser  *chooser);
  GtkRecentManager *(* get_recent_manager) (GtkRecentChooser  *chooser);
  void              (* add_filter)         (GtkRecentChooser  *chooser,
  					    GtkRecentFilter   *filter);
  void              (* remove_filter)      (GtkRecentChooser  *chooser,
  					    GtkRecentFilter   *filter);
  GSList *          (* list_filters)       (GtkRecentChooser  *chooser);
  void              (* set_sort_func)      (GtkRecentChooser  *chooser,
  					    GtkRecentSortFunc  sort_func,
  					    gpointer           sort_data,
  					    GDestroyNotify     data_destroy);

  /*
   * Signals
   */
  void		    (* item_activated)     (GtkRecentChooser  *chooser);
  void		    (* selection_changed)  (GtkRecentChooser  *chooser);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_recent_chooser_get_type</NAME>
<RETURNS>GType    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_show_private</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gboolean           show_private
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_show_private</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_show_not_found</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gboolean           show_not_found
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_show_not_found</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_select_multiple</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gboolean           select_multiple
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_select_multiple</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_limit</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gint               limit
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_limit</NAME>
<RETURNS>gint               </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_local_only</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gboolean           local_only
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_local_only</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_show_tips</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gboolean           show_tips
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_show_tips</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_show_icons</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, gboolean           show_icons
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_show_icons</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_sort_type</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, GtkRecentSortType  sort_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_sort_type</NAME>
<RETURNS>GtkRecentSortType  </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_sort_func</NAME>
<RETURNS>void               </RETURNS>
GtkRecentChooser  *chooser, GtkRecentSortFunc  sort_func, gpointer           sort_data, GDestroyNotify     data_destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_current_uri</NAME>
<RETURNS>gboolean        </RETURNS>
GtkRecentChooser  *chooser, const gchar       *uri, GError           **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_current_uri</NAME>
<RETURNS>gchar  *        </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_current_item</NAME>
<RETURNS>GtkRecentInfo  *</RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_select_uri</NAME>
<RETURNS>gboolean        </RETURNS>
GtkRecentChooser  *chooser, const gchar       *uri, GError           **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_unselect_uri</NAME>
<RETURNS>void            </RETURNS>
GtkRecentChooser  *chooser, const gchar       *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_select_all</NAME>
<RETURNS>void            </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_unselect_all</NAME>
<RETURNS>void            </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_items</NAME>
<RETURNS>GList  *        </RETURNS>
GtkRecentChooser  *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_uris</NAME>
<RETURNS>gchar  **       </RETURNS>
GtkRecentChooser  *chooser, gsize             *length
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_add_filter</NAME>
<RETURNS>void  		 </RETURNS>
GtkRecentChooser *chooser, GtkRecentFilter  *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_remove_filter</NAME>
<RETURNS>void  		 </RETURNS>
GtkRecentChooser *chooser, GtkRecentFilter  *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_list_filters</NAME>
<RETURNS>GSList  * 	 </RETURNS>
GtkRecentChooser *chooser
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_set_filter</NAME>
<RETURNS>void  		 </RETURNS>
GtkRecentChooser *chooser, GtkRecentFilter  *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_get_filter</NAME>
<RETURNS>GtkRecentFilter  *</RETURNS>
GtkRecentChooser *chooser
</FUNCTION>
<STRUCT>
<NAME>GtkRecentChooser</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_CHOOSER_DIALOG</NAME>
#define GTK_TYPE_RECENT_CHOOSER_DIALOG		  (gtk_recent_chooser_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_DIALOG</NAME>
#define GTK_RECENT_CHOOSER_DIALOG(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG, GtkRecentChooserDialog))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER_DIALOG</NAME>
#define GTK_IS_RECENT_CHOOSER_DIALOG(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_RECENT_CHOOSER_DIALOG_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RECENT_CHOOSER_DIALOG, GtkRecentChooserDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER_DIALOG_CLASS</NAME>
#define GTK_IS_RECENT_CHOOSER_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RECENT_CHOOSER_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_DIALOG_GET_CLASS</NAME>
#define GTK_RECENT_CHOOSER_DIALOG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RECENT_CHOOSER_DIALOG, GtkRecentChooserDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkRecentChooserDialog</NAME>
struct _GtkRecentChooserDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkRecentChooserDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRecentChooserDialogClass</NAME>
struct _GtkRecentChooserDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_recent_chooser_dialog_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_dialog_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar      *title, GtkWindow        *parent, const gchar      *first_button_text, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_dialog_new_for_manager</NAME>
<RETURNS>GtkWidget  *</RETURNS>
const gchar      *title, GtkWindow        *parent, GtkRecentManager *manager, const gchar      *first_button_text, ...
</FUNCTION>
<STRUCT>
<NAME>GtkRecentChooserDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_CHOOSER_MENU</NAME>
#define GTK_TYPE_RECENT_CHOOSER_MENU		(gtk_recent_chooser_menu_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_MENU</NAME>
#define GTK_RECENT_CHOOSER_MENU(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_CHOOSER_MENU, GtkRecentChooserMenu))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER_MENU</NAME>
#define GTK_IS_RECENT_CHOOSER_MENU(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_CHOOSER_MENU))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_MENU_CLASS</NAME>
#define GTK_RECENT_CHOOSER_MENU_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RECENT_CHOOSER_MENU, GtkRecentChooserMenuClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER_MENU_CLASS</NAME>
#define GTK_IS_RECENT_CHOOSER_MENU_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RECENT_CHOOSER_MENU))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_MENU_GET_CLASS</NAME>
#define GTK_RECENT_CHOOSER_MENU_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RECENT_CHOOSER_MENU, GtkRecentChooserMenuClass))
</MACRO>
<STRUCT>
<NAME>GtkRecentChooserMenu</NAME>
struct _GtkRecentChooserMenu
{
  GtkMenu parent_instance;

  /*< private >*/
  GtkRecentChooserMenuPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRecentChooserMenuClass</NAME>
struct _GtkRecentChooserMenuClass
{
  GtkMenuClass parent_class;

  /* padding for future expansion */
  void (* gtk_recent1) (void);
  void (* gtk_recent2) (void);
  void (* gtk_recent3) (void);
  void (* gtk_recent4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_recent_chooser_menu_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_menu_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_menu_new_for_manager</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkRecentManager     *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_menu_get_show_numbers</NAME>
<RETURNS>gboolean    </RETURNS>
GtkRecentChooserMenu *menu
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_menu_set_show_numbers</NAME>
<RETURNS>void        </RETURNS>
GtkRecentChooserMenu *menu, gboolean              show_numbers
</FUNCTION>
<STRUCT>
<NAME>GtkRecentChooserMenuPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_CHOOSER_WIDGET</NAME>
#define GTK_TYPE_RECENT_CHOOSER_WIDGET		  (gtk_recent_chooser_widget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_WIDGET</NAME>
#define GTK_RECENT_CHOOSER_WIDGET(obj)		  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET, GtkRecentChooserWidget))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER_WIDGET</NAME>
#define GTK_IS_RECENT_CHOOSER_WIDGET(obj)	  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_RECENT_CHOOSER_WIDGET_CLASS(klass)	  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RECENT_CHOOSER_WIDGET, GtkRecentChooserWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_CHOOSER_WIDGET_CLASS</NAME>
#define GTK_IS_RECENT_CHOOSER_WIDGET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RECENT_CHOOSER_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_CHOOSER_WIDGET_GET_CLASS</NAME>
#define GTK_RECENT_CHOOSER_WIDGET_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RECENT_CHOOSER_WIDGET, GtkRecentChooserWidgetClass))
</MACRO>
<STRUCT>
<NAME>GtkRecentChooserWidget</NAME>
struct _GtkRecentChooserWidget
{
  GtkBox parent_instance;

  /*< private >*/
  GtkRecentChooserWidgetPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRecentChooserWidgetClass</NAME>
struct _GtkRecentChooserWidgetClass
{
  GtkBoxClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_recent_chooser_widget_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_widget_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_chooser_widget_new_for_manager</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkRecentManager *manager
</FUNCTION>
<STRUCT>
<NAME>GtkRecentChooserWidgetPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_FILTER</NAME>
#define GTK_TYPE_RECENT_FILTER		(gtk_recent_filter_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_FILTER</NAME>
#define GTK_RECENT_FILTER(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_FILTER, GtkRecentFilter))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_FILTER</NAME>
#define GTK_IS_RECENT_FILTER(obj)	(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_FILTER))
</MACRO>
<ENUM>
<NAME>GtkRecentFilterFlags</NAME>
typedef enum {
  GTK_RECENT_FILTER_URI          = 1 << 0,
  GTK_RECENT_FILTER_DISPLAY_NAME = 1 << 1,
  GTK_RECENT_FILTER_MIME_TYPE    = 1 << 2,
  GTK_RECENT_FILTER_APPLICATION  = 1 << 3,
  GTK_RECENT_FILTER_GROUP        = 1 << 4,
  GTK_RECENT_FILTER_AGE          = 1 << 5
} GtkRecentFilterFlags;
</ENUM>
<USER_FUNCTION>
<NAME>GtkRecentFilterFunc</NAME>
<RETURNS>gboolean </RETURNS>
const GtkRecentFilterInfo *filter_info,
					 gpointer                   user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkRecentFilterInfo</NAME>
struct _GtkRecentFilterInfo
{
  GtkRecentFilterFlags contains;

  const gchar *uri;
  const gchar *display_name;
  const gchar *mime_type;
  const gchar **applications;
  const gchar **groups;

  gint age;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_recent_filter_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_new</NAME>
<RETURNS>GtkRecentFilter  *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_set_name</NAME>
<RETURNS>void                   </RETURNS>
GtkRecentFilter *filter, const gchar     *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_get_name</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkRecentFilter *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_mime_type</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter, const gchar          *mime_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_pattern</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter, const gchar          *pattern
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_pixbuf_formats</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_application</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter, const gchar          *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_group</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter, const gchar          *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_age</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter, gint                  days
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_add_custom</NAME>
<RETURNS>void  </RETURNS>
GtkRecentFilter      *filter, GtkRecentFilterFlags  needed, GtkRecentFilterFunc   func, gpointer              data, GDestroyNotify        data_destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_get_needed</NAME>
<RETURNS>GtkRecentFilterFlags  </RETURNS>
GtkRecentFilter           *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_filter_filter</NAME>
<RETURNS>gboolean              </RETURNS>
GtkRecentFilter           *filter, const GtkRecentFilterInfo *filter_info
</FUNCTION>
<STRUCT>
<NAME>GtkRecentFilter</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_INFO</NAME>
#define GTK_TYPE_RECENT_INFO			(gtk_recent_info_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TYPE_RECENT_MANAGER</NAME>
#define GTK_TYPE_RECENT_MANAGER			(gtk_recent_manager_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_MANAGER</NAME>
#define GTK_RECENT_MANAGER(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_MANAGER, GtkRecentManager))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_MANAGER</NAME>
#define GTK_IS_RECENT_MANAGER(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_MANAGER))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_MANAGER_CLASS</NAME>
#define GTK_RECENT_MANAGER_CLASS(klass) 	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RECENT_MANAGER, GtkRecentManagerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_MANAGER_CLASS</NAME>
#define GTK_IS_RECENT_MANAGER_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RECENT_MANAGER))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_MANAGER_GET_CLASS</NAME>
#define GTK_RECENT_MANAGER_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RECENT_MANAGER, GtkRecentManagerClass))
</MACRO>
<STRUCT>
<NAME>GtkRecentData</NAME>
struct _GtkRecentData
{
  gchar *display_name;
  gchar *description;

  gchar *mime_type;

  gchar *app_name;
  gchar *app_exec;

  gchar **groups;

  gboolean is_private;
};
</STRUCT>
<STRUCT>
<NAME>GtkRecentManager</NAME>
struct _GtkRecentManager
{
  /*< private >*/
  GObject parent_instance;

  GtkRecentManagerPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRecentManagerClass</NAME>
struct _GtkRecentManagerClass
{
  /*< private >*/
  GObjectClass parent_class;

  void (*changed) (GtkRecentManager *manager);

  /* padding for future expansion */
  void (*_gtk_recent1) (void);
  void (*_gtk_recent2) (void);
  void (*_gtk_recent3) (void);
  void (*_gtk_recent4) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkRecentManagerError</NAME>
typedef enum
{
  GTK_RECENT_MANAGER_ERROR_NOT_FOUND,
  GTK_RECENT_MANAGER_ERROR_INVALID_URI,
  GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING,
  GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED,
  GTK_RECENT_MANAGER_ERROR_READ,
  GTK_RECENT_MANAGER_ERROR_WRITE,
  GTK_RECENT_MANAGER_ERROR_UNKNOWN
} GtkRecentManagerError;
</ENUM>
<MACRO>
<NAME>GTK_RECENT_MANAGER_ERROR</NAME>
#define GTK_RECENT_MANAGER_ERROR	(gtk_recent_manager_error_quark ())
</MACRO>
<FUNCTION>
<NAME>gtk_recent_manager_error_quark</NAME>
<RETURNS>GQuark  	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_get_type</NAME>
<RETURNS>GType  		  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_new</NAME>
<RETURNS>GtkRecentManager  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_get_default</NAME>
<RETURNS>GtkRecentManager  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_add_item</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentManager     *manager, const gchar          *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_add_full</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentManager     *manager, const gchar          *uri, const GtkRecentData  *recent_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_remove_item</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentManager     *manager, const gchar          *uri, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_lookup_item</NAME>
<RETURNS>GtkRecentInfo  *   </RETURNS>
GtkRecentManager     *manager, const gchar          *uri, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_has_item</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentManager     *manager, const gchar          *uri
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_move_item</NAME>
<RETURNS>gboolean           </RETURNS>
GtkRecentManager     *manager, const gchar          *uri, const gchar          *new_uri, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_get_items</NAME>
<RETURNS>GList  *           </RETURNS>
GtkRecentManager     *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_manager_purge_items</NAME>
<RETURNS>gint               </RETURNS>
GtkRecentManager     *manager, GError              **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_type</NAME>
<RETURNS>GType 	              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_ref</NAME>
<RETURNS>GtkRecentInfo  *       </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_unref</NAME>
<RETURNS>void                   </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_uri</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_display_name</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_description</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_mime_type</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_added</NAME>
<RETURNS>time_t                 </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_modified</NAME>
<RETURNS>time_t                 </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_visited</NAME>
<RETURNS>time_t                 </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_private_hint</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_application_info</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info, const gchar    *app_name, const gchar   **app_exec, guint          *count, time_t         *time_
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_create_app_info</NAME>
<RETURNS>GAppInfo  *            </RETURNS>
GtkRecentInfo  *info, const gchar    *app_name, GError        **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_applications</NAME>
<RETURNS>gchar  **              </RETURNS>
GtkRecentInfo  *info, gsize          *length
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_last_application</NAME>
<RETURNS>gchar  *               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_has_application</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info, const gchar    *app_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_groups</NAME>
<RETURNS>gchar  **              </RETURNS>
GtkRecentInfo  *info, gsize          *length
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_has_group</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info, const gchar    *group_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_icon</NAME>
<RETURNS>GdkPixbuf  *           </RETURNS>
GtkRecentInfo  *info, gint            size
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_gicon</NAME>
<RETURNS>GIcon  *               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_short_name</NAME>
<RETURNS>gchar  *               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_uri_display</NAME>
<RETURNS>gchar  *               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_get_age</NAME>
<RETURNS>gint                   </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_is_local</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_exists</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_info_match</NAME>
<RETURNS>gboolean               </RETURNS>
GtkRecentInfo  *info_a, GtkRecentInfo  *info_b
</FUNCTION>
<STRUCT>
<NAME>GtkRecentInfo</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkRecentManagerPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_render_check</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_option</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_arrow</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              angle, gdouble              x, gdouble              y, gdouble              size
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_background</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_background_get_clip</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, gdouble              x, gdouble              y, gdouble              width, gdouble              height, GdkRectangle        *out_clip
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_frame</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_expander</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_focus</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_layout</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, PangoLayout         *layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_line</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x0, gdouble              y0, gdouble              x1, gdouble              y1
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_slider</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height, GtkOrientation       orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_frame_gap</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height, GtkPositionType      gap_side, gdouble              xy0_gap, gdouble              xy1_gap
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_extension</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height, GtkPositionType      gap_side
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_handle</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_activity</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, gdouble              width, gdouble              height
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_icon_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf  * </RETURNS>
GtkStyleContext     *context, const GtkIconSource *source, GtkIconSize          size
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_icon</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, GdkPixbuf           *pixbuf, gdouble              x, gdouble              y
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_icon_surface</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext    *context, cairo_t            *cr, cairo_surface_t    *surface, gdouble             x, gdouble             y
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_REVEALER</NAME>
#define GTK_TYPE_REVEALER (gtk_revealer_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_REVEALER</NAME>
#define GTK_REVEALER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_REVEALER, GtkRevealer))
</MACRO>
<MACRO>
<NAME>GTK_REVEALER_CLASS</NAME>
#define GTK_REVEALER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_REVEALER, GtkRevealerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_REVEALER</NAME>
#define GTK_IS_REVEALER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_REVEALER))
</MACRO>
<MACRO>
<NAME>GTK_IS_REVEALER_CLASS</NAME>
#define GTK_IS_REVEALER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_REVEALER))
</MACRO>
<MACRO>
<NAME>GTK_REVEALER_GET_CLASS</NAME>
#define GTK_REVEALER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_REVEALER, GtkRevealerClass))
</MACRO>
<ENUM>
<NAME>GtkRevealerTransitionType</NAME>
typedef enum {
  GTK_REVEALER_TRANSITION_TYPE_NONE,
  GTK_REVEALER_TRANSITION_TYPE_CROSSFADE,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP,
  GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN
} GtkRevealerTransitionType;
</ENUM>
<STRUCT>
<NAME>GtkRevealer</NAME>
struct _GtkRevealer {
  GtkBin parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkRevealerClass</NAME>
struct _GtkRevealerClass {
  GtkBinClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_revealer_get_type</NAME>
<RETURNS>GType                       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_new</NAME>
<RETURNS>GtkWidget *                 </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_get_reveal_child</NAME>
<RETURNS>gboolean                    </RETURNS>
GtkRevealer               *revealer
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_set_reveal_child</NAME>
<RETURNS>void                        </RETURNS>
GtkRevealer               *revealer, gboolean                   reveal_child
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_get_child_revealed</NAME>
<RETURNS>gboolean                    </RETURNS>
GtkRevealer               *revealer
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_get_transition_duration</NAME>
<RETURNS>guint                       </RETURNS>
GtkRevealer               *revealer
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_set_transition_duration</NAME>
<RETURNS>void                        </RETURNS>
GtkRevealer               *revealer, guint                      duration
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_set_transition_type</NAME>
<RETURNS>void                        </RETURNS>
GtkRevealer               *revealer, GtkRevealerTransitionType  transition
</FUNCTION>
<FUNCTION>
<NAME>gtk_revealer_get_transition_type</NAME>
<RETURNS>GtkRevealerTransitionType   </RETURNS>
GtkRevealer               *revealer
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SCALE</NAME>
#define GTK_TYPE_SCALE            (gtk_scale_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SCALE</NAME>
#define GTK_SCALE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SCALE, GtkScale))
</MACRO>
<MACRO>
<NAME>GTK_SCALE_CLASS</NAME>
#define GTK_SCALE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCALE, GtkScaleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCALE</NAME>
#define GTK_IS_SCALE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SCALE))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCALE_CLASS</NAME>
#define GTK_IS_SCALE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCALE))
</MACRO>
<MACRO>
<NAME>GTK_SCALE_GET_CLASS</NAME>
#define GTK_SCALE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SCALE, GtkScaleClass))
</MACRO>
<STRUCT>
<NAME>GtkScale</NAME>
struct _GtkScale
{
  GtkRange range;

  /*< private >*/
  GtkScalePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkScaleClass</NAME>
struct _GtkScaleClass
{
  GtkRangeClass parent_class;

  gchar* (* format_value) (GtkScale *scale,
                           gdouble   value);

  void (* draw_value) (GtkScale *scale);

  void (* get_layout_offsets) (GtkScale *scale,
                               gint     *x,
                               gint     *y);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_scale_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_new</NAME>
<RETURNS>GtkWidget        * </RETURNS>
GtkOrientation   orientation, GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_new_with_range</NAME>
<RETURNS>GtkWidget        * </RETURNS>
GtkOrientation   orientation, gdouble          min, gdouble          max, gdouble          step
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_set_digits</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale, gint             digits
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_get_digits</NAME>
<RETURNS>gint               </RETURNS>
GtkScale        *scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_set_draw_value</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale, gboolean         draw_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_get_draw_value</NAME>
<RETURNS>gboolean           </RETURNS>
GtkScale        *scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_set_has_origin</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale, gboolean         has_origin
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_get_has_origin</NAME>
<RETURNS>gboolean           </RETURNS>
GtkScale        *scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_set_value_pos</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale, GtkPositionType  pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_get_value_pos</NAME>
<RETURNS>GtkPositionType    </RETURNS>
GtkScale        *scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_get_layout</NAME>
<RETURNS>PangoLayout      * </RETURNS>
GtkScale        *scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_get_layout_offsets</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale, gint            *x, gint            *y
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_add_mark</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale, gdouble          value, GtkPositionType  position, const gchar     *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_clear_marks</NAME>
<RETURNS>void               </RETURNS>
GtkScale        *scale
</FUNCTION>
<STRUCT>
<NAME>GtkScalePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SCALE_BUTTON</NAME>
#define GTK_TYPE_SCALE_BUTTON                 (gtk_scale_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SCALE_BUTTON</NAME>
#define GTK_SCALE_BUTTON(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SCALE_BUTTON, GtkScaleButton))
</MACRO>
<MACRO>
<NAME>GTK_SCALE_BUTTON_CLASS</NAME>
#define GTK_SCALE_BUTTON_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCALE_BUTTON, GtkScaleButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCALE_BUTTON</NAME>
#define GTK_IS_SCALE_BUTTON(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SCALE_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCALE_BUTTON_CLASS</NAME>
#define GTK_IS_SCALE_BUTTON_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCALE_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_SCALE_BUTTON_GET_CLASS</NAME>
#define GTK_SCALE_BUTTON_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SCALE_BUTTON, GtkScaleButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkScaleButton</NAME>
struct _GtkScaleButton
{
  GtkButton parent;

  /*< private >*/
  GtkScaleButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkScaleButtonClass</NAME>
struct _GtkScaleButtonClass
{
  GtkButtonClass parent_class;

  /* signals */
  void	(* value_changed) (GtkScaleButton *button,
                           gdouble         value);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_scale_button_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_new</NAME>
<RETURNS>GtkWidget  *      </RETURNS>
GtkIconSize      size, gdouble          min, gdouble          max, gdouble          step, const gchar    **icons
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_set_icons</NAME>
<RETURNS>void              </RETURNS>
GtkScaleButton  *button, const gchar    **icons
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_get_value</NAME>
<RETURNS>gdouble           </RETURNS>
GtkScaleButton  *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_set_value</NAME>
<RETURNS>void              </RETURNS>
GtkScaleButton  *button, gdouble          value
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_get_adjustment</NAME>
<RETURNS>GtkAdjustment  *  </RETURNS>
GtkScaleButton  *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_set_adjustment</NAME>
<RETURNS>void              </RETURNS>
GtkScaleButton  *button, GtkAdjustment   *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_get_plus_button</NAME>
<RETURNS>GtkWidget  *      </RETURNS>
GtkScaleButton  *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_get_minus_button</NAME>
<RETURNS>GtkWidget  *      </RETURNS>
GtkScaleButton  *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_scale_button_get_popup</NAME>
<RETURNS>GtkWidget  *      </RETURNS>
GtkScaleButton  *button
</FUNCTION>
<STRUCT>
<NAME>GtkScaleButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SCROLLABLE</NAME>
#define GTK_TYPE_SCROLLABLE            (gtk_scrollable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SCROLLABLE</NAME>
#define GTK_SCROLLABLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj),     GTK_TYPE_SCROLLABLE, GtkScrollable))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCROLLABLE</NAME>
#define GTK_IS_SCROLLABLE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj),     GTK_TYPE_SCROLLABLE))
</MACRO>
<MACRO>
<NAME>GTK_SCROLLABLE_GET_IFACE</NAME>
#define GTK_SCROLLABLE_GET_IFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), GTK_TYPE_SCROLLABLE, GtkScrollableInterface))
</MACRO>
<STRUCT>
<NAME>GtkScrollableInterface</NAME>
struct _GtkScrollableInterface
{
  GTypeInterface base_iface;

  gboolean (* get_border) (GtkScrollable *scrollable,
                           GtkBorder     *border);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_scrollable_get_type</NAME>
<RETURNS>GType                 </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_get_hadjustment</NAME>
<RETURNS>GtkAdjustment        *</RETURNS>
GtkScrollable       *scrollable
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_set_hadjustment</NAME>
<RETURNS>void                  </RETURNS>
GtkScrollable       *scrollable, GtkAdjustment       *hadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_get_vadjustment</NAME>
<RETURNS>GtkAdjustment        *</RETURNS>
GtkScrollable       *scrollable
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_set_vadjustment</NAME>
<RETURNS>void                  </RETURNS>
GtkScrollable       *scrollable, GtkAdjustment       *vadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_get_hscroll_policy</NAME>
<RETURNS>GtkScrollablePolicy   </RETURNS>
GtkScrollable       *scrollable
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_set_hscroll_policy</NAME>
<RETURNS>void                  </RETURNS>
GtkScrollable       *scrollable, GtkScrollablePolicy  policy
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_get_vscroll_policy</NAME>
<RETURNS>GtkScrollablePolicy   </RETURNS>
GtkScrollable       *scrollable
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_set_vscroll_policy</NAME>
<RETURNS>void                  </RETURNS>
GtkScrollable       *scrollable, GtkScrollablePolicy  policy
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollable_get_border</NAME>
<RETURNS>gboolean              </RETURNS>
GtkScrollable       *scrollable, GtkBorder           *border
</FUNCTION>
<STRUCT>
<NAME>GtkScrollable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SCROLLBAR</NAME>
#define GTK_TYPE_SCROLLBAR            (gtk_scrollbar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SCROLLBAR</NAME>
#define GTK_SCROLLBAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SCROLLBAR, GtkScrollbar))
</MACRO>
<MACRO>
<NAME>GTK_SCROLLBAR_CLASS</NAME>
#define GTK_SCROLLBAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCROLLBAR, GtkScrollbarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCROLLBAR</NAME>
#define GTK_IS_SCROLLBAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SCROLLBAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCROLLBAR_CLASS</NAME>
#define GTK_IS_SCROLLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCROLLBAR))
</MACRO>
<MACRO>
<NAME>GTK_SCROLLBAR_GET_CLASS</NAME>
#define GTK_SCROLLBAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SCROLLBAR, GtkScrollbarClass))
</MACRO>
<STRUCT>
<NAME>GtkScrollbar</NAME>
struct _GtkScrollbar
{
  GtkRange range;
};
</STRUCT>
<STRUCT>
<NAME>GtkScrollbarClass</NAME>
struct _GtkScrollbarClass
{
  GtkRangeClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_scrollbar_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrollbar_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkOrientation  orientation, GtkAdjustment  *adjustment
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SCROLLED_WINDOW</NAME>
#define GTK_TYPE_SCROLLED_WINDOW            (gtk_scrolled_window_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SCROLLED_WINDOW</NAME>
#define GTK_SCROLLED_WINDOW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindow))
</MACRO>
<MACRO>
<NAME>GTK_SCROLLED_WINDOW_CLASS</NAME>
#define GTK_SCROLLED_WINDOW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCROLLED_WINDOW</NAME>
#define GTK_IS_SCROLLED_WINDOW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SCROLLED_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_IS_SCROLLED_WINDOW_CLASS</NAME>
#define GTK_IS_SCROLLED_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SCROLLED_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_SCROLLED_WINDOW_GET_CLASS</NAME>
#define GTK_SCROLLED_WINDOW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SCROLLED_WINDOW, GtkScrolledWindowClass))
</MACRO>
<STRUCT>
<NAME>GtkScrolledWindow</NAME>
struct _GtkScrolledWindow
{
  GtkBin container;

  GtkScrolledWindowPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkScrolledWindowClass</NAME>
struct _GtkScrolledWindowClass
{
  GtkBinClass parent_class;

  gint scrollbar_spacing;

  /*< public >*/

  /* Action signals for keybindings. Do not connect to these signals
   */

  /* Unfortunately, GtkScrollType is deficient in that there is
   * no horizontal/vertical variants for GTK_SCROLL_START/END,
   * so we have to add an additional boolean flag.
   */
  gboolean (*scroll_child) (GtkScrolledWindow *scrolled_window,
	  		    GtkScrollType      scroll,
			    gboolean           horizontal);

  void (* move_focus_out) (GtkScrolledWindow *scrolled_window,
			   GtkDirectionType   direction);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkCornerType</NAME>
typedef enum
{
  GTK_CORNER_TOP_LEFT,
  GTK_CORNER_BOTTOM_LEFT,
  GTK_CORNER_TOP_RIGHT,
  GTK_CORNER_BOTTOM_RIGHT
} GtkCornerType;
</ENUM>
<ENUM>
<NAME>GtkPolicyType</NAME>
typedef enum
{
  GTK_POLICY_ALWAYS,
  GTK_POLICY_AUTOMATIC,
  GTK_POLICY_NEVER,
  GTK_POLICY_EXTERNAL
} GtkPolicyType;
</ENUM>
<FUNCTION>
<NAME>gtk_scrolled_window_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_new</NAME>
<RETURNS>GtkWidget *     </RETURNS>
GtkAdjustment     *hadjustment, GtkAdjustment     *vadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_hadjustment</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, GtkAdjustment     *hadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_vadjustment</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, GtkAdjustment     *vadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_hadjustment</NAME>
<RETURNS>GtkAdjustment * </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_vadjustment</NAME>
<RETURNS>GtkAdjustment * </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_hscrollbar</NAME>
<RETURNS>GtkWidget *     </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_vscrollbar</NAME>
<RETURNS>GtkWidget *     </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_policy</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, GtkPolicyType      hscrollbar_policy, GtkPolicyType      vscrollbar_policy
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_policy</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, GtkPolicyType     *hscrollbar_policy, GtkPolicyType     *vscrollbar_policy
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_placement</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, GtkCornerType      window_placement
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_unset_placement</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_placement</NAME>
<RETURNS>GtkCornerType   </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_shadow_type</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, GtkShadowType      type
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_shadow_type</NAME>
<RETURNS>GtkShadowType   </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_add_with_viewport</NAME>
<DEPRECATED/>
<RETURNS>void 	       </RETURNS>
GtkScrolledWindow *scrolled_window, GtkWidget		*child
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_min_content_width</NAME>
<RETURNS>gint            </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_min_content_width</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gint               width
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_min_content_height</NAME>
<RETURNS>gint            </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_min_content_height</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gint               height
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_kinetic_scrolling</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gboolean           kinetic_scrolling
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_kinetic_scrolling</NAME>
<RETURNS>gboolean        </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_capture_button_press</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gboolean           capture_button_press
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_capture_button_press</NAME>
<RETURNS>gboolean        </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_overlay_scrolling</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gboolean           overlay_scrolling
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_overlay_scrolling</NAME>
<RETURNS>gboolean        </RETURNS>
GtkScrolledWindow   *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_max_content_width</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gint               width
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_max_content_width</NAME>
<RETURNS>gint            </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_max_content_height</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gint               height
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_max_content_height</NAME>
<RETURNS>gint            </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_propagate_natural_width</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gboolean           propagate
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_propagate_natural_width</NAME>
<RETURNS>gboolean        </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_set_propagate_natural_height</NAME>
<RETURNS>void            </RETURNS>
GtkScrolledWindow *scrolled_window, gboolean           propagate
</FUNCTION>
<FUNCTION>
<NAME>gtk_scrolled_window_get_propagate_natural_height</NAME>
<RETURNS>gboolean        </RETURNS>
GtkScrolledWindow *scrolled_window
</FUNCTION>
<STRUCT>
<NAME>GtkScrolledWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SEARCH_BAR</NAME>
#define GTK_TYPE_SEARCH_BAR                 (gtk_search_bar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SEARCH_BAR</NAME>
#define GTK_SEARCH_BAR(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SEARCH_BAR, GtkSearchBar))
</MACRO>
<MACRO>
<NAME>GTK_SEARCH_BAR_CLASS</NAME>
#define GTK_SEARCH_BAR_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEARCH_BAR, GtkSearchBarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEARCH_BAR</NAME>
#define GTK_IS_SEARCH_BAR(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SEARCH_BAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEARCH_BAR_CLASS</NAME>
#define GTK_IS_SEARCH_BAR_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEARCH_BAR))
</MACRO>
<MACRO>
<NAME>GTK_SEARCH_BAR_GET_CLASS</NAME>
#define GTK_SEARCH_BAR_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SEARCH_BAR, GtkSearchBarClass))
</MACRO>
<STRUCT>
<NAME>GtkSearchBar</NAME>
struct _GtkSearchBar
{
  /*< private >*/
  GtkBin parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkSearchBarClass</NAME>
struct _GtkSearchBarClass
{
  GtkBinClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_search_bar_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_new</NAME>
<RETURNS>GtkWidget *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_connect_entry</NAME>
<RETURNS>void         </RETURNS>
GtkSearchBar *bar, GtkEntry     *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_get_search_mode</NAME>
<RETURNS>gboolean     </RETURNS>
GtkSearchBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_set_search_mode</NAME>
<RETURNS>void         </RETURNS>
GtkSearchBar *bar, gboolean      search_mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_get_show_close_button</NAME>
<RETURNS>gboolean     </RETURNS>
GtkSearchBar *bar
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_set_show_close_button</NAME>
<RETURNS>void         </RETURNS>
GtkSearchBar *bar, gboolean      visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_bar_handle_event</NAME>
<RETURNS>gboolean     </RETURNS>
GtkSearchBar *bar, GdkEvent     *event
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SEARCH_ENTRY</NAME>
#define GTK_TYPE_SEARCH_ENTRY                 (gtk_search_entry_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SEARCH_ENTRY</NAME>
#define GTK_SEARCH_ENTRY(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SEARCH_ENTRY, GtkSearchEntry))
</MACRO>
<MACRO>
<NAME>GTK_SEARCH_ENTRY_CLASS</NAME>
#define GTK_SEARCH_ENTRY_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEARCH_ENTRY, GtkSearchEntryClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEARCH_ENTRY</NAME>
#define GTK_IS_SEARCH_ENTRY(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SEARCH_ENTRY))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEARCH_ENTRY_CLASS</NAME>
#define GTK_IS_SEARCH_ENTRY_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEARCH_ENTRY))
</MACRO>
<MACRO>
<NAME>GTK_SEARCH_ENTRY_GET_CLASS</NAME>
#define GTK_SEARCH_ENTRY_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SEARCH_ENTRY, GtkSearchEntryClass))
</MACRO>
<STRUCT>
<NAME>GtkSearchEntry</NAME>
struct _GtkSearchEntry
{
  GtkEntry parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkSearchEntryClass</NAME>
struct _GtkSearchEntryClass
{
  GtkEntryClass parent_class;

  void (*search_changed) (GtkSearchEntry *entry);
  void (*next_match)     (GtkSearchEntry *entry);
  void (*previous_match) (GtkSearchEntry *entry);
  void (*stop_search)    (GtkSearchEntry *entry);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_search_entry_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_entry_new</NAME>
<RETURNS>GtkWidget *      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_search_entry_handle_event</NAME>
<RETURNS>gboolean         </RETURNS>
GtkSearchEntry *entry, GdkEvent       *event
</FUNCTION>
<STRUCT>
<NAME>GtkTargetPair</NAME>
struct _GtkTargetPair
{
  GdkAtom   target;
  guint     flags;
  guint     info;
};
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SELECTION_DATA</NAME>
#define GTK_TYPE_SELECTION_DATA (gtk_selection_data_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TYPE_TARGET_LIST</NAME>
#define GTK_TYPE_TARGET_LIST    (gtk_target_list_get_type ())
</MACRO>
<ENUM>
<NAME>GtkTargetFlags</NAME>
typedef enum {
  GTK_TARGET_SAME_APP = 1 << 0,    /*< nick=same-app >*/
  GTK_TARGET_SAME_WIDGET = 1 << 1, /*< nick=same-widget >*/
  GTK_TARGET_OTHER_APP = 1 << 2,   /*< nick=other-app >*/
  GTK_TARGET_OTHER_WIDGET = 1 << 3 /*< nick=other-widget >*/
} GtkTargetFlags;
</ENUM>
<STRUCT>
<NAME>GtkTargetEntry</NAME>
struct _GtkTargetEntry
{
  gchar *target;
  guint  flags;
  guint  info;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_target_list_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_new</NAME>
<RETURNS>GtkTargetList  *</RETURNS>
const GtkTargetEntry *targets, guint                 ntargets
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_ref</NAME>
<RETURNS>GtkTargetList  *</RETURNS>
GtkTargetList  *list
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_unref</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_add</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list, GdkAtom         target, guint           flags, guint           info
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_add_text_targets</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list, guint           info
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_add_rich_text_targets</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list, guint           info, gboolean        deserializable, GtkTextBuffer  *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_add_image_targets</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list, guint           info, gboolean        writable
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_add_uri_targets</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list, guint           info
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_add_table</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList        *list, const GtkTargetEntry *targets, guint                 ntargets
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_remove</NAME>
<RETURNS>void            </RETURNS>
GtkTargetList  *list, GdkAtom         target
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_list_find</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTargetList  *list, GdkAtom         target, guint          *info
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_table_new_from_list</NAME>
<RETURNS>GtkTargetEntry  * </RETURNS>
GtkTargetList  *list, gint           *n_targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_table_free</NAME>
<RETURNS>void              </RETURNS>
GtkTargetEntry *targets, gint            n_targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_owner_set</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget  *widget, GdkAtom     selection, guint32     time_
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_owner_set_for_display</NAME>
<RETURNS>gboolean  </RETURNS>
GdkDisplay *display, GtkWidget  *widget, GdkAtom     selection, guint32     time_
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_add_target</NAME>
<RETURNS>void      </RETURNS>
GtkWidget            *widget, GdkAtom               selection, GdkAtom               target, guint                 info
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_add_targets</NAME>
<RETURNS>void      </RETURNS>
GtkWidget            *widget, GdkAtom               selection, const GtkTargetEntry *targets, guint                 ntargets
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_clear_targets</NAME>
<RETURNS>void      </RETURNS>
GtkWidget            *widget, GdkAtom               selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_convert</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget            *widget, GdkAtom               selection, GdkAtom               target, guint32               time_
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_remove_all</NAME>
<RETURNS>void      </RETURNS>
GtkWidget             *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_selection</NAME>
<RETURNS>GdkAtom        </RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_target</NAME>
<RETURNS>GdkAtom        </RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_data_type</NAME>
<RETURNS>GdkAtom        </RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_format</NAME>
<RETURNS>gint           </RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_data</NAME>
<RETURNS>const guchar  *</RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_length</NAME>
<RETURNS>gint           </RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_data_with_length</NAME>
<RETURNS>const guchar  *</RETURNS>
const GtkSelectionData *selection_data, gint                   *length
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_display</NAME>
<RETURNS>GdkDisplay    *</RETURNS>
const GtkSelectionData *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_set</NAME>
<RETURNS>void      </RETURNS>
GtkSelectionData     *selection_data, GdkAtom               type, gint                  format, const guchar         *data, gint                  length
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_set_text</NAME>
<RETURNS>gboolean  </RETURNS>
GtkSelectionData     *selection_data, const gchar          *str, gint                  len
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_text</NAME>
<RETURNS>guchar  * </RETURNS>
const GtkSelectionData     *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_set_pixbuf</NAME>
<RETURNS>gboolean  </RETURNS>
GtkSelectionData  *selection_data, GdkPixbuf         *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_pixbuf</NAME>
<RETURNS>GdkPixbuf  *</RETURNS>
const GtkSelectionData  *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_set_uris</NAME>
<RETURNS>gboolean  </RETURNS>
GtkSelectionData     *selection_data, gchar               **uris
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_uris</NAME>
<RETURNS>gchar   **</RETURNS>
const GtkSelectionData     *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_targets</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkSelectionData  *selection_data, GdkAtom          **targets, gint              *n_atoms
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_targets_include_text</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkSelectionData  *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_targets_include_rich_text</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkSelectionData *selection_data, GtkTextBuffer    *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_targets_include_image</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkSelectionData  *selection_data, gboolean           writable
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_targets_include_uri</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkSelectionData  *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_targets_include_text</NAME>
<RETURNS>gboolean  </RETURNS>
GdkAtom       *targets, gint           n_targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_targets_include_rich_text</NAME>
<RETURNS>gboolean  </RETURNS>
GdkAtom       *targets, gint           n_targets, GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_targets_include_image</NAME>
<RETURNS>gboolean  </RETURNS>
GdkAtom       *targets, gint           n_targets, gboolean       writable
</FUNCTION>
<FUNCTION>
<NAME>gtk_targets_include_uri</NAME>
<RETURNS>gboolean  </RETURNS>
GdkAtom       *targets, gint           n_targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_copy</NAME>
<RETURNS>GtkSelectionData  *</RETURNS>
const GtkSelectionData *data
</FUNCTION>
<FUNCTION>
<NAME>gtk_selection_data_free</NAME>
<RETURNS>void               </RETURNS>
GtkSelectionData *data
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_entry_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_entry_new</NAME>
<RETURNS>GtkTargetEntry    *</RETURNS>
const gchar    *target, guint           flags, guint           info
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_entry_copy</NAME>
<RETURNS>GtkTargetEntry    *</RETURNS>
GtkTargetEntry *data
</FUNCTION>
<FUNCTION>
<NAME>gtk_target_entry_free</NAME>
<RETURNS>void               </RETURNS>
GtkTargetEntry *data
</FUNCTION>
<STRUCT>
<NAME>GtkTargetList</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SEPARATOR</NAME>
#define GTK_TYPE_SEPARATOR                  (gtk_separator_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR</NAME>
#define GTK_SEPARATOR(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SEPARATOR, GtkSeparator))
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_CLASS</NAME>
#define GTK_SEPARATOR_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEPARATOR, GtkSeparatorClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEPARATOR</NAME>
#define GTK_IS_SEPARATOR(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SEPARATOR))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEPARATOR_CLASS</NAME>
#define GTK_IS_SEPARATOR_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEPARATOR))
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_GET_CLASS</NAME>
#define GTK_SEPARATOR_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SEPARATOR, GtkSeparatorClass))
</MACRO>
<STRUCT>
<NAME>GtkSeparator</NAME>
struct _GtkSeparator
{
  GtkWidget widget;

  GtkSeparatorPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSeparatorClass</NAME>
struct _GtkSeparatorClass
{
  GtkWidgetClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_separator_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_separator_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
GtkOrientation orientation
</FUNCTION>
<STRUCT>
<NAME>GtkSeparatorPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SEPARATOR_MENU_ITEM</NAME>
#define GTK_TYPE_SEPARATOR_MENU_ITEM            (gtk_separator_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_MENU_ITEM</NAME>
#define GTK_SEPARATOR_MENU_ITEM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItem))
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_MENU_ITEM_CLASS</NAME>
#define GTK_SEPARATOR_MENU_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEPARATOR_MENU_ITEM</NAME>
#define GTK_IS_SEPARATOR_MENU_ITEM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SEPARATOR_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEPARATOR_MENU_ITEM_CLASS</NAME>
#define GTK_IS_SEPARATOR_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEPARATOR_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_MENU_ITEM_GET_CLASS</NAME>
#define GTK_SEPARATOR_MENU_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SEPARATOR_MENU_ITEM, GtkSeparatorMenuItemClass))
</MACRO>
<STRUCT>
<NAME>GtkSeparatorMenuItem</NAME>
struct _GtkSeparatorMenuItem
{
  GtkMenuItem menu_item;
};
</STRUCT>
<STRUCT>
<NAME>GtkSeparatorMenuItemClass</NAME>
struct _GtkSeparatorMenuItemClass
{
  GtkMenuItemClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_separator_menu_item_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_separator_menu_item_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SEPARATOR_TOOL_ITEM</NAME>
#define GTK_TYPE_SEPARATOR_TOOL_ITEM            (gtk_separator_tool_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_TOOL_ITEM</NAME>
#define GTK_SEPARATOR_TOOL_ITEM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM, GtkSeparatorToolItem))
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_TOOL_ITEM_CLASS</NAME>
#define GTK_SEPARATOR_TOOL_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SEPARATOR_TOOL_ITEM, GtkSeparatorToolItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEPARATOR_TOOL_ITEM</NAME>
#define GTK_IS_SEPARATOR_TOOL_ITEM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_SEPARATOR_TOOL_ITEM_CLASS</NAME>
#define GTK_IS_SEPARATOR_TOOL_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SEPARATOR_TOOL_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_SEPARATOR_TOOL_ITEM_GET_CLASS</NAME>
#define GTK_SEPARATOR_TOOL_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_SEPARATOR_TOOL_ITEM, GtkSeparatorToolItemClass))
</MACRO>
<STRUCT>
<NAME>GtkSeparatorToolItem</NAME>
struct _GtkSeparatorToolItem
{
  GtkToolItem parent;

  /*< private >*/
  GtkSeparatorToolItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSeparatorToolItemClass</NAME>
struct _GtkSeparatorToolItemClass
{
  GtkToolItemClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_separator_tool_item_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_separator_tool_item_new</NAME>
<RETURNS>GtkToolItem  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_separator_tool_item_get_draw</NAME>
<RETURNS>gboolean      </RETURNS>
GtkSeparatorToolItem *item
</FUNCTION>
<FUNCTION>
<NAME>gtk_separator_tool_item_set_draw</NAME>
<RETURNS>void          </RETURNS>
GtkSeparatorToolItem *item, gboolean              draw
</FUNCTION>
<STRUCT>
<NAME>GtkSeparatorToolItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SETTINGS</NAME>
#define GTK_TYPE_SETTINGS             (gtk_settings_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SETTINGS</NAME>
#define GTK_SETTINGS(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SETTINGS, GtkSettings))
</MACRO>
<MACRO>
<NAME>GTK_SETTINGS_CLASS</NAME>
#define GTK_SETTINGS_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SETTINGS, GtkSettingsClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SETTINGS</NAME>
#define GTK_IS_SETTINGS(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SETTINGS))
</MACRO>
<MACRO>
<NAME>GTK_IS_SETTINGS_CLASS</NAME>
#define GTK_IS_SETTINGS_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SETTINGS))
</MACRO>
<MACRO>
<NAME>GTK_SETTINGS_GET_CLASS</NAME>
#define GTK_SETTINGS_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SETTINGS, GtkSettingsClass))
</MACRO>
<STRUCT>
<NAME>GtkSettings</NAME>
struct _GtkSettings
{
  GObject parent_instance;

  /*< private >*/
  GtkSettingsPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSettingsClass</NAME>
struct _GtkSettingsClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GtkSettingsValue</NAME>
struct _GtkSettingsValue
{
  /* origin should be something like "filename:linenumber" for rc files,
   * or e.g. "XProperty" for other sources
   */
  gchar *origin;

  /* valid types are LONG, DOUBLE and STRING corresponding to the token parsed,
   * or a GSTRING holding an unparsed statement
   */
  GValue value;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_settings_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_get_default</NAME>
<RETURNS>GtkSettings *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_get_for_screen</NAME>
<RETURNS>GtkSettings *    </RETURNS>
GdkScreen *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_install_property</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GParamSpec         *pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_install_property_parser</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GParamSpec         *pspec, GtkRcPropertyParser parser
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_property_parse_color</NAME>
<RETURNS>gboolean  </RETURNS>
const GParamSpec *pspec, const GString    *gstring, GValue           *property_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_property_parse_enum</NAME>
<RETURNS>gboolean  </RETURNS>
const GParamSpec *pspec, const GString    *gstring, GValue           *property_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_property_parse_flags</NAME>
<RETURNS>gboolean  </RETURNS>
const GParamSpec *pspec, const GString    *gstring, GValue           *property_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_property_parse_requisition</NAME>
<RETURNS>gboolean  </RETURNS>
const GParamSpec *pspec, const GString    *gstring, GValue           *property_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_property_parse_border</NAME>
<RETURNS>gboolean  </RETURNS>
const GParamSpec *pspec, const GString    *gstring, GValue           *property_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_set_property_value</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkSettings            *settings, const gchar            *name, const GtkSettingsValue *svalue
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_set_string_property</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkSettings            *settings, const gchar            *name, const gchar            *v_string, const gchar            *origin
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_set_long_property</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkSettings            *settings, const gchar            *name, glong                   v_long, const gchar            *origin
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_set_double_property</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkSettings            *settings, const gchar            *name, gdouble                 v_double, const gchar            *origin
</FUNCTION>
<FUNCTION>
<NAME>gtk_settings_reset_property</NAME>
<RETURNS>void      </RETURNS>
GtkSettings            *settings, const gchar            *name
</FUNCTION>
<STRUCT>
<NAME>GtkSettingsPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SHORTCUT_LABEL</NAME>
#define GTK_TYPE_SHORTCUT_LABEL (gtk_shortcut_label_get_type())
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUT_LABEL</NAME>
#define GTK_SHORTCUT_LABEL(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SHORTCUT_LABEL, GtkShortcutLabel))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUT_LABEL_CLASS</NAME>
#define GTK_SHORTCUT_LABEL_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SHORTCUT_LABEL, GtkShortcutLabelClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUT_LABEL</NAME>
#define GTK_IS_SHORTCUT_LABEL(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SHORTCUT_LABEL))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUT_LABEL_CLASS</NAME>
#define GTK_IS_SHORTCUT_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SHORTCUT_LABEL))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUT_LABEL_GET_CLASS</NAME>
#define GTK_SHORTCUT_LABEL_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SHORTCUT_LABEL, GtkShortcutLabelClass))
</MACRO>
<FUNCTION>
<NAME>gtk_shortcut_label_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_shortcut_label_new</NAME>
<RETURNS>GtkWidget    *</RETURNS>
const gchar      *accelerator
</FUNCTION>
<FUNCTION>
<NAME>gtk_shortcut_label_get_accelerator</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkShortcutLabel *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_shortcut_label_set_accelerator</NAME>
<RETURNS>void          </RETURNS>
GtkShortcutLabel *self, const gchar      *accelerator
</FUNCTION>
<FUNCTION>
<NAME>gtk_shortcut_label_get_disabled_text</NAME>
<RETURNS>const gchar  *</RETURNS>
GtkShortcutLabel *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_shortcut_label_set_disabled_text</NAME>
<RETURNS>void          </RETURNS>
GtkShortcutLabel *self, const gchar      *disabled_text
</FUNCTION>
<STRUCT>
<NAME>GtkShortcutLabel</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkShortcutLabelClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SHORTCUTS_GROUP</NAME>
#define GTK_TYPE_SHORTCUTS_GROUP            (gtk_shortcuts_group_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_GROUP</NAME>
#define GTK_SHORTCUTS_GROUP(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SHORTCUTS_GROUP, GtkShortcutsGroup))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_GROUP_CLASS</NAME>
#define GTK_SHORTCUTS_GROUP_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SHORTCUTS_GROUP, GtkShortcutsGroupClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_GROUP</NAME>
#define GTK_IS_SHORTCUTS_GROUP(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SHORTCUTS_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_GROUP_CLASS</NAME>
#define GTK_IS_SHORTCUTS_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SHORTCUTS_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_GROUP_GET_CLASS</NAME>
#define GTK_SHORTCUTS_GROUP_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SHORTCUTS_GROUP, GtkShortcutsGroupClass))
</MACRO>
<FUNCTION>
<NAME>gtk_shortcuts_group_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkShortcutsGroup</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkShortcutsGroupClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SHORTCUTS_SECTION</NAME>
#define GTK_TYPE_SHORTCUTS_SECTION (gtk_shortcuts_section_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_SECTION</NAME>
#define GTK_SHORTCUTS_SECTION(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SHORTCUTS_SECTION, GtkShortcutsSection))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_SECTION_CLASS</NAME>
#define GTK_SHORTCUTS_SECTION_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SHORTCUTS_SECTION, GtkShortcutsSectionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_SECTION</NAME>
#define GTK_IS_SHORTCUTS_SECTION(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SHORTCUTS_SECTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_SECTION_CLASS</NAME>
#define GTK_IS_SHORTCUTS_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SHORTCUTS_SECTION))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_SECTION_GET_CLASS</NAME>
#define GTK_SHORTCUTS_SECTION_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SHORTCUTS_SECTION, GtkShortcutsSectionClass))
</MACRO>
<FUNCTION>
<NAME>gtk_shortcuts_section_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkShortcutsSection</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkShortcutsSectionClass</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SHORTCUTS_SHORTCUT</NAME>
#define GTK_TYPE_SHORTCUTS_SHORTCUT (gtk_shortcuts_shortcut_get_type())
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_SHORTCUT</NAME>
#define GTK_SHORTCUTS_SHORTCUT(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SHORTCUTS_SHORTCUT, GtkShortcutsShortcut))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_SHORTCUT_CLASS</NAME>
#define GTK_SHORTCUTS_SHORTCUT_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SHORTCUTS_SHORTCUT, GtkShortcutsShortcutClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_SHORTCUT</NAME>
#define GTK_IS_SHORTCUTS_SHORTCUT(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SHORTCUTS_SHORTCUT))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_SHORTCUT_CLASS</NAME>
#define GTK_IS_SHORTCUTS_SHORTCUT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SHORTCUTS_SHORTCUT))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_SHORTCUT_GET_CLASS</NAME>
#define GTK_SHORTCUTS_SHORTCUT_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SHORTCUTS_SHORTCUT, GtkShortcutsShortcutClass))
</MACRO>
<ENUM>
<NAME>GtkShortcutType</NAME>
typedef enum {
  GTK_SHORTCUT_ACCELERATOR,
  GTK_SHORTCUT_GESTURE_PINCH,
  GTK_SHORTCUT_GESTURE_STRETCH,
  GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE,
  GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE,
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT,
  GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT,
  GTK_SHORTCUT_GESTURE
} GtkShortcutType;
</ENUM>
<FUNCTION>
<NAME>gtk_shortcuts_shortcut_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkShortcutsShortcut</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkShortcutsShortcutClass</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_shortcuts_shortcut_update_accel</NAME>
<RETURNS>void  </RETURNS>
GtkShortcutsShortcut *self, GtkWindow            *window
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SHORTCUTS_WINDOW</NAME>
#define GTK_TYPE_SHORTCUTS_WINDOW            (gtk_shortcuts_window_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_WINDOW</NAME>
#define GTK_SHORTCUTS_WINDOW(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SHORTCUTS_WINDOW, GtkShortcutsWindow))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_WINDOW_CLASS</NAME>
#define GTK_SHORTCUTS_WINDOW_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SHORTCUTS_WINDOW, GtkShortcutsWindowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_WINDOW</NAME>
#define GTK_IS_SHORTCUTS_WINDOW(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SHORTCUTS_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_IS_SHORTCUTS_WINDOW_CLASS</NAME>
#define GTK_IS_SHORTCUTS_WINDOW_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SHORTCUTS_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_SHORTCUTS_WINDOW_GET_CLASS</NAME>
#define GTK_SHORTCUTS_WINDOW_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SHORTCUTS_WINDOW, GtkShortcutsWindowClass))
</MACRO>
<STRUCT>
<NAME>GtkShortcutsWindow</NAME>
struct _GtkShortcutsWindow
{
  GtkWindow window;
};
</STRUCT>
<STRUCT>
<NAME>GtkShortcutsWindowClass</NAME>
struct _GtkShortcutsWindowClass
{
  GtkWindowClass parent_class;

  void (*close)  (GtkShortcutsWindow *self);
  void (*search) (GtkShortcutsWindow *self);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_shortcuts_window_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_shortcuts_window_set_window</NAME>
<RETURNS>void  </RETURNS>
GtkShortcutsWindow *self, GtkWindow          *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_show_uri</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GdkScreen   *screen, const gchar *uri, guint32      timestamp, GError     **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_show_uri_on_window</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWindow   *parent, const char  *uri, guint32      timestamp, GError     **error
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SIZE_GROUP</NAME>
#define GTK_TYPE_SIZE_GROUP            (gtk_size_group_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SIZE_GROUP</NAME>
#define GTK_SIZE_GROUP(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroup))
</MACRO>
<MACRO>
<NAME>GTK_SIZE_GROUP_CLASS</NAME>
#define GTK_SIZE_GROUP_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SIZE_GROUP, GtkSizeGroupClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SIZE_GROUP</NAME>
#define GTK_IS_SIZE_GROUP(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SIZE_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_IS_SIZE_GROUP_CLASS</NAME>
#define GTK_IS_SIZE_GROUP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SIZE_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_SIZE_GROUP_GET_CLASS</NAME>
#define GTK_SIZE_GROUP_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SIZE_GROUP, GtkSizeGroupClass))
</MACRO>
<STRUCT>
<NAME>GtkSizeGroup</NAME>
struct _GtkSizeGroup
{
  GObject parent_instance;

  /*< private >*/
  GtkSizeGroupPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSizeGroupClass</NAME>
struct _GtkSizeGroupClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_size_group_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_new</NAME>
<RETURNS>GtkSizeGroup  *   </RETURNS>
GtkSizeGroupMode  mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_set_mode</NAME>
<RETURNS>void              </RETURNS>
GtkSizeGroup     *size_group, GtkSizeGroupMode  mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_get_mode</NAME>
<RETURNS>GtkSizeGroupMode  </RETURNS>
GtkSizeGroup     *size_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_set_ignore_hidden</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkSizeGroup *size_group, gboolean      ignore_hidden
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_get_ignore_hidden</NAME>
<DEPRECATED/>
<RETURNS>gboolean          </RETURNS>
GtkSizeGroup *size_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_add_widget</NAME>
<RETURNS>void              </RETURNS>
GtkSizeGroup     *size_group, GtkWidget        *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_remove_widget</NAME>
<RETURNS>void              </RETURNS>
GtkSizeGroup     *size_group, GtkWidget        *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_size_group_get_widgets</NAME>
<RETURNS>GSList  *         </RETURNS>
GtkSizeGroup     *size_group
</FUNCTION>
<STRUCT>
<NAME>GtkSizeGroupPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkRequestedSize</NAME>
struct _GtkRequestedSize
{
  gpointer data;
  gint     minimum_size;
  gint     natural_size;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_distribute_natural_allocation</NAME>
<RETURNS>gint                 </RETURNS>
gint              extra_space, guint             n_requested_sizes, GtkRequestedSize *sizes
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_SOCKET</NAME>
#define GTK_TYPE_SOCKET            (gtk_socket_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SOCKET</NAME>
#define GTK_SOCKET(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SOCKET, GtkSocket))
</MACRO>
<MACRO>
<NAME>GTK_SOCKET_CLASS</NAME>
#define GTK_SOCKET_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SOCKET, GtkSocketClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SOCKET</NAME>
#define GTK_IS_SOCKET(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SOCKET))
</MACRO>
<MACRO>
<NAME>GTK_IS_SOCKET_CLASS</NAME>
#define GTK_IS_SOCKET_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SOCKET))
</MACRO>
<MACRO>
<NAME>GTK_SOCKET_GET_CLASS</NAME>
#define GTK_SOCKET_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SOCKET, GtkSocketClass))
</MACRO>
<STRUCT>
<NAME>GtkSocket</NAME>
struct _GtkSocket
{
  GtkContainer container;

  GtkSocketPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSocketClass</NAME>
struct _GtkSocketClass
{
  GtkContainerClass parent_class;

  void     (*plug_added)   (GtkSocket *socket_);
  gboolean (*plug_removed) (GtkSocket *socket_);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_socket_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_socket_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_socket_add_id</NAME>
<RETURNS>void        </RETURNS>
GtkSocket *socket_, Window     window
</FUNCTION>
<FUNCTION>
<NAME>gtk_socket_get_id</NAME>
<RETURNS>Window      </RETURNS>
GtkSocket *socket_
</FUNCTION>
<FUNCTION>
<NAME>gtk_socket_get_plug_window</NAME>
<RETURNS>GdkWindow  *</RETURNS>
GtkSocket *socket_
</FUNCTION>
<STRUCT>
<NAME>GtkSocketPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SPIN_BUTTON</NAME>
#define GTK_TYPE_SPIN_BUTTON                  (gtk_spin_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SPIN_BUTTON</NAME>
#define GTK_SPIN_BUTTON(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButton))
</MACRO>
<MACRO>
<NAME>GTK_SPIN_BUTTON_CLASS</NAME>
#define GTK_SPIN_BUTTON_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SPIN_BUTTON, GtkSpinButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SPIN_BUTTON</NAME>
#define GTK_IS_SPIN_BUTTON(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SPIN_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_SPIN_BUTTON_CLASS</NAME>
#define GTK_IS_SPIN_BUTTON_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SPIN_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_SPIN_BUTTON_GET_CLASS</NAME>
#define GTK_SPIN_BUTTON_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SPIN_BUTTON, GtkSpinButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_INPUT_ERROR</NAME>
#define GTK_INPUT_ERROR -1
</MACRO>
<ENUM>
<NAME>GtkSpinButtonUpdatePolicy</NAME>
typedef enum
{
  GTK_UPDATE_ALWAYS,
  GTK_UPDATE_IF_VALID
} GtkSpinButtonUpdatePolicy;
</ENUM>
<ENUM>
<NAME>GtkSpinType</NAME>
typedef enum
{
  GTK_SPIN_STEP_FORWARD,
  GTK_SPIN_STEP_BACKWARD,
  GTK_SPIN_PAGE_FORWARD,
  GTK_SPIN_PAGE_BACKWARD,
  GTK_SPIN_HOME,
  GTK_SPIN_END,
  GTK_SPIN_USER_DEFINED
} GtkSpinType;
</ENUM>
<STRUCT>
<NAME>GtkSpinButton</NAME>
struct _GtkSpinButton
{
  GtkEntry entry;

  /*< private >*/
  GtkSpinButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSpinButtonClass</NAME>
struct _GtkSpinButtonClass
{
  GtkEntryClass parent_class;

  gint (*input)  (GtkSpinButton *spin_button,
		  gdouble       *new_value);
  gint (*output) (GtkSpinButton *spin_button);
  void (*value_changed) (GtkSpinButton *spin_button);

  /* Action signals for keybindings, do not connect to these */
  void (*change_value) (GtkSpinButton *spin_button,
			GtkScrollType  scroll);

  void (*wrapped) (GtkSpinButton *spin_button);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_spin_button_get_type</NAME>
<RETURNS>GType 		</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_configure</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, GtkAdjustment  *adjustment, gdouble	    climb_rate, guint	    digits
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_new</NAME>
<RETURNS>GtkWidget *	</RETURNS>
GtkAdjustment  *adjustment, gdouble	    climb_rate, guint	    digits
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_new_with_range</NAME>
<RETURNS>GtkWidget *	</RETURNS>
gdouble  min, gdouble  max, gdouble  step
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_adjustment</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, GtkAdjustment  *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_adjustment</NAME>
<RETURNS>GtkAdjustment *	</RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_digits</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, guint	    digits
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_digits</NAME>
<RETURNS>guint            </RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_increments</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, gdouble         step, gdouble         page
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_increments</NAME>
<RETURNS>void             </RETURNS>
GtkSpinButton  *spin_button, gdouble        *step, gdouble        *page
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_range</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, gdouble         min, gdouble         max
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_range</NAME>
<RETURNS>void             </RETURNS>
GtkSpinButton  *spin_button, gdouble        *min, gdouble        *max
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_value</NAME>
<RETURNS>gdouble 		</RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_value_as_int</NAME>
<RETURNS>gint 		</RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_value</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, gdouble	    value
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_update_policy</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, GtkSpinButtonUpdatePolicy  policy
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_update_policy</NAME>
<RETURNS>GtkSpinButtonUpdatePolicy  </RETURNS>
GtkSpinButton *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_numeric</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, gboolean	    numeric
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_numeric</NAME>
<RETURNS>gboolean         </RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_spin</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, GtkSpinType     direction, gdouble	    increment
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_wrap</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, gboolean	    wrap
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_wrap</NAME>
<RETURNS>gboolean         </RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_set_snap_to_ticks</NAME>
<RETURNS>void 		</RETURNS>
GtkSpinButton  *spin_button, gboolean	    snap_to_ticks
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_get_snap_to_ticks</NAME>
<RETURNS>gboolean         </RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_spin_button_update</NAME>
<RETURNS>void             </RETURNS>
GtkSpinButton  *spin_button
</FUNCTION>
<STRUCT>
<NAME>GtkSpinButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SPINNER</NAME>
#define GTK_TYPE_SPINNER           (gtk_spinner_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SPINNER</NAME>
#define GTK_SPINNER(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SPINNER, GtkSpinner))
</MACRO>
<MACRO>
<NAME>GTK_SPINNER_CLASS</NAME>
#define GTK_SPINNER_CLASS(obj)     (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_SPINNER,  GtkSpinnerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SPINNER</NAME>
#define GTK_IS_SPINNER(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SPINNER))
</MACRO>
<MACRO>
<NAME>GTK_IS_SPINNER_CLASS</NAME>
#define GTK_IS_SPINNER_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE ((obj), GTK_TYPE_SPINNER))
</MACRO>
<MACRO>
<NAME>GTK_SPINNER_GET_CLASS</NAME>
#define GTK_SPINNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SPINNER, GtkSpinnerClass))
</MACRO>
<STRUCT>
<NAME>GtkSpinner</NAME>
struct _GtkSpinner
{
  GtkWidget parent;

  /*< private >*/
  GtkSpinnerPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSpinnerClass</NAME>
struct _GtkSpinnerClass
{
  GtkWidgetClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_spinner_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_spinner_new</NAME>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_spinner_start</NAME>
<RETURNS>void        </RETURNS>
GtkSpinner *spinner
</FUNCTION>
<FUNCTION>
<NAME>gtk_spinner_stop</NAME>
<RETURNS>void        </RETURNS>
GtkSpinner *spinner
</FUNCTION>
<STRUCT>
<NAME>GtkSpinnerPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_STACK</NAME>
#define GTK_TYPE_STACK (gtk_stack_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STACK</NAME>
#define GTK_STACK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_STACK, GtkStack))
</MACRO>
<MACRO>
<NAME>GTK_STACK_CLASS</NAME>
#define GTK_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_STACK, GtkStackClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STACK</NAME>
#define GTK_IS_STACK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_STACK))
</MACRO>
<MACRO>
<NAME>GTK_IS_STACK_CLASS</NAME>
#define GTK_IS_STACK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STACK))
</MACRO>
<MACRO>
<NAME>GTK_STACK_GET_CLASS</NAME>
#define GTK_STACK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_STACK, GtkStackClass))
</MACRO>
<ENUM>
<NAME>GtkStackTransitionType</NAME>
typedef enum {
  GTK_STACK_TRANSITION_TYPE_NONE,
  GTK_STACK_TRANSITION_TYPE_CROSSFADE,
  GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP,
  GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN,
  GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT,
  GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_UP,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT,
  GTK_STACK_TRANSITION_TYPE_UNDER_UP,
  GTK_STACK_TRANSITION_TYPE_UNDER_DOWN,
  GTK_STACK_TRANSITION_TYPE_UNDER_LEFT,
  GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT,
  GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN,
  GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP,
  GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT,
  GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT
} GtkStackTransitionType;
</ENUM>
<STRUCT>
<NAME>GtkStack</NAME>
struct _GtkStack {
  GtkContainer parent_instance;
};
</STRUCT>
<STRUCT>
<NAME>GtkStackClass</NAME>
struct _GtkStackClass {
  GtkContainerClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_stack_get_type</NAME>
<RETURNS>GType                   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_new</NAME>
<RETURNS>GtkWidget  *            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_add_named</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, GtkWidget              *child, const gchar            *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_add_titled</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, GtkWidget              *child, const gchar            *name, const gchar            *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_child_by_name</NAME>
<RETURNS>GtkWidget  *            </RETURNS>
GtkStack               *stack, const gchar            *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_visible_child</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, GtkWidget              *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_visible_child</NAME>
<RETURNS>GtkWidget  *            </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_visible_child_name</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, const gchar            *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_visible_child_name</NAME>
<RETURNS>const gchar  *          </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_visible_child_full</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, const gchar            *name, GtkStackTransitionType  transition
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_homogeneous</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, gboolean                homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_homogeneous</NAME>
<RETURNS>gboolean                </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_hhomogeneous</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, gboolean                hhomogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_hhomogeneous</NAME>
<RETURNS>gboolean                </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_vhomogeneous</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, gboolean                vhomogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_vhomogeneous</NAME>
<RETURNS>gboolean                </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_transition_duration</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, guint                   duration
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_transition_duration</NAME>
<RETURNS>guint                   </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_transition_type</NAME>
<RETURNS>void                    </RETURNS>
GtkStack               *stack, GtkStackTransitionType  transition
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_transition_type</NAME>
<RETURNS>GtkStackTransitionType  </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_transition_running</NAME>
<RETURNS>gboolean                </RETURNS>
GtkStack               *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_set_interpolate_size</NAME>
<RETURNS>void                    </RETURNS>
GtkStack *stack, gboolean  interpolate_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_get_interpolate_size</NAME>
<RETURNS>gboolean                </RETURNS>
GtkStack *stack
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_STACK_SIDEBAR</NAME>
#define GTK_TYPE_STACK_SIDEBAR           (gtk_stack_sidebar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STACK_SIDEBAR</NAME>
#define GTK_STACK_SIDEBAR(obj)           (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_STACK_SIDEBAR, GtkStackSidebar))
</MACRO>
<MACRO>
<NAME>GTK_IS_STACK_SIDEBAR</NAME>
#define GTK_IS_STACK_SIDEBAR(obj)        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_STACK_SIDEBAR))
</MACRO>
<MACRO>
<NAME>GTK_STACK_SIDEBAR_CLASS</NAME>
#define GTK_STACK_SIDEBAR_CLASS(klass)   (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_STACK_SIDEBAR, GtkStackSidebarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STACK_SIDEBAR_CLASS</NAME>
#define GTK_IS_STACK_SIDEBAR_CLASS(klass)(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STACK_SIDEBAR))
</MACRO>
<MACRO>
<NAME>GTK_STACK_SIDEBAR_GET_CLASS</NAME>
#define GTK_STACK_SIDEBAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_STACK_SIDEBAR, GtkStackSidebarClass))
</MACRO>
<STRUCT>
<NAME>GtkStackSidebar</NAME>
struct _GtkStackSidebar
{
  GtkBin parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkStackSidebarClass</NAME>
struct _GtkStackSidebarClass
{
  GtkBinClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_stack_sidebar_get_type</NAME>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_sidebar_new</NAME>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_sidebar_set_stack</NAME>
<RETURNS>void         </RETURNS>
GtkStackSidebar *sidebar, GtkStack        *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_sidebar_get_stack</NAME>
<RETURNS>GtkStack  *  </RETURNS>
GtkStackSidebar *sidebar
</FUNCTION>
<STRUCT>
<NAME>GtkStackSidebarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_STACK_SWITCHER</NAME>
#define GTK_TYPE_STACK_SWITCHER            (gtk_stack_switcher_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STACK_SWITCHER</NAME>
#define GTK_STACK_SWITCHER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_STACK_SWITCHER, GtkStackSwitcher))
</MACRO>
<MACRO>
<NAME>GTK_STACK_SWITCHER_CLASS</NAME>
#define GTK_STACK_SWITCHER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_STACK_SWITCHER, GtkStackSwitcherClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STACK_SWITCHER</NAME>
#define GTK_IS_STACK_SWITCHER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_STACK_SWITCHER))
</MACRO>
<MACRO>
<NAME>GTK_IS_STACK_SWITCHER_CLASS</NAME>
#define GTK_IS_STACK_SWITCHER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STACK_SWITCHER))
</MACRO>
<MACRO>
<NAME>GTK_STACK_SWITCHER_GET_CLASS</NAME>
#define GTK_STACK_SWITCHER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_STACK_SWITCHER, GtkStackSwitcherClass))
</MACRO>
<STRUCT>
<NAME>GtkStackSwitcher</NAME>
struct _GtkStackSwitcher
{
  GtkBox widget;
};
</STRUCT>
<STRUCT>
<NAME>GtkStackSwitcherClass</NAME>
struct _GtkStackSwitcherClass
{
  GtkBoxClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_stack_switcher_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_switcher_new</NAME>
<RETURNS>GtkWidget  *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_switcher_set_stack</NAME>
<RETURNS>void          </RETURNS>
GtkStackSwitcher *switcher, GtkStack         *stack
</FUNCTION>
<FUNCTION>
<NAME>gtk_stack_switcher_get_stack</NAME>
<RETURNS>GtkStack  *   </RETURNS>
GtkStackSwitcher *switcher
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_STATUSBAR</NAME>
#define GTK_TYPE_STATUSBAR            (gtk_statusbar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STATUSBAR</NAME>
#define GTK_STATUSBAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_STATUSBAR, GtkStatusbar))
</MACRO>
<MACRO>
<NAME>GTK_STATUSBAR_CLASS</NAME>
#define GTK_STATUSBAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_STATUSBAR, GtkStatusbarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STATUSBAR</NAME>
#define GTK_IS_STATUSBAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_STATUSBAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_STATUSBAR_CLASS</NAME>
#define GTK_IS_STATUSBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STATUSBAR))
</MACRO>
<MACRO>
<NAME>GTK_STATUSBAR_GET_CLASS</NAME>
#define GTK_STATUSBAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_STATUSBAR, GtkStatusbarClass))
</MACRO>
<STRUCT>
<NAME>GtkStatusbar</NAME>
struct _GtkStatusbar
{
  GtkBox parent_widget;

  /*< private >*/
  GtkStatusbarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkStatusbarClass</NAME>
struct _GtkStatusbarClass
{
  GtkBoxClass parent_class;

  gpointer reserved;

  void	(*text_pushed)	(GtkStatusbar	*statusbar,
			 guint		 context_id,
			 const gchar	*text);
  void	(*text_popped)	(GtkStatusbar	*statusbar,
			 guint		 context_id,
			 const gchar	*text);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_statusbar_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_get_context_id</NAME>
<RETURNS>guint 	   </RETURNS>
GtkStatusbar *statusbar, const gchar  *context_description
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_push</NAME>
<RETURNS>guint       </RETURNS>
GtkStatusbar *statusbar, guint	       context_id, const gchar  *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_pop</NAME>
<RETURNS>void        </RETURNS>
GtkStatusbar *statusbar, guint	       context_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_remove</NAME>
<RETURNS>void        </RETURNS>
GtkStatusbar *statusbar, guint	       context_id, guint         message_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_remove_all</NAME>
<RETURNS>void        </RETURNS>
GtkStatusbar *statusbar, guint	       context_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_statusbar_get_message_area</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkStatusbar *statusbar
</FUNCTION>
<STRUCT>
<NAME>GtkStatusbarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_STYLE_CONTEXT</NAME>
#define GTK_TYPE_STYLE_CONTEXT         (gtk_style_context_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CONTEXT</NAME>
#define GTK_STYLE_CONTEXT(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_STYLE_CONTEXT, GtkStyleContext))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CONTEXT_CLASS</NAME>
#define GTK_STYLE_CONTEXT_CLASS(c)     (G_TYPE_CHECK_CLASS_CAST    ((c), GTK_TYPE_STYLE_CONTEXT, GtkStyleContextClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE_CONTEXT</NAME>
#define GTK_IS_STYLE_CONTEXT(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_STYLE_CONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE_CONTEXT_CLASS</NAME>
#define GTK_IS_STYLE_CONTEXT_CLASS(c)  (G_TYPE_CHECK_CLASS_TYPE    ((c), GTK_TYPE_STYLE_CONTEXT))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CONTEXT_GET_CLASS</NAME>
#define GTK_STYLE_CONTEXT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS  ((o), GTK_TYPE_STYLE_CONTEXT, GtkStyleContextClass))
</MACRO>
<STRUCT>
<NAME>GtkStyleContext</NAME>
struct _GtkStyleContext
{
  GObject parent_object;
  GtkStyleContextPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkStyleContextClass</NAME>
struct _GtkStyleContextClass
{
  GObjectClass parent_class;

  void (* changed) (GtkStyleContext *context);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_BACKGROUND_COLOR</NAME>
#define GTK_STYLE_PROPERTY_BACKGROUND_COLOR "background-color"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_COLOR</NAME>
#define GTK_STYLE_PROPERTY_COLOR "color"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_FONT</NAME>
#define GTK_STYLE_PROPERTY_FONT "font"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_PADDING</NAME>
#define GTK_STYLE_PROPERTY_PADDING "padding"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_BORDER_WIDTH</NAME>
#define GTK_STYLE_PROPERTY_BORDER_WIDTH "border-width"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_MARGIN</NAME>
#define GTK_STYLE_PROPERTY_MARGIN "margin"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_BORDER_RADIUS</NAME>
#define GTK_STYLE_PROPERTY_BORDER_RADIUS "border-radius"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_BORDER_STYLE</NAME>
#define GTK_STYLE_PROPERTY_BORDER_STYLE "border-style"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_BORDER_COLOR</NAME>
#define GTK_STYLE_PROPERTY_BORDER_COLOR "border-color"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTY_BACKGROUND_IMAGE</NAME>
#define GTK_STYLE_PROPERTY_BACKGROUND_IMAGE "background-image"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_CELL</NAME>
#define GTK_STYLE_CLASS_CELL "cell"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_DIM_LABEL</NAME>
#define GTK_STYLE_CLASS_DIM_LABEL "dim-label"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_ENTRY</NAME>
#define GTK_STYLE_CLASS_ENTRY "entry"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_LABEL</NAME>
#define GTK_STYLE_CLASS_LABEL "label"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_COMBOBOX_ENTRY</NAME>
#define GTK_STYLE_CLASS_COMBOBOX_ENTRY "combobox-entry"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_BUTTON</NAME>
#define GTK_STYLE_CLASS_BUTTON "button"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_LIST</NAME>
#define GTK_STYLE_CLASS_LIST "list"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_LIST_ROW</NAME>
#define GTK_STYLE_CLASS_LIST_ROW "list-row"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_CALENDAR</NAME>
#define GTK_STYLE_CLASS_CALENDAR "calendar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SLIDER</NAME>
#define GTK_STYLE_CLASS_SLIDER "slider"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_BACKGROUND</NAME>
#define GTK_STYLE_CLASS_BACKGROUND "background"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_RUBBERBAND</NAME>
#define GTK_STYLE_CLASS_RUBBERBAND "rubberband"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_CSD</NAME>
#define GTK_STYLE_CLASS_CSD "csd"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TOOLTIP</NAME>
#define GTK_STYLE_CLASS_TOOLTIP "tooltip"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_MENU</NAME>
#define GTK_STYLE_CLASS_MENU "menu"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_CONTEXT_MENU</NAME>
#define GTK_STYLE_CLASS_CONTEXT_MENU "context-menu"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TOUCH_SELECTION</NAME>
#define GTK_STYLE_CLASS_TOUCH_SELECTION "touch-selection"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_MENUBAR</NAME>
#define GTK_STYLE_CLASS_MENUBAR "menubar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_MENUITEM</NAME>
#define GTK_STYLE_CLASS_MENUITEM "menuitem"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TOOLBAR</NAME>
#define GTK_STYLE_CLASS_TOOLBAR "toolbar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_PRIMARY_TOOLBAR</NAME>
#define GTK_STYLE_CLASS_PRIMARY_TOOLBAR "primary-toolbar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_INLINE_TOOLBAR</NAME>
#define GTK_STYLE_CLASS_INLINE_TOOLBAR "inline-toolbar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_STATUSBAR</NAME>
#define GTK_STYLE_CLASS_STATUSBAR "statusbar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_RADIO</NAME>
#define GTK_STYLE_CLASS_RADIO "radio"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_CHECK</NAME>
#define GTK_STYLE_CLASS_CHECK "check"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_DEFAULT</NAME>
#define GTK_STYLE_CLASS_DEFAULT "default"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TROUGH</NAME>
#define GTK_STYLE_CLASS_TROUGH "trough"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SCROLLBAR</NAME>
#define GTK_STYLE_CLASS_SCROLLBAR "scrollbar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SCROLLBARS_JUNCTION</NAME>
#define GTK_STYLE_CLASS_SCROLLBARS_JUNCTION "scrollbars-junction"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SCALE</NAME>
#define GTK_STYLE_CLASS_SCALE "scale"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE</NAME>
#define GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE "scale-has-marks-above"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW</NAME>
#define GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW "scale-has-marks-below"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_HEADER</NAME>
#define GTK_STYLE_CLASS_HEADER "header"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_ACCELERATOR</NAME>
#define GTK_STYLE_CLASS_ACCELERATOR "accelerator"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_RAISED</NAME>
#define GTK_STYLE_CLASS_RAISED "raised"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_LINKED</NAME>
#define GTK_STYLE_CLASS_LINKED "linked"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_GRIP</NAME>
#define GTK_STYLE_CLASS_GRIP "grip"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_DOCK</NAME>
#define GTK_STYLE_CLASS_DOCK "dock"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_PROGRESSBAR</NAME>
#define GTK_STYLE_CLASS_PROGRESSBAR "progressbar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SPINNER</NAME>
#define GTK_STYLE_CLASS_SPINNER "spinner"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_MARK</NAME>
#define GTK_STYLE_CLASS_MARK "mark"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_EXPANDER</NAME>
#define GTK_STYLE_CLASS_EXPANDER "expander"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SPINBUTTON</NAME>
#define GTK_STYLE_CLASS_SPINBUTTON "spinbutton"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_NOTEBOOK</NAME>
#define GTK_STYLE_CLASS_NOTEBOOK "notebook"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_VIEW</NAME>
#define GTK_STYLE_CLASS_VIEW "view"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SIDEBAR</NAME>
#define GTK_STYLE_CLASS_SIDEBAR "sidebar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_IMAGE</NAME>
#define GTK_STYLE_CLASS_IMAGE "image"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_HIGHLIGHT</NAME>
#define GTK_STYLE_CLASS_HIGHLIGHT "highlight"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_FRAME</NAME>
#define GTK_STYLE_CLASS_FRAME "frame"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_DND</NAME>
#define GTK_STYLE_CLASS_DND "dnd"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_PANE_SEPARATOR</NAME>
#define GTK_STYLE_CLASS_PANE_SEPARATOR "pane-separator"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SEPARATOR</NAME>
#define GTK_STYLE_CLASS_SEPARATOR "separator"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_INFO</NAME>
#define GTK_STYLE_CLASS_INFO "info"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_WARNING</NAME>
#define GTK_STYLE_CLASS_WARNING "warning"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_QUESTION</NAME>
#define GTK_STYLE_CLASS_QUESTION "question"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_ERROR</NAME>
#define GTK_STYLE_CLASS_ERROR "error"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_HORIZONTAL</NAME>
#define GTK_STYLE_CLASS_HORIZONTAL "horizontal"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_VERTICAL</NAME>
#define GTK_STYLE_CLASS_VERTICAL "vertical"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TOP</NAME>
#define GTK_STYLE_CLASS_TOP "top"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_BOTTOM</NAME>
#define GTK_STYLE_CLASS_BOTTOM "bottom"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_LEFT</NAME>
#define GTK_STYLE_CLASS_LEFT "left"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_RIGHT</NAME>
#define GTK_STYLE_CLASS_RIGHT "right"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_PULSE</NAME>
#define GTK_STYLE_CLASS_PULSE "pulse"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_ARROW</NAME>
#define GTK_STYLE_CLASS_ARROW "arrow"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_OSD</NAME>
#define GTK_STYLE_CLASS_OSD "osd"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_LEVEL_BAR</NAME>
#define GTK_STYLE_CLASS_LEVEL_BAR "level-bar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_CURSOR_HANDLE</NAME>
#define GTK_STYLE_CLASS_CURSOR_HANDLE "cursor-handle"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_INSERTION_CURSOR</NAME>
#define GTK_STYLE_CLASS_INSERTION_CURSOR "insertion-cursor"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TITLEBAR</NAME>
#define GTK_STYLE_CLASS_TITLEBAR "titlebar"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_TITLE</NAME>
#define GTK_STYLE_CLASS_TITLE "title"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SUBTITLE</NAME>
#define GTK_STYLE_CLASS_SUBTITLE "subtitle"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_NEEDS_ATTENTION</NAME>
#define GTK_STYLE_CLASS_NEEDS_ATTENTION "needs-attention"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_SUGGESTED_ACTION</NAME>
#define GTK_STYLE_CLASS_SUGGESTED_ACTION "suggested-action"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_DESTRUCTIVE_ACTION</NAME>
#define GTK_STYLE_CLASS_DESTRUCTIVE_ACTION "destructive-action"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_POPOVER</NAME>
#define GTK_STYLE_CLASS_POPOVER "popover"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_POPUP</NAME>
#define GTK_STYLE_CLASS_POPUP "popup"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_MESSAGE_DIALOG</NAME>
#define GTK_STYLE_CLASS_MESSAGE_DIALOG "message-dialog"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_FLAT</NAME>
#define GTK_STYLE_CLASS_FLAT "flat"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_READ_ONLY</NAME>
#define GTK_STYLE_CLASS_READ_ONLY "read-only"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_OVERSHOOT</NAME>
#define GTK_STYLE_CLASS_OVERSHOOT "overshoot"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_UNDERSHOOT</NAME>
#define GTK_STYLE_CLASS_UNDERSHOOT "undershoot"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_PAPER</NAME>
#define GTK_STYLE_CLASS_PAPER "paper"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_MONOSPACE</NAME>
#define GTK_STYLE_CLASS_MONOSPACE "monospace"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS_WIDE</NAME>
#define GTK_STYLE_CLASS_WIDE "wide"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_REGION_ROW</NAME>
#define GTK_STYLE_REGION_ROW "row"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_REGION_COLUMN</NAME>
#define GTK_STYLE_REGION_COLUMN "column"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_REGION_COLUMN_HEADER</NAME>
#define GTK_STYLE_REGION_COLUMN_HEADER "column-header"
</MACRO>
<MACRO>
<NAME>GTK_STYLE_REGION_TAB</NAME>
#define GTK_STYLE_REGION_TAB "tab"
</MACRO>
<FUNCTION>
<NAME>gtk_style_context_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_new</NAME>
<RETURNS>GtkStyleContext  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_add_provider_for_screen</NAME>
<RETURNS>void  </RETURNS>
GdkScreen        *screen, GtkStyleProvider *provider, guint             priority
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_remove_provider_for_screen</NAME>
<RETURNS>void  </RETURNS>
GdkScreen        *screen, GtkStyleProvider *provider
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_add_provider</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext  *context, GtkStyleProvider *provider, guint             priority
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_remove_provider</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext  *context, GtkStyleProvider *provider
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_save</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_restore</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_section</NAME>
<RETURNS>GtkCssSection  * </RETURNS>
GtkStyleContext *context, const gchar     *property
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_property</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, const gchar     *property, GtkStateFlags    state, GValue          *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_valist</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, va_list          args
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_state</NAME>
<RETURNS>void           </RETURNS>
GtkStyleContext *context, GtkStateFlags    flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_state</NAME>
<RETURNS>GtkStateFlags  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_scale</NAME>
<RETURNS>void           </RETURNS>
GtkStyleContext *context, gint             scale
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_scale</NAME>
<RETURNS>gint           </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_state_is_running</NAME>
<DEPRECATED/>
<RETURNS>gboolean       </RETURNS>
GtkStyleContext *context, GtkStateType     state, gdouble         *progress
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_path</NAME>
<RETURNS>void           </RETURNS>
GtkStyleContext *context, GtkWidgetPath   *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_path</NAME>
<RETURNS>const GtkWidgetPath  * </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_parent</NAME>
<RETURNS>void           </RETURNS>
GtkStyleContext *context, GtkStyleContext *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_parent</NAME>
<RETURNS>GtkStyleContext  *</RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_list_classes</NAME>
<RETURNS>GList  *  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_add_class</NAME>
<RETURNS>void      </RETURNS>
GtkStyleContext *context, const gchar     *class_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_remove_class</NAME>
<RETURNS>void      </RETURNS>
GtkStyleContext *context, const gchar     *class_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_has_class</NAME>
<RETURNS>gboolean  </RETURNS>
GtkStyleContext *context, const gchar     *class_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_list_regions</NAME>
<DEPRECATED/>
<RETURNS>GList  *  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_add_region</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleContext    *context, const gchar        *region_name, GtkRegionFlags      flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_remove_region</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleContext    *context, const gchar        *region_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_has_region</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkStyleContext    *context, const gchar        *region_name, GtkRegionFlags     *flags_return
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_style_property</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, const gchar     *property_name, GValue          *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_style_valist</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, va_list          args
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_style</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_lookup_icon_set</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet  * </RETURNS>
GtkStyleContext *context, const gchar     *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_render_icon_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf   * </RETURNS>
GtkIconSet      *icon_set, GtkStyleContext *context, GtkIconSize      size
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_render_icon_surface</NAME>
<DEPRECATED/>
<RETURNS>cairo_surface_t   *</RETURNS>
GtkIconSet      *icon_set, GtkStyleContext *context, GtkIconSize      size, int              scale, GdkWindow       *for_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_screen</NAME>
<RETURNS>void         </RETURNS>
GtkStyleContext *context, GdkScreen       *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_screen</NAME>
<RETURNS>GdkScreen  * </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_frame_clock</NAME>
<RETURNS>void            </RETURNS>
GtkStyleContext *context, GdkFrameClock   *frame_clock
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_frame_clock</NAME>
<RETURNS>GdkFrameClock  *</RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_direction</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkStyleContext  *context, GtkTextDirection  direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_direction</NAME>
<DEPRECATED/>
<RETURNS>GtkTextDirection  </RETURNS>
GtkStyleContext  *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_junction_sides</NAME>
<RETURNS>void              </RETURNS>
GtkStyleContext  *context, GtkJunctionSides  sides
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_junction_sides</NAME>
<RETURNS>GtkJunctionSides  </RETURNS>
GtkStyleContext  *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_lookup_color</NAME>
<RETURNS>gboolean  </RETURNS>
GtkStyleContext *context, const gchar     *color_name, GdkRGBA         *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_notify_state_change</NAME>
<DEPRECATED/>
<RETURNS>void   </RETURNS>
GtkStyleContext *context, GdkWindow       *window, gpointer         region_id, GtkStateType     state, gboolean         state_value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_cancel_animations</NAME>
<DEPRECATED/>
<RETURNS>void   </RETURNS>
GtkStyleContext *context, gpointer         region_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_scroll_animations</NAME>
<DEPRECATED/>
<RETURNS>void   </RETURNS>
GtkStyleContext *context, GdkWindow       *window, gint             dx, gint             dy
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_push_animatable_region</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, gpointer         region_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_pop_animatable_region</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_color</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, GdkRGBA         *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_background_color</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, GdkRGBA         *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_border_color</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, GdkRGBA         *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_font</NAME>
<DEPRECATED/>
<RETURNS>const PangoFontDescription  *</RETURNS>
GtkStyleContext *context, GtkStateFlags    state
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_border</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, GtkBorder       *border
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_padding</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, GtkBorder       *padding
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_get_margin</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GtkStateFlags    state, GtkBorder       *margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_invalidate</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyleContext *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_reset_widgets</NAME>
<RETURNS>void  </RETURNS>
GdkScreen       *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_context_set_background</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyleContext *context, GdkWindow       *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_render_insertion_cursor</NAME>
<RETURNS>void  </RETURNS>
GtkStyleContext     *context, cairo_t             *cr, gdouble              x, gdouble              y, PangoLayout         *layout, int                  index, PangoDirection       direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_draw_insertion_cursor</NAME>
<DEPRECATED/>
<RETURNS>void    </RETURNS>
GtkWidget          *widget, cairo_t            *cr, const GdkRectangle *location, gboolean            is_primary, GtkTextDirection    direction, gboolean            draw_arrow
</FUNCTION>
<ENUM>
<NAME>GtkStyleContextPrintFlags</NAME>
typedef enum {
  GTK_STYLE_CONTEXT_PRINT_NONE         = 0,
  GTK_STYLE_CONTEXT_PRINT_RECURSE      = 1 << 0,
  GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE   = 1 << 1
} GtkStyleContextPrintFlags;
</ENUM>
<FUNCTION>
<NAME>gtk_style_context_to_string</NAME>
<RETURNS>char  * </RETURNS>
GtkStyleContext           *context, GtkStyleContextPrintFlags  flags
</FUNCTION>
<STRUCT>
<NAME>GtkStyleContextPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_STYLE_PROVIDER</NAME>
#define GTK_TYPE_STYLE_PROVIDER          (gtk_style_provider_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER</NAME>
#define GTK_STYLE_PROVIDER(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_STYLE_PROVIDER, GtkStyleProvider))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE_PROVIDER</NAME>
#define GTK_IS_STYLE_PROVIDER(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_STYLE_PROVIDER))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER_GET_IFACE</NAME>
#define GTK_STYLE_PROVIDER_GET_IFACE(o)  (G_TYPE_INSTANCE_GET_INTERFACE ((o), GTK_TYPE_STYLE_PROVIDER, GtkStyleProviderIface))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER_PRIORITY_FALLBACK</NAME>
#define GTK_STYLE_PROVIDER_PRIORITY_FALLBACK      1
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER_PRIORITY_THEME</NAME>
#define GTK_STYLE_PROVIDER_PRIORITY_THEME     200
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER_PRIORITY_SETTINGS</NAME>
#define GTK_STYLE_PROVIDER_PRIORITY_SETTINGS    400
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER_PRIORITY_APPLICATION</NAME>
#define GTK_STYLE_PROVIDER_PRIORITY_APPLICATION 600
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROVIDER_PRIORITY_USER</NAME>
#define GTK_STYLE_PROVIDER_PRIORITY_USER        800
</MACRO>
<STRUCT>
<NAME>GtkStyleProviderIface</NAME>
struct _GtkStyleProviderIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  GtkStyleProperties * (* get_style) (GtkStyleProvider *provider,
                                      GtkWidgetPath    *path);

  gboolean (* get_style_property) (GtkStyleProvider *provider,
                                   GtkWidgetPath    *path,
                                   GtkStateFlags     state,
                                   GParamSpec       *pspec,
                                   GValue           *value);

  GtkIconFactory * (* get_icon_factory) (GtkStyleProvider *provider,
					 GtkWidgetPath    *path);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_style_provider_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_provider_get_style</NAME>
<DEPRECATED/>
<RETURNS>GtkStyleProperties  *</RETURNS>
GtkStyleProvider *provider, GtkWidgetPath    *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_provider_get_style_property</NAME>
<RETURNS>gboolean  </RETURNS>
GtkStyleProvider *provider, GtkWidgetPath    *path, GtkStateFlags     state, GParamSpec       *pspec, GValue           *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_provider_get_icon_factory</NAME>
<DEPRECATED/>
<RETURNS>GtkIconFactory  * </RETURNS>
GtkStyleProvider *provider, GtkWidgetPath    *path
</FUNCTION>
<STRUCT>
<NAME>GtkStyleProvider</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SWITCH</NAME>
#define GTK_TYPE_SWITCH                 (gtk_switch_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_SWITCH</NAME>
#define GTK_SWITCH(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_SWITCH, GtkSwitch))
</MACRO>
<MACRO>
<NAME>GTK_IS_SWITCH</NAME>
#define GTK_IS_SWITCH(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_SWITCH))
</MACRO>
<MACRO>
<NAME>GTK_SWITCH_CLASS</NAME>
#define GTK_SWITCH_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_SWITCH, GtkSwitchClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_SWITCH_CLASS</NAME>
#define GTK_IS_SWITCH_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_SWITCH))
</MACRO>
<MACRO>
<NAME>GTK_SWITCH_GET_CLASS</NAME>
#define GTK_SWITCH_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_SWITCH, GtkSwitchClass))
</MACRO>
<STRUCT>
<NAME>GtkSwitch</NAME>
struct _GtkSwitch
{
  /*< private >*/
  GtkWidget parent_instance;

  GtkSwitchPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkSwitchClass</NAME>
struct _GtkSwitchClass
{
  GtkWidgetClass parent_class;

  /*< public >*/

  void (* activate) (GtkSwitch *sw);

  gboolean (* state_set) (GtkSwitch *sw, gboolean state);
  /*< private >*/

  void (* _switch_padding_1) (void);
  void (* _switch_padding_2) (void);
  void (* _switch_padding_3) (void);
  void (* _switch_padding_4) (void);
  void (* _switch_padding_5) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_switch_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_switch_new</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_switch_set_active</NAME>
<RETURNS>void             </RETURNS>
GtkSwitch *sw, gboolean   is_active
</FUNCTION>
<FUNCTION>
<NAME>gtk_switch_get_active</NAME>
<RETURNS>gboolean         </RETURNS>
GtkSwitch *sw
</FUNCTION>
<FUNCTION>
<NAME>gtk_switch_set_state</NAME>
<RETURNS>void             </RETURNS>
GtkSwitch *sw, gboolean   state
</FUNCTION>
<FUNCTION>
<NAME>gtk_switch_get_state</NAME>
<RETURNS>gboolean         </RETURNS>
GtkSwitch *sw
</FUNCTION>
<STRUCT>
<NAME>GtkSwitchPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_test_init</NAME>
<RETURNS>void             </RETURNS>
int            *argcp, char         ***argvp, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_register_all_types</NAME>
<RETURNS>void             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_list_all_types</NAME>
<RETURNS>const GType *    </RETURNS>
guint          *n_types
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_find_widget</NAME>
<RETURNS>GtkWidget *      </RETURNS>
GtkWidget      *widget, const gchar    *label_pattern, GType           widget_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_create_widget</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget *      </RETURNS>
GType           widget_type, const gchar    *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_create_simple_window</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget *      </RETURNS>
const gchar    *window_title, const gchar    *dialog_text
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_display_button_window</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget *      </RETURNS>
const gchar    *window_title, const gchar    *dialog_text, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_slider_set_perc</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkWidget      *widget, double          percentage
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_slider_get_value</NAME>
<DEPRECATED/>
<RETURNS>double           </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_spin_button_click</NAME>
<DEPRECATED/>
<RETURNS>gboolean         </RETURNS>
GtkSpinButton  *spinner, guint           button, gboolean        upwards
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_widget_wait_for_draw</NAME>
<RETURNS>void             </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_widget_click</NAME>
<DEPRECATED/>
<RETURNS>gboolean         </RETURNS>
GtkWidget      *widget, guint           button, GdkModifierType modifiers
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_widget_send_key</NAME>
<RETURNS>gboolean         </RETURNS>
GtkWidget      *widget, guint           keyval, GdkModifierType modifiers
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_text_set</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkWidget      *widget, const gchar    *string
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_text_get</NAME>
<DEPRECATED/>
<RETURNS>gchar *          </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_find_sibling</NAME>
<RETURNS>GtkWidget *      </RETURNS>
GtkWidget      *base_widget, GType           widget_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_test_find_label</NAME>
<RETURNS>GtkWidget *      </RETURNS>
GtkWidget      *widget, const gchar    *label_pattern
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TEXT_ATTRIBUTES</NAME>
#define GTK_TYPE_TEXT_ATTRIBUTES     (gtk_text_attributes_get_type ())
</MACRO>
<STRUCT>
<NAME>GtkTextAppearance</NAME>
struct _GtkTextAppearance
{
  /*< public >*/
  GdkColor bg_color; /* pixel is taken for underline color */
  GdkColor fg_color; /* pixel is taken for strikethrough color */

  /* super/subscript rise, can be negative */
  gint rise;

  guint underline : 4;          /* PangoUnderline */
  guint strikethrough : 1;

  /* Whether to use background-related values; this is irrelevant for
   * the values struct when in a tag, but is used for the composite
   * values struct; it's true if any of the tags being composited
   * had background stuff set.
   */
  guint draw_bg : 1;

  /* These are only used when we are actually laying out and rendering
   * a paragraph; not when a GtkTextAppearance is part of a
   * GtkTextAttributes.
   */
  guint inside_selection : 1;
  guint is_text : 1;

  /* For the sad story of this bit of code, see
   * https://bugzilla.gnome.org/show_bug.cgi?id=711158
   */
#ifdef __GI_SCANNER__
  /* The scanner should only see the transparent union, so that its
   * content does not vary across architectures.
   */
  union {
    GdkRGBA *rgba[2];
    /*< private >*/
    guint padding[4];
  };
#else
  GdkRGBA *rgba[2];
#if (defined(__SIZEOF_INT__) && defined(__SIZEOF_POINTER__)) && (__SIZEOF_INT__ == __SIZEOF_POINTER__)
  /* unusable, just for ABI compat */
  /*< private >*/
  guint padding[2];
#endif
#endif
};
</STRUCT>
<STRUCT>
<NAME>GtkTextAttributes</NAME>
struct _GtkTextAttributes
{
  /*< private >*/
  guint refcount;

  /*< public >*/
  GtkTextAppearance appearance;

  GtkJustification justification;
  GtkTextDirection direction;

  PangoFontDescription *font;

  gdouble font_scale;

  gint left_margin;
  gint right_margin;
  gint indent;

  gint pixels_above_lines;
  gint pixels_below_lines;
  gint pixels_inside_wrap;

  PangoTabArray *tabs;

  GtkWrapMode wrap_mode;

  PangoLanguage *language;

  /*< private >*/
  GdkColor *pg_bg_color;

  /*< public >*/
  guint invisible : 1;
  guint bg_full_height : 1;
  guint editable : 1;
  guint no_fallback: 1;

  /*< private >*/
  GdkRGBA *pg_bg_rgba;

  /*< public >*/
  gint letter_spacing;

#ifdef __GI_SCANNER__
  /* The scanner should only see the transparent union, so that its
   * content does not vary across architectures.
   */
  union {
    gchar *font_features;
    /*< private >*/
    guint padding[2];
  };
#else
  gchar *font_features;
#if (defined(__SIZEOF_INT__) && defined(__SIZEOF_POINTER__)) && (__SIZEOF_INT__ == __SIZEOF_POINTER__)
  /* unusable, just for ABI compat */
  /*< private >*/
  guint padding[1];
#endif
#endif
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_attributes_new</NAME>
<RETURNS>GtkTextAttributes * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_attributes_copy</NAME>
<RETURNS>GtkTextAttributes * </RETURNS>
GtkTextAttributes *src
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_attributes_copy_values</NAME>
<RETURNS>void                </RETURNS>
GtkTextAttributes *src, GtkTextAttributes *dest
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_attributes_unref</NAME>
<RETURNS>void                </RETURNS>
GtkTextAttributes *values
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_attributes_ref</NAME>
<RETURNS>GtkTextAttributes  *</RETURNS>
GtkTextAttributes *values
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_attributes_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>GtkTextBufferTargetInfo</NAME>
typedef enum
{
  GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = - 1,
  GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT       = - 2,
  GTK_TEXT_BUFFER_TARGET_INFO_TEXT            = - 3
} GtkTextBufferTargetInfo;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_TEXT_BUFFER</NAME>
#define GTK_TYPE_TEXT_BUFFER            (gtk_text_buffer_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEXT_BUFFER</NAME>
#define GTK_TEXT_BUFFER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBuffer))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_BUFFER_CLASS</NAME>
#define GTK_TEXT_BUFFER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_BUFFER, GtkTextBufferClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_BUFFER</NAME>
#define GTK_IS_TEXT_BUFFER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_BUFFER))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_BUFFER_CLASS</NAME>
#define GTK_IS_TEXT_BUFFER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_BUFFER))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_BUFFER_GET_CLASS</NAME>
#define GTK_TEXT_BUFFER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_BUFFER, GtkTextBufferClass))
</MACRO>
<STRUCT>
<NAME>GtkTextBuffer</NAME>
struct _GtkTextBuffer
{
  GObject parent_instance;

  GtkTextBufferPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTextBufferClass</NAME>
struct _GtkTextBufferClass
{
  GObjectClass parent_class;

  void (* insert_text)            (GtkTextBuffer      *buffer,
                                   GtkTextIter        *pos,
                                   const gchar        *new_text,
                                   gint                new_text_length);

  void (* insert_pixbuf)          (GtkTextBuffer      *buffer,
                                   GtkTextIter        *iter,
                                   GdkPixbuf          *pixbuf);

  void (* insert_child_anchor)    (GtkTextBuffer      *buffer,
                                   GtkTextIter        *iter,
                                   GtkTextChildAnchor *anchor);

  void (* delete_range)           (GtkTextBuffer      *buffer,
                                   GtkTextIter        *start,
                                   GtkTextIter        *end);

  void (* changed)                (GtkTextBuffer      *buffer);

  void (* modified_changed)       (GtkTextBuffer      *buffer);

  void (* mark_set)               (GtkTextBuffer      *buffer,
                                   const GtkTextIter  *location,
                                   GtkTextMark        *mark);

  void (* mark_deleted)           (GtkTextBuffer      *buffer,
                                   GtkTextMark        *mark);

  void (* apply_tag)              (GtkTextBuffer      *buffer,
                                   GtkTextTag         *tag,
                                   const GtkTextIter  *start,
                                   const GtkTextIter  *end);

  void (* remove_tag)             (GtkTextBuffer      *buffer,
                                   GtkTextTag         *tag,
                                   const GtkTextIter  *start,
                                   const GtkTextIter  *end);

  void (* begin_user_action)      (GtkTextBuffer      *buffer);

  void (* end_user_action)        (GtkTextBuffer      *buffer);

  void (* paste_done)             (GtkTextBuffer      *buffer,
                                   GtkClipboard       *clipboard);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_buffer_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_new</NAME>
<RETURNS>GtkTextBuffer  *</RETURNS>
GtkTextTagTable *table
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_line_count</NAME>
<RETURNS>gint            </RETURNS>
GtkTextBuffer   *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_char_count</NAME>
<RETURNS>gint            </RETURNS>
GtkTextBuffer   *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_tag_table</NAME>
<RETURNS>GtkTextTagTable * </RETURNS>
GtkTextBuffer  *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_set_text</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, const gchar   *text, gint           len
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, const gchar   *text, gint           len
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_at_cursor</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, const gchar   *text, gint           len
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_interactive</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, const gchar   *text, gint           len, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_interactive_at_cursor</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextBuffer *buffer, const gchar   *text, gint           len, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_range</NAME>
<RETURNS>void      </RETURNS>
GtkTextBuffer     *buffer, GtkTextIter       *iter, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_range_interactive</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextBuffer     *buffer, GtkTextIter       *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean           default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_with_tags</NAME>
<RETURNS>void     </RETURNS>
GtkTextBuffer     *buffer, GtkTextIter       *iter, const gchar       *text, gint               len, GtkTextTag        *first_tag, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_with_tags_by_name</NAME>
<RETURNS>void     </RETURNS>
GtkTextBuffer     *buffer, GtkTextIter       *iter, const gchar       *text, gint               len, const gchar       *first_tag_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_markup</NAME>
<RETURNS>void      </RETURNS>
GtkTextBuffer     *buffer, GtkTextIter       *iter, const gchar       *markup, gint               len
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_delete</NAME>
<RETURNS>void      </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *start, GtkTextIter   *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_delete_interactive</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *start_iter, GtkTextIter   *end_iter, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_backspace</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, gboolean       interactive, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_text</NAME>
<RETURNS>gchar           *</RETURNS>
GtkTextBuffer     *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean           include_hidden_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_slice</NAME>
<RETURNS>gchar           *</RETURNS>
GtkTextBuffer     *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean           include_hidden_chars
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_pixbuf</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, GdkPixbuf     *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_insert_child_anchor</NAME>
<RETURNS>void                </RETURNS>
GtkTextBuffer      *buffer, GtkTextIter        *iter, GtkTextChildAnchor *anchor
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_create_child_anchor</NAME>
<RETURNS>GtkTextChildAnchor  *</RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_add_mark</NAME>
<RETURNS>void            </RETURNS>
GtkTextBuffer     *buffer, GtkTextMark       *mark, const GtkTextIter *where
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_create_mark</NAME>
<RETURNS>GtkTextMark    *</RETURNS>
GtkTextBuffer     *buffer, const gchar       *mark_name, const GtkTextIter *where, gboolean           left_gravity
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_move_mark</NAME>
<RETURNS>void            </RETURNS>
GtkTextBuffer     *buffer, GtkTextMark       *mark, const GtkTextIter *where
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_delete_mark</NAME>
<RETURNS>void            </RETURNS>
GtkTextBuffer     *buffer, GtkTextMark       *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_mark</NAME>
<RETURNS>GtkTextMark *   </RETURNS>
GtkTextBuffer     *buffer, const gchar       *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_move_mark_by_name</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const gchar       *name, const GtkTextIter *where
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_delete_mark_by_name</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const gchar       *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_insert</NAME>
<RETURNS>GtkTextMark * </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_selection_bound</NAME>
<RETURNS>GtkTextMark * </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_place_cursor</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const GtkTextIter *where
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_select_range</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const GtkTextIter *ins, const GtkTextIter *bound
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_apply_tag</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, GtkTextTag        *tag, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_remove_tag</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, GtkTextTag        *tag, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_apply_tag_by_name</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const gchar       *name, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_remove_tag_by_name</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const gchar       *name, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_remove_all_tags</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_create_tag</NAME>
<RETURNS>GtkTextTag     *</RETURNS>
GtkTextBuffer *buffer, const gchar   *tag_name, const gchar   *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_iter_at_line_offset</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, gint           line_number, gint           char_offset
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_iter_at_line_index</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, gint           line_number, gint           byte_index
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_iter_at_offset</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, gint           char_offset
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_iter_at_line</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, gint           line_number
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_start_iter</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_end_iter</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_bounds</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *start, GtkTextIter   *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_iter_at_mark</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *iter, GtkTextMark   *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_iter_at_child_anchor</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer      *buffer, GtkTextIter        *iter, GtkTextChildAnchor *anchor
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_modified</NAME>
<RETURNS>gboolean         </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_set_modified</NAME>
<RETURNS>void             </RETURNS>
GtkTextBuffer *buffer, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_has_selection</NAME>
<RETURNS>gboolean         </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_add_selection_clipboard</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, GtkClipboard      *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_remove_selection_clipboard</NAME>
<RETURNS>void  </RETURNS>
GtkTextBuffer     *buffer, GtkClipboard      *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_cut_clipboard</NAME>
<RETURNS>void             </RETURNS>
GtkTextBuffer *buffer, GtkClipboard  *clipboard, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_copy_clipboard</NAME>
<RETURNS>void             </RETURNS>
GtkTextBuffer *buffer, GtkClipboard  *clipboard
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_paste_clipboard</NAME>
<RETURNS>void             </RETURNS>
GtkTextBuffer *buffer, GtkClipboard  *clipboard, GtkTextIter   *override_location, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_selection_bounds</NAME>
<RETURNS>gboolean         </RETURNS>
GtkTextBuffer *buffer, GtkTextIter   *start, GtkTextIter   *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_delete_selection</NAME>
<RETURNS>gboolean         </RETURNS>
GtkTextBuffer *buffer, gboolean       interactive, gboolean       default_editable
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_begin_user_action</NAME>
<RETURNS>void             </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_end_user_action</NAME>
<RETURNS>void             </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_copy_target_list</NAME>
<RETURNS>GtkTargetList  * </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_paste_target_list</NAME>
<RETURNS>GtkTargetList  * </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<STRUCT>
<NAME>GtkTextBTree</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTextBufferPrivate</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GtkTextBufferSerializeFunc</NAME>
<RETURNS>guint8 *</RETURNS>
GtkTextBuffer     *register_buffer,
                                                   GtkTextBuffer     *content_buffer,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gsize             *length,
                                                   gpointer           user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTextBufferDeserializeFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTextBuffer     *register_buffer,
                                                   GtkTextBuffer     *content_buffer,
                                                   GtkTextIter       *iter,
                                                   const guint8      *data,
                                                   gsize              length,
                                                   gboolean           create_tags,
                                                   gpointer           user_data,
                                                   GError           **error
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_register_serialize_format</NAME>
<RETURNS>GdkAtom    </RETURNS>
GtkTextBuffer                *buffer, const gchar                  *mime_type, GtkTextBufferSerializeFunc    function, gpointer                      user_data, GDestroyNotify                user_data_destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_register_serialize_tagset</NAME>
<RETURNS>GdkAtom    </RETURNS>
GtkTextBuffer                *buffer, const gchar                  *tagset_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_register_deserialize_format</NAME>
<RETURNS>GdkAtom    </RETURNS>
GtkTextBuffer                *buffer, const gchar                  *mime_type, GtkTextBufferDeserializeFunc  function, gpointer                      user_data, GDestroyNotify                user_data_destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_register_deserialize_tagset</NAME>
<RETURNS>GdkAtom    </RETURNS>
GtkTextBuffer                *buffer, const gchar                  *tagset_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_unregister_serialize_format</NAME>
<RETURNS>void     </RETURNS>
GtkTextBuffer                *buffer, GdkAtom                       format
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_unregister_deserialize_format</NAME>
<RETURNS>void     </RETURNS>
GtkTextBuffer                *buffer, GdkAtom                       format
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_deserialize_set_can_create_tags</NAME>
<RETURNS>void      </RETURNS>
GtkTextBuffer             *buffer, GdkAtom                    format, gboolean                   can_create_tags
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_deserialize_get_can_create_tags</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextBuffer             *buffer, GdkAtom                    format
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_serialize_formats</NAME>
<RETURNS>GdkAtom  * </RETURNS>
GtkTextBuffer                *buffer, gint                         *n_formats
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_get_deserialize_formats</NAME>
<RETURNS>GdkAtom  * </RETURNS>
GtkTextBuffer                *buffer, gint                         *n_formats
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_serialize</NAME>
<RETURNS>guint8   * </RETURNS>
GtkTextBuffer                *register_buffer, GtkTextBuffer                *content_buffer, GdkAtom                       format, const GtkTextIter            *start, const GtkTextIter            *end, gsize                        *length
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_buffer_deserialize</NAME>
<RETURNS>gboolean   </RETURNS>
GtkTextBuffer                *register_buffer, GtkTextBuffer                *content_buffer, GdkAtom                       format, GtkTextIter                  *iter, const guint8                 *data, gsize                         length, GError                      **error
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TEXT_CHILD_ANCHOR</NAME>
#define GTK_TYPE_TEXT_CHILD_ANCHOR              (gtk_text_child_anchor_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEXT_CHILD_ANCHOR</NAME>
#define GTK_TEXT_CHILD_ANCHOR(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchor))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_CHILD_ANCHOR_CLASS</NAME>
#define GTK_TEXT_CHILD_ANCHOR_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchorClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_CHILD_ANCHOR</NAME>
#define GTK_IS_TEXT_CHILD_ANCHOR(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_TEXT_CHILD_ANCHOR))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_CHILD_ANCHOR_CLASS</NAME>
#define GTK_IS_TEXT_CHILD_ANCHOR_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_CHILD_ANCHOR))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_CHILD_ANCHOR_GET_CLASS</NAME>
#define GTK_TEXT_CHILD_ANCHOR_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_CHILD_ANCHOR, GtkTextChildAnchorClass))
</MACRO>
<STRUCT>
<NAME>GtkTextChildAnchor</NAME>
struct _GtkTextChildAnchor
{
  GObject parent_instance;

  /*< private >*/
  gpointer segment;
};
</STRUCT>
<STRUCT>
<NAME>GtkTextChildAnchorClass</NAME>
struct _GtkTextChildAnchorClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_child_anchor_get_type</NAME>
<RETURNS>GType                </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_child_anchor_new</NAME>
<RETURNS>GtkTextChildAnchor * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_child_anchor_get_widgets</NAME>
<RETURNS>GList *              </RETURNS>
GtkTextChildAnchor *anchor
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_child_anchor_get_deleted</NAME>
<RETURNS>gboolean             </RETURNS>
GtkTextChildAnchor *anchor
</FUNCTION>
<ENUM>
<NAME>GtkTextSearchFlags</NAME>
typedef enum {
  GTK_TEXT_SEARCH_VISIBLE_ONLY     = 1 << 0,
  GTK_TEXT_SEARCH_TEXT_ONLY        = 1 << 1,
  GTK_TEXT_SEARCH_CASE_INSENSITIVE = 1 << 2
  /* Possible future plans: SEARCH_REGEXP */
} GtkTextSearchFlags;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_TEXT_ITER</NAME>
#define GTK_TYPE_TEXT_ITER     (gtk_text_iter_get_type ())
</MACRO>
<STRUCT>
<NAME>GtkTextIter</NAME>
struct _GtkTextIter {
  /* GtkTextIter is an opaque datatype; ignore all these fields.
   * Initialize the iter with gtk_text_buffer_get_iter_*
   * functions
   */
  /*< private >*/
  gpointer dummy1;
  gpointer dummy2;
  gint dummy3;
  gint dummy4;
  gint dummy5;
  gint dummy6;
  gint dummy7;
  gint dummy8;
  gpointer dummy9;
  gpointer dummy10;
  gint dummy11;
  gint dummy12;
  /* padding */
  gint dummy13;
  gpointer dummy14;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_iter_get_buffer</NAME>
<RETURNS>GtkTextBuffer  *</RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_copy</NAME>
<RETURNS>GtkTextIter  *</RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_free</NAME>
<RETURNS>void          </RETURNS>
GtkTextIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_assign</NAME>
<RETURNS>void          </RETURNS>
GtkTextIter       *iter, const GtkTextIter *other
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_offset</NAME>
<RETURNS>gint  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_line</NAME>
<RETURNS>gint  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_line_offset</NAME>
<RETURNS>gint  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_line_index</NAME>
<RETURNS>gint  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_visible_line_offset</NAME>
<RETURNS>gint  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_visible_line_index</NAME>
<RETURNS>gint  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_char</NAME>
<RETURNS>gunichar  </RETURNS>
const GtkTextIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_slice</NAME>
<RETURNS>gchar    *</RETURNS>
const GtkTextIter  *start, const GtkTextIter  *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_text</NAME>
<RETURNS>gchar    *</RETURNS>
const GtkTextIter  *start, const GtkTextIter  *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_visible_slice</NAME>
<RETURNS>gchar    *</RETURNS>
const GtkTextIter  *start, const GtkTextIter  *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_visible_text</NAME>
<RETURNS>gchar    *</RETURNS>
const GtkTextIter  *start, const GtkTextIter  *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_pixbuf</NAME>
<RETURNS>GdkPixbuf * </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_marks</NAME>
<RETURNS>GSList   *  </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_child_anchor</NAME>
<RETURNS>GtkTextChildAnchor * </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_toggled_tags</NAME>
<RETURNS>GSList   *</RETURNS>
const GtkTextIter  *iter, gboolean            toggled_on
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_starts_tag</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter  *iter, GtkTextTag         *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_begins_tag</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter  *iter, GtkTextTag         *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_ends_tag</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter  *iter, GtkTextTag         *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_toggles_tag</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter  *iter, GtkTextTag         *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_has_tag</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter, GtkTextTag          *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_tags</NAME>
<RETURNS>GSList   *</RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_editable</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter, gboolean             default_setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_can_insert</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter, gboolean             default_editability
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_starts_word</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_ends_word</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_inside_word</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_starts_sentence</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_ends_sentence</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_inside_sentence</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_starts_line</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_ends_line</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_is_cursor_position</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_chars_in_line</NAME>
<RETURNS>gint      </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_bytes_in_line</NAME>
<RETURNS>gint      </RETURNS>
const GtkTextIter   *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_attributes</NAME>
<RETURNS>gboolean        </RETURNS>
const GtkTextIter *iter, GtkTextAttributes *values
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_get_language</NAME>
<RETURNS>PangoLanguage * </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_is_end</NAME>
<RETURNS>gboolean        </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_is_start</NAME>
<RETURNS>gboolean        </RETURNS>
const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_char</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_char</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_chars</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_chars</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_lines</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_lines</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_word_end</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_word_start</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_word_ends</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_word_starts</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_visible_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_visible_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_visible_lines</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_visible_lines</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_visible_word_end</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_visible_word_start</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_visible_word_ends</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_visible_word_starts</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_sentence_end</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_sentence_start</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_sentence_ends</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_sentence_starts</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_cursor_position</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_cursor_position</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_cursor_positions</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_cursor_positions</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_visible_cursor_position</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_visible_cursor_position</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_visible_cursor_positions</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_visible_cursor_positions</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, gint         count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_set_offset</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter, gint         char_offset
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_set_line</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter, gint         line_number
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_set_line_offset</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter, gint         char_on_line
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_set_line_index</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter, gint         byte_on_line
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_to_end</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_to_line_end</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_set_visible_line_offset</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter, gint         char_on_line
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_set_visible_line_index</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *iter, gint         byte_on_line
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_to_tag_toggle</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, GtkTextTag  *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_to_tag_toggle</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter *iter, GtkTextTag  *tag
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkTextCharPredicate</NAME>
<RETURNS>gboolean </RETURNS>
gunichar ch, gpointer user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_find_char</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter          *iter, GtkTextCharPredicate  pred, gpointer              user_data, const GtkTextIter    *limit
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_find_char</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextIter          *iter, GtkTextCharPredicate  pred, gpointer              user_data, const GtkTextIter    *limit
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_forward_search</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter *iter, const gchar       *str, GtkTextSearchFlags flags, GtkTextIter       *match_start, GtkTextIter       *match_end, const GtkTextIter *limit
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_backward_search</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter *iter, const gchar       *str, GtkTextSearchFlags flags, GtkTextIter       *match_start, GtkTextIter       *match_end, const GtkTextIter *limit
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_equal</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter *lhs, const GtkTextIter *rhs
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_compare</NAME>
<RETURNS>gint      </RETURNS>
const GtkTextIter *lhs, const GtkTextIter *rhs
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_in_range</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_iter_order</NAME>
<RETURNS>void      </RETURNS>
GtkTextIter *first, GtkTextIter *second
</FUNCTION>
<STRUCT>
<NAME>GtkTextBuffer</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TEXT_MARK</NAME>
#define GTK_TYPE_TEXT_MARK              (gtk_text_mark_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEXT_MARK</NAME>
#define GTK_TEXT_MARK(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_TEXT_MARK, GtkTextMark))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_MARK_CLASS</NAME>
#define GTK_TEXT_MARK_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_MARK, GtkTextMarkClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_MARK</NAME>
#define GTK_IS_TEXT_MARK(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_TEXT_MARK))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_MARK_CLASS</NAME>
#define GTK_IS_TEXT_MARK_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_MARK))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_MARK_GET_CLASS</NAME>
#define GTK_TEXT_MARK_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_MARK, GtkTextMarkClass))
</MACRO>
<STRUCT>
<NAME>GtkTextMark</NAME>
struct _GtkTextMark
{
  GObject parent_instance;

  /*< private >*/
  gpointer segment;
};
</STRUCT>
<STRUCT>
<NAME>GtkTextMarkClass</NAME>
struct _GtkTextMarkClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_mark_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_new</NAME>
<RETURNS>GtkTextMark           *</RETURNS>
const gchar *name, gboolean     left_gravity
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_set_visible</NAME>
<RETURNS>void                   </RETURNS>
GtkTextMark *mark, gboolean     setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_get_visible</NAME>
<RETURNS>gboolean               </RETURNS>
GtkTextMark *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_get_name</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkTextMark *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_get_deleted</NAME>
<RETURNS>gboolean               </RETURNS>
GtkTextMark *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_get_buffer</NAME>
<RETURNS>GtkTextBuffer *        </RETURNS>
GtkTextMark *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_mark_get_left_gravity</NAME>
<RETURNS>gboolean               </RETURNS>
GtkTextMark *mark
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TEXT_TAG</NAME>
#define GTK_TYPE_TEXT_TAG            (gtk_text_tag_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEXT_TAG</NAME>
#define GTK_TEXT_TAG(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_TAG, GtkTextTag))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_TAG_CLASS</NAME>
#define GTK_TEXT_TAG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_TAG, GtkTextTagClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_TAG</NAME>
#define GTK_IS_TEXT_TAG(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_TAG))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_TAG_CLASS</NAME>
#define GTK_IS_TEXT_TAG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_TAG))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_TAG_GET_CLASS</NAME>
#define GTK_TEXT_TAG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_TAG, GtkTextTagClass))
</MACRO>
<STRUCT>
<NAME>GtkTextTag</NAME>
struct _GtkTextTag
{
  GObject parent_instance;

  GtkTextTagPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTextTagClass</NAME>
struct _GtkTextTagClass
{
  GObjectClass parent_class;

  gboolean (* event) (GtkTextTag        *tag,
                      GObject           *event_object, /* widget, canvas item, whatever */
                      GdkEvent          *event,        /* the event itself */
                      const GtkTextIter *iter);        /* location of event in buffer */

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_tag_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_new</NAME>
<RETURNS>GtkTextTag   *</RETURNS>
const gchar       *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_get_priority</NAME>
<RETURNS>gint          </RETURNS>
GtkTextTag        *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_set_priority</NAME>
<RETURNS>void          </RETURNS>
GtkTextTag        *tag, gint               priority
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_event</NAME>
<RETURNS>gboolean      </RETURNS>
GtkTextTag        *tag, GObject           *event_object, GdkEvent          *event, const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_changed</NAME>
<RETURNS>void          </RETURNS>
GtkTextTag        *tag, gboolean           size_changed
</FUNCTION>
<STRUCT>
<NAME>GtkTextIter</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTextTagPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTextTagTable</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GtkTextTagTableForeach</NAME>
<RETURNS>void </RETURNS>
GtkTextTag *tag, gpointer data
</USER_FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TEXT_TAG_TABLE</NAME>
#define GTK_TYPE_TEXT_TAG_TABLE            (gtk_text_tag_table_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEXT_TAG_TABLE</NAME>
#define GTK_TEXT_TAG_TABLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTable))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_TAG_TABLE_CLASS</NAME>
#define GTK_TEXT_TAG_TABLE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTableClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_TAG_TABLE</NAME>
#define GTK_IS_TEXT_TAG_TABLE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_TAG_TABLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_TAG_TABLE_CLASS</NAME>
#define GTK_IS_TEXT_TAG_TABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_TAG_TABLE))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_TAG_TABLE_GET_CLASS</NAME>
#define GTK_TEXT_TAG_TABLE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_TAG_TABLE, GtkTextTagTableClass))
</MACRO>
<STRUCT>
<NAME>GtkTextTagTable</NAME>
struct _GtkTextTagTable
{
  GObject parent_instance;

  GtkTextTagTablePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTextTagTableClass</NAME>
struct _GtkTextTagTableClass
{
  GObjectClass parent_class;

  void (* tag_changed) (GtkTextTagTable *table, GtkTextTag *tag, gboolean size_changed);
  void (* tag_added) (GtkTextTagTable *table, GtkTextTag *tag);
  void (* tag_removed) (GtkTextTagTable *table, GtkTextTag *tag);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_tag_table_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_table_new</NAME>
<RETURNS>GtkTextTagTable  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_table_add</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTextTagTable        *table, GtkTextTag             *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_table_remove</NAME>
<RETURNS>void              </RETURNS>
GtkTextTagTable        *table, GtkTextTag             *tag
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_table_lookup</NAME>
<RETURNS>GtkTextTag       *</RETURNS>
GtkTextTagTable        *table, const gchar            *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_table_foreach</NAME>
<RETURNS>void              </RETURNS>
GtkTextTagTable        *table, GtkTextTagTableForeach  func, gpointer                data
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_tag_table_get_size</NAME>
<RETURNS>gint              </RETURNS>
GtkTextTagTable        *table
</FUNCTION>
<STRUCT>
<NAME>GtkTextTagTablePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TEXT_VIEW</NAME>
#define GTK_TYPE_TEXT_VIEW             (gtk_text_view_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEXT_VIEW</NAME>
#define GTK_TEXT_VIEW(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEXT_VIEW, GtkTextView))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_VIEW_CLASS</NAME>
#define GTK_TEXT_VIEW_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEXT_VIEW, GtkTextViewClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_VIEW</NAME>
#define GTK_IS_TEXT_VIEW(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEXT_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEXT_VIEW_CLASS</NAME>
#define GTK_IS_TEXT_VIEW_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEXT_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_TEXT_VIEW_GET_CLASS</NAME>
#define GTK_TEXT_VIEW_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEXT_VIEW, GtkTextViewClass))
</MACRO>
<ENUM>
<NAME>GtkTextWindowType</NAME>
typedef enum
{
  GTK_TEXT_WINDOW_PRIVATE,
  GTK_TEXT_WINDOW_WIDGET,
  GTK_TEXT_WINDOW_TEXT,
  GTK_TEXT_WINDOW_LEFT,
  GTK_TEXT_WINDOW_RIGHT,
  GTK_TEXT_WINDOW_TOP,
  GTK_TEXT_WINDOW_BOTTOM
} GtkTextWindowType;
</ENUM>
<ENUM>
<NAME>GtkTextViewLayer</NAME>
typedef enum
{
  GTK_TEXT_VIEW_LAYER_BELOW,
  GTK_TEXT_VIEW_LAYER_ABOVE,
  GTK_TEXT_VIEW_LAYER_BELOW_TEXT,
  GTK_TEXT_VIEW_LAYER_ABOVE_TEXT
} GtkTextViewLayer;
</ENUM>
<ENUM>
<NAME>GtkTextExtendSelection</NAME>
typedef enum
{
  GTK_TEXT_EXTEND_SELECTION_WORD,
  GTK_TEXT_EXTEND_SELECTION_LINE
} GtkTextExtendSelection;
</ENUM>
<MACRO>
<NAME>GTK_TEXT_VIEW_PRIORITY_VALIDATE</NAME>
#define GTK_TEXT_VIEW_PRIORITY_VALIDATE (GDK_PRIORITY_REDRAW + 5)
</MACRO>
<STRUCT>
<NAME>GtkTextView</NAME>
struct _GtkTextView
{
  GtkContainer parent_instance;

  /*< private >*/

  GtkTextViewPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTextViewClass</NAME>
struct _GtkTextViewClass
{
  GtkContainerClass parent_class;

  /*< public >*/

  void (* populate_popup)        (GtkTextView      *text_view,
                                  GtkWidget        *popup);
  void (* move_cursor)           (GtkTextView      *text_view,
                                  GtkMovementStep   step,
                                  gint              count,
                                  gboolean          extend_selection);
  void (* set_anchor)            (GtkTextView      *text_view);
  void (* insert_at_cursor)      (GtkTextView      *text_view,
                                  const gchar      *str);
  void (* delete_from_cursor)    (GtkTextView      *text_view,
                                  GtkDeleteType     type,
                                  gint              count);
  void (* backspace)             (GtkTextView      *text_view);
  void (* cut_clipboard)         (GtkTextView      *text_view);
  void (* copy_clipboard)        (GtkTextView      *text_view);
  void (* paste_clipboard)       (GtkTextView      *text_view);
  void (* toggle_overwrite)      (GtkTextView      *text_view);
  GtkTextBuffer * (* create_buffer) (GtkTextView   *text_view);
  void (* draw_layer)            (GtkTextView      *text_view,
			          GtkTextViewLayer  layer,
			          cairo_t          *cr);
  gboolean (* extend_selection)  (GtkTextView            *text_view,
                                  GtkTextExtendSelection  granularity,
                                  const GtkTextIter      *location,
                                  GtkTextIter            *start,
                                  GtkTextIter            *end);
  void (* insert_emoji)          (GtkTextView      *text_view);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_text_view_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_new</NAME>
<RETURNS>GtkWidget  *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_new_with_buffer</NAME>
<RETURNS>GtkWidget  *    </RETURNS>
GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_buffer</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view, GtkTextBuffer *buffer
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_buffer</NAME>
<RETURNS>GtkTextBuffer  *</RETURNS>
GtkTextView   *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_scroll_to_iter</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTextView   *text_view, GtkTextIter   *iter, gdouble        within_margin, gboolean       use_align, gdouble        xalign, gdouble        yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_scroll_to_mark</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view, GtkTextMark   *mark, gdouble        within_margin, gboolean       use_align, gdouble        xalign, gdouble        yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_scroll_mark_onscreen</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view, GtkTextMark   *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_move_mark_onscreen</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTextView   *text_view, GtkTextMark   *mark
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_place_cursor_onscreen</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTextView   *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_visible_rect</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view, GdkRectangle  *visible_rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_cursor_visible</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view, gboolean       setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_cursor_visible</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTextView   *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_reset_cursor_blink</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_cursor_locations</NAME>
<RETURNS>void            </RETURNS>
GtkTextView       *text_view, const GtkTextIter *iter, GdkRectangle      *strong, GdkRectangle      *weak
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_iter_location</NAME>
<RETURNS>void            </RETURNS>
GtkTextView   *text_view, const GtkTextIter *iter, GdkRectangle  *location
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_iter_at_location</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTextView   *text_view, GtkTextIter   *iter, gint           x, gint           y
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_iter_at_position</NAME>
<RETURNS>gboolean        </RETURNS>
GtkTextView   *text_view, GtkTextIter   *iter, gint          *trailing, gint           x, gint           y
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_line_yrange</NAME>
<RETURNS>void            </RETURNS>
GtkTextView       *text_view, const GtkTextIter *iter, gint              *y, gint              *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_line_at_y</NAME>
<RETURNS>void            </RETURNS>
GtkTextView       *text_view, GtkTextIter       *target_iter, gint               y, gint              *line_top
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_buffer_to_window_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTextView       *text_view, GtkTextWindowType  win, gint               buffer_x, gint               buffer_y, gint              *window_x, gint              *window_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_window_to_buffer_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTextView       *text_view, GtkTextWindowType  win, gint               window_x, gint               window_y, gint              *buffer_x, gint              *buffer_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment *   </RETURNS>
GtkTextView   *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment *   </RETURNS>
GtkTextView   *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_window</NAME>
<RETURNS>GdkWindow *        </RETURNS>
GtkTextView       *text_view, GtkTextWindowType  win
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_window_type</NAME>
<RETURNS>GtkTextWindowType  </RETURNS>
GtkTextView       *text_view, GdkWindow         *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_border_window_size</NAME>
<RETURNS>void  </RETURNS>
GtkTextView       *text_view, GtkTextWindowType  type, gint               size
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_border_window_size</NAME>
<RETURNS>gint  </RETURNS>
GtkTextView       *text_view, GtkTextWindowType  type
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_forward_display_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextView       *text_view, GtkTextIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_backward_display_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextView       *text_view, GtkTextIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_forward_display_line_end</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextView       *text_view, GtkTextIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_backward_display_line_start</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextView       *text_view, GtkTextIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_starts_display_line</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextView       *text_view, const GtkTextIter *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_move_visually</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTextView       *text_view, GtkTextIter       *iter, gint               count
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_im_context_filter_keypress</NAME>
<RETURNS>gboolean         </RETURNS>
GtkTextView       *text_view, GdkEventKey       *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_reset_im_context</NAME>
<RETURNS>void             </RETURNS>
GtkTextView       *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_add_child_at_anchor</NAME>
<RETURNS>void  </RETURNS>
GtkTextView          *text_view, GtkWidget            *child, GtkTextChildAnchor   *anchor
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_add_child_in_window</NAME>
<RETURNS>void  </RETURNS>
GtkTextView          *text_view, GtkWidget            *child, GtkTextWindowType     which_window, gint                  xpos, gint                  ypos
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_move_child</NAME>
<RETURNS>void  </RETURNS>
GtkTextView          *text_view, GtkWidget            *child, gint                  xpos, gint                  ypos
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_wrap_mode</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, GtkWrapMode       wrap_mode
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_wrap_mode</NAME>
<RETURNS>GtkWrapMode       </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_editable</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gboolean          setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_editable</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_overwrite</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gboolean          overwrite
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_overwrite</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_accepts_tab</NAME>
<RETURNS>void 		 </RETURNS>
GtkTextView	*text_view, gboolean		 accepts_tab
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_accepts_tab</NAME>
<RETURNS>gboolean 	 </RETURNS>
GtkTextView	*text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_pixels_above_lines</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              pixels_above_lines
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_pixels_above_lines</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_pixels_below_lines</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              pixels_below_lines
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_pixels_below_lines</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_pixels_inside_wrap</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              pixels_inside_wrap
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_pixels_inside_wrap</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_justification</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, GtkJustification  justification
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_justification</NAME>
<RETURNS>GtkJustification  </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_left_margin</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              left_margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_left_margin</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_right_margin</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              right_margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_right_margin</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_top_margin</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              top_margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_top_margin</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_bottom_margin</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              bottom_margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_bottom_margin</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_indent</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gint              indent
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_indent</NAME>
<RETURNS>gint              </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_tabs</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, PangoTabArray    *tabs
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_tabs</NAME>
<RETURNS>PangoTabArray *   </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_default_attributes</NAME>
<RETURNS>GtkTextAttributes * </RETURNS>
GtkTextView    *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_input_purpose</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, GtkInputPurpose   purpose
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_input_purpose</NAME>
<RETURNS>GtkInputPurpose   </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_input_hints</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, GtkInputHints     hints
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_input_hints</NAME>
<RETURNS>GtkInputHints     </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_set_monospace</NAME>
<RETURNS>void              </RETURNS>
GtkTextView      *text_view, gboolean          monospace
</FUNCTION>
<FUNCTION>
<NAME>gtk_text_view_get_monospace</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTextView      *text_view
</FUNCTION>
<STRUCT>
<NAME>GtkTextViewPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOGGLE_BUTTON</NAME>
#define GTK_TYPE_TOGGLE_BUTTON                  (gtk_toggle_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_BUTTON</NAME>
#define GTK_TOGGLE_BUTTON(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButton))
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_BUTTON_CLASS</NAME>
#define GTK_TOGGLE_BUTTON_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOGGLE_BUTTON</NAME>
#define GTK_IS_TOGGLE_BUTTON(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOGGLE_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOGGLE_BUTTON_CLASS</NAME>
#define GTK_IS_TOGGLE_BUTTON_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOGGLE_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_BUTTON_GET_CLASS</NAME>
#define GTK_TOGGLE_BUTTON_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TOGGLE_BUTTON, GtkToggleButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkToggleButton</NAME>
struct _GtkToggleButton
{
  /*< private >*/
  GtkButton button;

  GtkToggleButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToggleButtonClass</NAME>
struct _GtkToggleButtonClass
{
  GtkButtonClass parent_class;

  void (* toggled) (GtkToggleButton *toggle_button);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_toggle_button_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_new_with_label</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_new_with_mnemonic</NAME>
<RETURNS>GtkWidget * </RETURNS>
const gchar     *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_set_mode</NAME>
<RETURNS>void        </RETURNS>
GtkToggleButton *toggle_button, gboolean         draw_indicator
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_get_mode</NAME>
<RETURNS>gboolean    </RETURNS>
GtkToggleButton *toggle_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_set_active</NAME>
<RETURNS>void        </RETURNS>
GtkToggleButton *toggle_button, gboolean         is_active
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_get_active</NAME>
<RETURNS>gboolean    </RETURNS>
GtkToggleButton *toggle_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_toggled</NAME>
<RETURNS>void        </RETURNS>
GtkToggleButton *toggle_button
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_set_inconsistent</NAME>
<RETURNS>void        </RETURNS>
GtkToggleButton *toggle_button, gboolean         setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_button_get_inconsistent</NAME>
<RETURNS>gboolean    </RETURNS>
GtkToggleButton *toggle_button
</FUNCTION>
<STRUCT>
<NAME>GtkToggleButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOGGLE_TOOL_BUTTON</NAME>
#define GTK_TYPE_TOGGLE_TOOL_BUTTON             (gtk_toggle_tool_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_TOOL_BUTTON</NAME>
#define GTK_TOGGLE_TOOL_BUTTON(obj)             (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON, GtkToggleToolButton))
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_TOOL_BUTTON_CLASS</NAME>
#define GTK_TOGGLE_TOOL_BUTTON_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOGGLE_TOOL_BUTTON, GtkToggleToolButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOGGLE_TOOL_BUTTON</NAME>
#define GTK_IS_TOGGLE_TOOL_BUTTON(obj)          (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOGGLE_TOOL_BUTTON_CLASS</NAME>
#define GTK_IS_TOGGLE_TOOL_BUTTON_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOGGLE_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_TOOL_BUTTON_GET_CLASS</NAME>
#define GTK_TOGGLE_TOOL_BUTTON_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOGGLE_TOOL_BUTTON, GtkToggleToolButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkToggleToolButton</NAME>
struct _GtkToggleToolButton
{
  GtkToolButton parent;

  /*< private >*/
  GtkToggleToolButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToggleToolButtonClass</NAME>
struct _GtkToggleToolButtonClass
{
  GtkToolButtonClass parent_class;

  /*< public >*/

  /* signal */
  void (* toggled) (GtkToggleToolButton *button);

  /*< private >*/

  /* Padding for future expansion */
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_toggle_tool_button_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_tool_button_new</NAME>
<RETURNS>GtkToolItem  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_tool_button_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkToolItem  *</RETURNS>
const gchar *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_tool_button_set_active</NAME>
<RETURNS>void          </RETURNS>
GtkToggleToolButton *button, gboolean             is_active
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_tool_button_get_active</NAME>
<RETURNS>gboolean      </RETURNS>
GtkToggleToolButton *button
</FUNCTION>
<STRUCT>
<NAME>GtkToggleToolButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOLBAR</NAME>
#define GTK_TYPE_TOOLBAR            (gtk_toolbar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOLBAR</NAME>
#define GTK_TOOLBAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOOLBAR, GtkToolbar))
</MACRO>
<MACRO>
<NAME>GTK_TOOLBAR_CLASS</NAME>
#define GTK_TOOLBAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOOLBAR, GtkToolbarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOLBAR</NAME>
#define GTK_IS_TOOLBAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOOLBAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOLBAR_CLASS</NAME>
#define GTK_IS_TOOLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOOLBAR))
</MACRO>
<MACRO>
<NAME>GTK_TOOLBAR_GET_CLASS</NAME>
#define GTK_TOOLBAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TOOLBAR, GtkToolbarClass))
</MACRO>
<ENUM>
<NAME>GtkToolbarSpaceStyle</NAME>
typedef enum
{
  GTK_TOOLBAR_SPACE_EMPTY,
  GTK_TOOLBAR_SPACE_LINE
} GtkToolbarSpaceStyle;
</ENUM>
<STRUCT>
<NAME>GtkToolbar</NAME>
struct _GtkToolbar
{
  GtkContainer container;

  GtkToolbarPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToolbarClass</NAME>
struct _GtkToolbarClass
{
  GtkContainerClass parent_class;

  /* signals */
  void     (* orientation_changed) (GtkToolbar       *toolbar,
				    GtkOrientation    orientation);
  void     (* style_changed)       (GtkToolbar       *toolbar,
				    GtkToolbarStyle   style);
  gboolean (* popup_context_menu)  (GtkToolbar       *toolbar,
				    gint              x,
				    gint              y,
				    gint              button_number);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_toolbar_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_new</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_insert</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar, GtkToolItem     *item, gint             pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_item_index</NAME>
<RETURNS>gint             </RETURNS>
GtkToolbar      *toolbar, GtkToolItem     *item
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_n_items</NAME>
<RETURNS>gint             </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_nth_item</NAME>
<RETURNS>GtkToolItem  *   </RETURNS>
GtkToolbar      *toolbar, gint             n
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_show_arrow</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_set_show_arrow</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar, gboolean         show_arrow
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_style</NAME>
<RETURNS>GtkToolbarStyle  </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_set_style</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar, GtkToolbarStyle  style
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_unset_style</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_icon_size</NAME>
<RETURNS>GtkIconSize      </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_set_icon_size</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar, GtkIconSize      icon_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_unset_icon_size</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_relief_style</NAME>
<RETURNS>GtkReliefStyle   </RETURNS>
GtkToolbar      *toolbar
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_get_drop_index</NAME>
<RETURNS>gint             </RETURNS>
GtkToolbar      *toolbar, gint             x, gint             y
</FUNCTION>
<FUNCTION>
<NAME>gtk_toolbar_set_drop_highlight_item</NAME>
<RETURNS>void             </RETURNS>
GtkToolbar      *toolbar, GtkToolItem     *tool_item, gint             index_
</FUNCTION>
<STRUCT>
<NAME>GtkToolbarPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOL_BUTTON</NAME>
#define GTK_TYPE_TOOL_BUTTON            (gtk_tool_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOL_BUTTON</NAME>
#define GTK_TOOL_BUTTON(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOOL_BUTTON, GtkToolButton))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_BUTTON_CLASS</NAME>
#define GTK_TOOL_BUTTON_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOOL_BUTTON, GtkToolButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_BUTTON</NAME>
#define GTK_IS_TOOL_BUTTON(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_BUTTON_CLASS</NAME>
#define GTK_IS_TOOL_BUTTON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOOL_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_BUTTON_GET_CLASS</NAME>
#define GTK_TOOL_BUTTON_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOOL_BUTTON, GtkToolButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkToolButton</NAME>
struct _GtkToolButton
{
  GtkToolItem parent;

  /*< private >*/
  GtkToolButtonPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToolButtonClass</NAME>
struct _GtkToolButtonClass
{
  GtkToolItemClass parent_class;

  GType button_type;

  /*< public >*/

  /* signal */
  void       (* clicked)             (GtkToolButton    *tool_item);

  /*< private >*/

  /* Padding for future expansion */
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tool_button_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_new</NAME>
<RETURNS>GtkToolItem  *</RETURNS>
GtkWidget   *icon_widget, const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkToolItem  *</RETURNS>
const gchar *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_set_label</NAME>
<RETURNS>void                   </RETURNS>
GtkToolButton *button, const gchar   *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_get_label</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_set_use_underline</NAME>
<RETURNS>void                   </RETURNS>
GtkToolButton *button, gboolean       use_underline
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_get_use_underline</NAME>
<RETURNS>gboolean               </RETURNS>
GtkToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_set_stock_id</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkToolButton *button, const gchar   *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_get_stock_id</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_set_icon_name</NAME>
<RETURNS>void                   </RETURNS>
GtkToolButton *button, const gchar   *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_get_icon_name</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_set_icon_widget</NAME>
<RETURNS>void                   </RETURNS>
GtkToolButton *button, GtkWidget     *icon_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_get_icon_widget</NAME>
<RETURNS>GtkWidget  *           </RETURNS>
GtkToolButton *button
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_set_label_widget</NAME>
<RETURNS>void                   </RETURNS>
GtkToolButton *button, GtkWidget     *label_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_button_get_label_widget</NAME>
<RETURNS>GtkWidget  *           </RETURNS>
GtkToolButton *button
</FUNCTION>
<STRUCT>
<NAME>GtkToolButtonPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOL_ITEM</NAME>
#define GTK_TYPE_TOOL_ITEM            (gtk_tool_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOL_ITEM</NAME>
#define GTK_TOOL_ITEM(o)              (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_TOOL_ITEM, GtkToolItem))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_ITEM_CLASS</NAME>
#define GTK_TOOL_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOOL_ITEM, GtkToolItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_ITEM</NAME>
#define GTK_IS_TOOL_ITEM(o)           (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_TOOL_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_ITEM_CLASS</NAME>
#define GTK_IS_TOOL_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOOL_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_ITEM_GET_CLASS</NAME>
#define GTK_TOOL_ITEM_GET_CLASS(o)    (G_TYPE_INSTANCE_GET_CLASS((o), GTK_TYPE_TOOL_ITEM, GtkToolItemClass))
</MACRO>
<STRUCT>
<NAME>GtkToolItem</NAME>
struct _GtkToolItem
{
  GtkBin parent;

  /*< private >*/
  GtkToolItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToolItemClass</NAME>
struct _GtkToolItemClass
{
  GtkBinClass parent_class;

  /* signals */
  gboolean   (* create_menu_proxy)    (GtkToolItem *tool_item);
  void       (* toolbar_reconfigured) (GtkToolItem *tool_item);

  /*< private >*/

  /* Padding for future expansion */
  void (* _gtk_reserved1) (void);
  void (* _gtk_reserved2) (void);
  void (* _gtk_reserved3) (void);
  void (* _gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tool_item_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_new</NAME>
<RETURNS>GtkToolItem  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_homogeneous</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, gboolean     homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_homogeneous</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_expand</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, gboolean     expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_expand</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_tooltip_text</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, const gchar *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_tooltip_markup</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, const gchar *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_use_drag_window</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, gboolean     use_drag_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_use_drag_window</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_visible_horizontal</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, gboolean     visible_horizontal
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_visible_horizontal</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_visible_vertical</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, gboolean     visible_vertical
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_visible_vertical</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_is_important</NAME>
<RETURNS>gboolean         </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_is_important</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, gboolean     is_important
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_ellipsize_mode</NAME>
<RETURNS>PangoEllipsizeMode  </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_icon_size</NAME>
<RETURNS>GtkIconSize      </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_orientation</NAME>
<RETURNS>GtkOrientation   </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_toolbar_style</NAME>
<RETURNS>GtkToolbarStyle  </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_relief_style</NAME>
<RETURNS>GtkReliefStyle   </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_text_alignment</NAME>
<RETURNS>gfloat           </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_text_orientation</NAME>
<RETURNS>GtkOrientation   </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_text_size_group</NAME>
<RETURNS>GtkSizeGroup  *  </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_retrieve_proxy_menu_item</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_get_proxy_menu_item</NAME>
<RETURNS>GtkWidget  *     </RETURNS>
GtkToolItem *tool_item, const gchar *menu_item_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_set_proxy_menu_item</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item, const gchar *menu_item_id, GtkWidget   *menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_rebuild_menu</NAME>
<RETURNS>void 		</RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_toolbar_reconfigured</NAME>
<RETURNS>void             </RETURNS>
GtkToolItem *tool_item
</FUNCTION>
<STRUCT>
<NAME>GtkToolItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOL_ITEM_GROUP</NAME>
#define GTK_TYPE_TOOL_ITEM_GROUP           (gtk_tool_item_group_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOL_ITEM_GROUP</NAME>
#define GTK_TOOL_ITEM_GROUP(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_TOOL_ITEM_GROUP, GtkToolItemGroup))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_ITEM_GROUP_CLASS</NAME>
#define GTK_TOOL_ITEM_GROUP_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_TOOL_ITEM_GROUP, GtkToolItemGroupClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_ITEM_GROUP</NAME>
#define GTK_IS_TOOL_ITEM_GROUP(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_TOOL_ITEM_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_ITEM_GROUP_CLASS</NAME>
#define GTK_IS_TOOL_ITEM_GROUP_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_TOOL_ITEM_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_ITEM_GROUP_GET_CLASS</NAME>
#define GTK_TOOL_ITEM_GROUP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TOOL_ITEM_GROUP, GtkToolItemGroupClass))
</MACRO>
<STRUCT>
<NAME>GtkToolItemGroup</NAME>
struct _GtkToolItemGroup
{
  GtkContainer parent_instance;
  GtkToolItemGroupPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToolItemGroupClass</NAME>
struct _GtkToolItemGroupClass
{
  GtkContainerClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tool_item_group_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_new</NAME>
<RETURNS>GtkWidget *            </RETURNS>
const gchar        *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_set_label</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup   *group, const gchar        *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_set_label_widget</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup   *group, GtkWidget          *label_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_set_collapsed</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup  *group, gboolean            collapsed
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_set_ellipsize</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup   *group, PangoEllipsizeMode  ellipsize
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_set_header_relief</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup   *group, GtkReliefStyle      style
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_label</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkToolItemGroup   *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_label_widget</NAME>
<RETURNS>GtkWidget             *</RETURNS>
GtkToolItemGroup   *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_collapsed</NAME>
<RETURNS>gboolean               </RETURNS>
GtkToolItemGroup   *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_ellipsize</NAME>
<RETURNS>PangoEllipsizeMode     </RETURNS>
GtkToolItemGroup   *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_header_relief</NAME>
<RETURNS>GtkReliefStyle         </RETURNS>
GtkToolItemGroup   *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_insert</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup   *group, GtkToolItem        *item, gint                position
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_set_item_position</NAME>
<RETURNS>void                   </RETURNS>
GtkToolItemGroup   *group, GtkToolItem        *item, gint                position
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_item_position</NAME>
<RETURNS>gint                   </RETURNS>
GtkToolItemGroup   *group, GtkToolItem        *item
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_n_items</NAME>
<RETURNS>guint                  </RETURNS>
GtkToolItemGroup   *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_nth_item</NAME>
<RETURNS>GtkToolItem *          </RETURNS>
GtkToolItemGroup   *group, guint               index
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_item_group_get_drop_item</NAME>
<RETURNS>GtkToolItem *          </RETURNS>
GtkToolItemGroup   *group, gint                x, gint                y
</FUNCTION>
<STRUCT>
<NAME>GtkToolItemGroupPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOL_PALETTE</NAME>
#define GTK_TYPE_TOOL_PALETTE           (gtk_tool_palette_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOL_PALETTE</NAME>
#define GTK_TOOL_PALETTE(obj)           (G_TYPE_CHECK_INSTANCE_CAST (obj, GTK_TYPE_TOOL_PALETTE, GtkToolPalette))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_PALETTE_CLASS</NAME>
#define GTK_TOOL_PALETTE_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST (cls, GTK_TYPE_TOOL_PALETTE, GtkToolPaletteClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_PALETTE</NAME>
#define GTK_IS_TOOL_PALETTE(obj)        (G_TYPE_CHECK_INSTANCE_TYPE (obj, GTK_TYPE_TOOL_PALETTE))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_PALETTE_CLASS</NAME>
#define GTK_IS_TOOL_PALETTE_CLASS(obj)  (G_TYPE_CHECK_CLASS_TYPE (obj, GTK_TYPE_TOOL_PALETTE))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_PALETTE_GET_CLASS</NAME>
#define GTK_TOOL_PALETTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TOOL_PALETTE, GtkToolPaletteClass))
</MACRO>
<ENUM>
<NAME>GtkToolPaletteDragTargets</NAME>
typedef enum /*< flags >*/
{
  GTK_TOOL_PALETTE_DRAG_ITEMS = (1 << 0),
  GTK_TOOL_PALETTE_DRAG_GROUPS = (1 << 1)
}
GtkToolPaletteDragTargets;
</ENUM>
<STRUCT>
<NAME>GtkToolPalette</NAME>
struct _GtkToolPalette
{
  GtkContainer parent_instance;
  GtkToolPalettePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkToolPaletteClass</NAME>
struct _GtkToolPaletteClass
{
  GtkContainerClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tool_palette_get_type</NAME>
<RETURNS>GType                           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_new</NAME>
<RETURNS>GtkWidget *                     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_set_group_position</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkToolItemGroup          *group, gint                       position
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_set_exclusive</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkToolItemGroup          *group, gboolean                   exclusive
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_set_expand</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkToolItemGroup          *group, gboolean                   expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_group_position</NAME>
<RETURNS>gint                            </RETURNS>
GtkToolPalette            *palette, GtkToolItemGroup          *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_exclusive</NAME>
<RETURNS>gboolean                        </RETURNS>
GtkToolPalette            *palette, GtkToolItemGroup          *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_expand</NAME>
<RETURNS>gboolean                        </RETURNS>
GtkToolPalette            *palette, GtkToolItemGroup          *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_set_icon_size</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkIconSize                icon_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_unset_icon_size</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_set_style</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkToolbarStyle            style
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_unset_style</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_icon_size</NAME>
<RETURNS>GtkIconSize                     </RETURNS>
GtkToolPalette            *palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_style</NAME>
<RETURNS>GtkToolbarStyle                 </RETURNS>
GtkToolPalette            *palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_drop_item</NAME>
<RETURNS>GtkToolItem *                   </RETURNS>
GtkToolPalette            *palette, gint                       x, gint                       y
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_drop_group</NAME>
<RETURNS>GtkToolItemGroup *              </RETURNS>
GtkToolPalette            *palette, gint                       x, gint                       y
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_drag_item</NAME>
<RETURNS>GtkWidget *                     </RETURNS>
GtkToolPalette            *palette, const GtkSelectionData    *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_set_drag_source</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkToolPaletteDragTargets  targets
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_add_drag_dest</NAME>
<RETURNS>void                            </RETURNS>
GtkToolPalette            *palette, GtkWidget                 *widget, GtkDestDefaults            flags, GtkToolPaletteDragTargets  targets, GdkDragAction              actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment *                 </RETURNS>
GtkToolPalette            *palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment *                 </RETURNS>
GtkToolPalette            *palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_drag_target_item</NAME>
<RETURNS>const GtkTargetEntry *          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_palette_get_drag_target_group</NAME>
<RETURNS>const GtkTargetEntry *          </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkToolPalettePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOL_SHELL</NAME>
#define GTK_TYPE_TOOL_SHELL            (gtk_tool_shell_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOL_SHELL</NAME>
#define GTK_TOOL_SHELL(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOOL_SHELL, GtkToolShell))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOL_SHELL</NAME>
#define GTK_IS_TOOL_SHELL(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOOL_SHELL))
</MACRO>
<MACRO>
<NAME>GTK_TOOL_SHELL_GET_IFACE</NAME>
#define GTK_TOOL_SHELL_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TOOL_SHELL, GtkToolShellIface))
</MACRO>
<STRUCT>
<NAME>GtkToolShellIface</NAME>
struct _GtkToolShellIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/
  GtkIconSize        (*get_icon_size)        (GtkToolShell *shell);
  GtkOrientation     (*get_orientation)      (GtkToolShell *shell);
  GtkToolbarStyle    (*get_style)            (GtkToolShell *shell);
  GtkReliefStyle     (*get_relief_style)     (GtkToolShell *shell);
  void               (*rebuild_menu)         (GtkToolShell *shell);
  GtkOrientation     (*get_text_orientation) (GtkToolShell *shell);
  gfloat             (*get_text_alignment)   (GtkToolShell *shell);
  PangoEllipsizeMode (*get_ellipsize_mode)   (GtkToolShell *shell);
  GtkSizeGroup *     (*get_text_size_group)  (GtkToolShell *shell);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tool_shell_get_type</NAME>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_icon_size</NAME>
<RETURNS>GtkIconSize         </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_orientation</NAME>
<RETURNS>GtkOrientation      </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_style</NAME>
<RETURNS>GtkToolbarStyle     </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_relief_style</NAME>
<RETURNS>GtkReliefStyle      </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_rebuild_menu</NAME>
<RETURNS>void                </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_text_orientation</NAME>
<RETURNS>GtkOrientation      </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_text_alignment</NAME>
<RETURNS>gfloat              </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_ellipsize_mode</NAME>
<RETURNS>PangoEllipsizeMode  </RETURNS>
GtkToolShell *shell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tool_shell_get_text_size_group</NAME>
<RETURNS>GtkSizeGroup  *     </RETURNS>
GtkToolShell *shell
</FUNCTION>
<STRUCT>
<NAME>GtkToolShell</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TOOLTIP</NAME>
#define GTK_TYPE_TOOLTIP                 (gtk_tooltip_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOOLTIP</NAME>
#define GTK_TOOLTIP(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOOLTIP, GtkTooltip))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOOLTIP</NAME>
#define GTK_IS_TOOLTIP(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOOLTIP))
</MACRO>
<FUNCTION>
<NAME>gtk_tooltip_get_type</NAME>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_markup</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, const gchar        *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_text</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, const gchar        *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_icon</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, GdkPixbuf          *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_icon_from_stock</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, const gchar        *stock_id, GtkIconSize         size
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_icon_from_icon_name</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, const gchar        *icon_name, GtkIconSize         size
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_icon_from_gicon</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, GIcon              *gicon, GtkIconSize         size
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_custom</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, GtkWidget          *custom_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_set_tip_area</NAME>
<RETURNS>void  </RETURNS>
GtkTooltip         *tooltip, const GdkRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_tooltip_trigger_tooltip_query</NAME>
<RETURNS>void  </RETURNS>
GdkDisplay         *display
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TREE_DRAG_SOURCE</NAME>
#define GTK_TYPE_TREE_DRAG_SOURCE            (gtk_tree_drag_source_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_DRAG_SOURCE</NAME>
#define GTK_TREE_DRAG_SOURCE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSource))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_DRAG_SOURCE</NAME>
#define GTK_IS_TREE_DRAG_SOURCE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_DRAG_SOURCE))
</MACRO>
<MACRO>
<NAME>GTK_TREE_DRAG_SOURCE_GET_IFACE</NAME>
#define GTK_TREE_DRAG_SOURCE_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_DRAG_SOURCE, GtkTreeDragSourceIface))
</MACRO>
<STRUCT>
<NAME>GtkTreeDragSourceIface</NAME>
struct _GtkTreeDragSourceIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* VTable - not signals */

  gboolean     (* row_draggable)        (GtkTreeDragSource   *drag_source,
                                         GtkTreePath         *path);

  gboolean     (* drag_data_get)        (GtkTreeDragSource   *drag_source,
                                         GtkTreePath         *path,
                                         GtkSelectionData    *selection_data);

  gboolean     (* drag_data_delete)     (GtkTreeDragSource *drag_source,
                                         GtkTreePath       *path);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_drag_source_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_drag_source_row_draggable</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeDragSource *drag_source, GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_drag_source_drag_data_delete</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeDragSource *drag_source, GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_drag_source_drag_data_get</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeDragSource *drag_source, GtkTreePath       *path, GtkSelectionData  *selection_data
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TREE_DRAG_DEST</NAME>
#define GTK_TYPE_TREE_DRAG_DEST            (gtk_tree_drag_dest_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_DRAG_DEST</NAME>
#define GTK_TREE_DRAG_DEST(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDest))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_DRAG_DEST</NAME>
#define GTK_IS_TREE_DRAG_DEST(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_DRAG_DEST))
</MACRO>
<MACRO>
<NAME>GTK_TREE_DRAG_DEST_GET_IFACE</NAME>
#define GTK_TREE_DRAG_DEST_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_DRAG_DEST, GtkTreeDragDestIface))
</MACRO>
<STRUCT>
<NAME>GtkTreeDragDestIface</NAME>
struct _GtkTreeDragDestIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* VTable - not signals */

  gboolean     (* drag_data_received) (GtkTreeDragDest   *drag_dest,
                                       GtkTreePath       *dest,
                                       GtkSelectionData  *selection_data);

  gboolean     (* row_drop_possible)  (GtkTreeDragDest   *drag_dest,
                                       GtkTreePath       *dest_path,
				       GtkSelectionData  *selection_data);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_drag_dest_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_drag_dest_drag_data_received</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeDragDest   *drag_dest, GtkTreePath       *dest, GtkSelectionData  *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_drag_dest_row_drop_possible</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeDragDest   *drag_dest, GtkTreePath       *dest_path, GtkSelectionData  *selection_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_set_row_drag_data</NAME>
<RETURNS>gboolean  </RETURNS>
GtkSelectionData  *selection_data, GtkTreeModel      *tree_model, GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_get_row_drag_data</NAME>
<RETURNS>gboolean  </RETURNS>
GtkSelectionData  *selection_data, GtkTreeModel     **tree_model, GtkTreePath      **path
</FUNCTION>
<STRUCT>
<NAME>GtkTreeDragDest</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTreeDragSource</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_MODEL</NAME>
#define GTK_TYPE_TREE_MODEL            (gtk_tree_model_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL</NAME>
#define GTK_TREE_MODEL(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_MODEL, GtkTreeModel))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_MODEL</NAME>
#define GTK_IS_TREE_MODEL(obj)	       (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_MODEL))
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_GET_IFACE</NAME>
#define GTK_TREE_MODEL_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_MODEL, GtkTreeModelIface))
</MACRO>
<MACRO>
<NAME>GTK_TYPE_TREE_ITER</NAME>
#define GTK_TYPE_TREE_ITER             (gtk_tree_iter_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TYPE_TREE_PATH</NAME>
#define GTK_TYPE_TREE_PATH             (gtk_tree_path_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TYPE_TREE_ROW_REFERENCE</NAME>
#define GTK_TYPE_TREE_ROW_REFERENCE    (gtk_tree_row_reference_get_type ())
</MACRO>
<USER_FUNCTION>
<NAME>GtkTreeModelForeachFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data
</USER_FUNCTION>
<ENUM>
<NAME>GtkTreeModelFlags</NAME>
typedef enum
{
  GTK_TREE_MODEL_ITERS_PERSIST = 1 << 0,
  GTK_TREE_MODEL_LIST_ONLY = 1 << 1
} GtkTreeModelFlags;
</ENUM>
<STRUCT>
<NAME>GtkTreeIter</NAME>
struct _GtkTreeIter
{
  gint stamp;
  gpointer user_data;
  gpointer user_data2;
  gpointer user_data3;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeModelIface</NAME>
struct _GtkTreeModelIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* Signals */
  void         (* row_changed)           (GtkTreeModel *tree_model,
					  GtkTreePath  *path,
					  GtkTreeIter  *iter);
  void         (* row_inserted)          (GtkTreeModel *tree_model,
					  GtkTreePath  *path,
					  GtkTreeIter  *iter);
  void         (* row_has_child_toggled) (GtkTreeModel *tree_model,
					  GtkTreePath  *path,
					  GtkTreeIter  *iter);
  void         (* row_deleted)           (GtkTreeModel *tree_model,
					  GtkTreePath  *path);
  void         (* rows_reordered)        (GtkTreeModel *tree_model,
					  GtkTreePath  *path,
					  GtkTreeIter  *iter,
					  gint         *new_order);

  /* Virtual Table */
  GtkTreeModelFlags (* get_flags)  (GtkTreeModel *tree_model);

  gint         (* get_n_columns)   (GtkTreeModel *tree_model);
  GType        (* get_column_type) (GtkTreeModel *tree_model,
				    gint          index_);
  gboolean     (* get_iter)        (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter,
				    GtkTreePath  *path);
  GtkTreePath *(* get_path)        (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
  void         (* get_value)       (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter,
				    gint          column,
				    GValue       *value);
  gboolean     (* iter_next)       (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
  gboolean     (* iter_previous)   (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
  gboolean     (* iter_children)   (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter,
				    GtkTreeIter  *parent);
  gboolean     (* iter_has_child)  (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
  gint         (* iter_n_children) (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
  gboolean     (* iter_nth_child)  (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter,
				    GtkTreeIter  *parent,
				    gint          n);
  gboolean     (* iter_parent)     (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter,
				    GtkTreeIter  *child);
  void         (* ref_node)        (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
  void         (* unref_node)      (GtkTreeModel *tree_model,
				    GtkTreeIter  *iter);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_path_new</NAME>
<RETURNS>GtkTreePath  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_new_from_string</NAME>
<RETURNS>GtkTreePath  *</RETURNS>
const gchar       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_new_from_indices</NAME>
<RETURNS>GtkTreePath  *</RETURNS>
gint               first_index, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_new_from_indicesv</NAME>
<RETURNS>GtkTreePath  *</RETURNS>
gint             *indices, gsize             length
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_to_string</NAME>
<RETURNS>gchar        *</RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_new_first</NAME>
<RETURNS>GtkTreePath  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_append_index</NAME>
<RETURNS>void          </RETURNS>
GtkTreePath       *path, gint               index_
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_prepend_index</NAME>
<RETURNS>void          </RETURNS>
GtkTreePath       *path, gint               index_
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_get_depth</NAME>
<RETURNS>gint          </RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_get_indices</NAME>
<RETURNS>gint         *</RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_get_indices_with_depth</NAME>
<RETURNS>gint         *</RETURNS>
GtkTreePath *path, gint        *depth
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_free</NAME>
<RETURNS>void          </RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_copy</NAME>
<RETURNS>GtkTreePath  *</RETURNS>
const GtkTreePath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_get_type</NAME>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_compare</NAME>
<RETURNS>gint          </RETURNS>
const GtkTreePath *a, const GtkTreePath *b
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_next</NAME>
<RETURNS>void          </RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_prev</NAME>
<RETURNS>gboolean      </RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_up</NAME>
<RETURNS>gboolean      </RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_down</NAME>
<RETURNS>void          </RETURNS>
GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_is_ancestor</NAME>
<RETURNS>gboolean      </RETURNS>
GtkTreePath       *path, GtkTreePath       *descendant
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_path_is_descendant</NAME>
<RETURNS>gboolean      </RETURNS>
GtkTreePath       *path, GtkTreePath       *ancestor
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_get_type</NAME>
<RETURNS>GType                 </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_new</NAME>
<RETURNS>GtkTreeRowReference  *</RETURNS>
GtkTreeModel        *model, GtkTreePath         *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_new_proxy</NAME>
<RETURNS>GtkTreeRowReference  *</RETURNS>
GObject             *proxy, GtkTreeModel        *model, GtkTreePath         *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_get_path</NAME>
<RETURNS>GtkTreePath          *</RETURNS>
GtkTreeRowReference *reference
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_get_model</NAME>
<RETURNS>GtkTreeModel         *</RETURNS>
GtkTreeRowReference *reference
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_valid</NAME>
<RETURNS>gboolean              </RETURNS>
GtkTreeRowReference *reference
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_copy</NAME>
<RETURNS>GtkTreeRowReference  *</RETURNS>
GtkTreeRowReference *reference
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_free</NAME>
<RETURNS>void                  </RETURNS>
GtkTreeRowReference *reference
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_inserted</NAME>
<RETURNS>void                  </RETURNS>
GObject     *proxy, GtkTreePath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_deleted</NAME>
<RETURNS>void                  </RETURNS>
GObject     *proxy, GtkTreePath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_row_reference_reordered</NAME>
<RETURNS>void                  </RETURNS>
GObject     *proxy, GtkTreePath *path, GtkTreeIter *iter, gint        *new_order
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_iter_copy</NAME>
<RETURNS>GtkTreeIter  *     </RETURNS>
GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_iter_free</NAME>
<RETURNS>void               </RETURNS>
GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_iter_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_type</NAME>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_flags</NAME>
<RETURNS>GtkTreeModelFlags  </RETURNS>
GtkTreeModel *tree_model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_n_columns</NAME>
<RETURNS>gint               </RETURNS>
GtkTreeModel *tree_model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_column_type</NAME>
<RETURNS>GType              </RETURNS>
GtkTreeModel *tree_model, gint          index_
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_iter</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, GtkTreePath  *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_iter_from_string</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, const gchar  *path_string
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_string_from_iter</NAME>
<RETURNS>gchar  *           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_iter_first</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_path</NAME>
<RETURNS>GtkTreePath  *     </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_value</NAME>
<RETURNS>void               </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, gint          column, GValue       *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_previous</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_next</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_children</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, GtkTreeIter  *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_has_child</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_n_children</NAME>
<RETURNS>gint               </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_nth_child</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, GtkTreeIter  *parent, gint          n
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_iter_parent</NAME>
<RETURNS>gboolean           </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, GtkTreeIter  *child
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_ref_node</NAME>
<RETURNS>void               </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_unref_node</NAME>
<RETURNS>void               </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get</NAME>
<RETURNS>void               </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_get_valist</NAME>
<RETURNS>void               </RETURNS>
GtkTreeModel *tree_model, GtkTreeIter  *iter, va_list       var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_foreach</NAME>
<RETURNS>void               </RETURNS>
GtkTreeModel            *model, GtkTreeModelForeachFunc  func, gpointer                 user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_row_changed</NAME>
<RETURNS>void  </RETURNS>
GtkTreeModel *tree_model, GtkTreePath  *path, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_row_inserted</NAME>
<RETURNS>void  </RETURNS>
GtkTreeModel *tree_model, GtkTreePath  *path, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_row_has_child_toggled</NAME>
<RETURNS>void  </RETURNS>
GtkTreeModel *tree_model, GtkTreePath  *path, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_row_deleted</NAME>
<RETURNS>void  </RETURNS>
GtkTreeModel *tree_model, GtkTreePath  *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_rows_reordered</NAME>
<RETURNS>void  </RETURNS>
GtkTreeModel *tree_model, GtkTreePath  *path, GtkTreeIter  *iter, gint         *new_order
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_rows_reordered_with_length</NAME>
<RETURNS>void  </RETURNS>
GtkTreeModel *tree_model, GtkTreePath  *path, GtkTreeIter  *iter, gint         *new_order, gint          length
</FUNCTION>
<STRUCT>
<NAME>GtkTreeModel</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTreePath</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTreeRowReference</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_MODEL_FILTER</NAME>
#define GTK_TYPE_TREE_MODEL_FILTER              (gtk_tree_model_filter_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_FILTER</NAME>
#define GTK_TREE_MODEL_FILTER(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_MODEL_FILTER, GtkTreeModelFilter))
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_FILTER_CLASS</NAME>
#define GTK_TREE_MODEL_FILTER_CLASS(vtable)     (G_TYPE_CHECK_CLASS_CAST ((vtable), GTK_TYPE_TREE_MODEL_FILTER, GtkTreeModelFilterClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_MODEL_FILTER</NAME>
#define GTK_IS_TREE_MODEL_FILTER(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_MODEL_FILTER))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_MODEL_FILTER_CLASS</NAME>
#define GTK_IS_TREE_MODEL_FILTER_CLASS(vtable)  (G_TYPE_CHECK_CLASS_TYPE ((vtable), GTK_TYPE_TREE_MODEL_FILTER))
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_FILTER_GET_CLASS</NAME>
#define GTK_TREE_MODEL_FILTER_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TREE_MODEL_FILTER, GtkTreeModelFilterClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkTreeModelFilterVisibleFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeModel *model,
                                                    GtkTreeIter  *iter,
                                                    gpointer      data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeModelFilterModifyFunc</NAME>
<RETURNS>void </RETURNS>
GtkTreeModel *model,
                                               GtkTreeIter  *iter,
                                               GValue       *value,
                                               gint          column,
                                               gpointer      data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkTreeModelFilter</NAME>
struct _GtkTreeModelFilter
{
  GObject parent;

  /*< private >*/
  GtkTreeModelFilterPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeModelFilterClass</NAME>
struct _GtkTreeModelFilterClass
{
  GObjectClass parent_class;

  gboolean (* visible) (GtkTreeModelFilter *self,
                        GtkTreeModel       *child_model,
                        GtkTreeIter        *iter);
  void (* modify) (GtkTreeModelFilter *self,
                   GtkTreeModel       *child_model,
                   GtkTreeIter        *iter,
                   GValue             *value,
                   gint                column);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_model_filter_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_new</NAME>
<RETURNS>GtkTreeModel  *</RETURNS>
GtkTreeModel                 *child_model, GtkTreePath                  *root
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_set_visible_func</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelFilter           *filter, GtkTreeModelFilterVisibleFunc func, gpointer                      data, GDestroyNotify                destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_set_modify_func</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelFilter           *filter, gint                          n_columns, GType                        *types, GtkTreeModelFilterModifyFunc  func, gpointer                      data, GDestroyNotify                destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_set_visible_column</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelFilter           *filter, gint                          column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_get_model</NAME>
<RETURNS>GtkTreeModel  *</RETURNS>
GtkTreeModelFilter           *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_convert_child_iter_to_iter</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeModelFilter           *filter, GtkTreeIter                  *filter_iter, GtkTreeIter                  *child_iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_convert_iter_to_child_iter</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelFilter           *filter, GtkTreeIter                  *child_iter, GtkTreeIter                  *filter_iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_convert_child_path_to_path</NAME>
<RETURNS>GtkTreePath   *</RETURNS>
GtkTreeModelFilter           *filter, GtkTreePath                  *child_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_convert_path_to_child_path</NAME>
<RETURNS>GtkTreePath   *</RETURNS>
GtkTreeModelFilter           *filter, GtkTreePath                  *filter_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_refilter</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelFilter           *filter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_filter_clear_cache</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelFilter           *filter
</FUNCTION>
<STRUCT>
<NAME>GtkTreeModelFilterPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_MODEL_SORT</NAME>
#define GTK_TYPE_TREE_MODEL_SORT			(gtk_tree_model_sort_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_SORT</NAME>
#define GTK_TREE_MODEL_SORT(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSort))
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_SORT_CLASS</NAME>
#define GTK_TREE_MODEL_SORT_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSortClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_MODEL_SORT</NAME>
#define GTK_IS_TREE_MODEL_SORT(obj)			(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_MODEL_SORT))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_MODEL_SORT_CLASS</NAME>
#define GTK_IS_TREE_MODEL_SORT_CLASS(klass)		(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_MODEL_SORT))
</MACRO>
<MACRO>
<NAME>GTK_TREE_MODEL_SORT_GET_CLASS</NAME>
#define GTK_TREE_MODEL_SORT_GET_CLASS(obj)		(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TREE_MODEL_SORT, GtkTreeModelSortClass))
</MACRO>
<STRUCT>
<NAME>GtkTreeModelSort</NAME>
struct _GtkTreeModelSort
{
  GObject parent;

  /* < private > */
  GtkTreeModelSortPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeModelSortClass</NAME>
struct _GtkTreeModelSortClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_model_sort_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_new_with_model</NAME>
<RETURNS>GtkTreeModel  *</RETURNS>
GtkTreeModel     *child_model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_get_model</NAME>
<RETURNS>GtkTreeModel  *</RETURNS>
GtkTreeModelSort *tree_model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_convert_child_path_to_path</NAME>
<RETURNS>GtkTreePath   *</RETURNS>
GtkTreeModelSort *tree_model_sort, GtkTreePath      *child_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_convert_child_iter_to_iter</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeModelSort *tree_model_sort, GtkTreeIter      *sort_iter, GtkTreeIter      *child_iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_convert_path_to_child_path</NAME>
<RETURNS>GtkTreePath   *</RETURNS>
GtkTreeModelSort *tree_model_sort, GtkTreePath      *sorted_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_convert_iter_to_child_iter</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelSort *tree_model_sort, GtkTreeIter      *child_iter, GtkTreeIter      *sorted_iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_reset_default_sort_func</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelSort *tree_model_sort
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_clear_cache</NAME>
<RETURNS>void           </RETURNS>
GtkTreeModelSort *tree_model_sort
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_model_sort_iter_is_valid</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeModelSort *tree_model_sort, GtkTreeIter      *iter
</FUNCTION>
<STRUCT>
<NAME>GtkTreeModelSortPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_SELECTION</NAME>
#define GTK_TYPE_TREE_SELECTION			(gtk_tree_selection_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_SELECTION</NAME>
#define GTK_TREE_SELECTION(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelection))
</MACRO>
<MACRO>
<NAME>GTK_TREE_SELECTION_CLASS</NAME>
#define GTK_TREE_SELECTION_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_SELECTION, GtkTreeSelectionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_SELECTION</NAME>
#define GTK_IS_TREE_SELECTION(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_SELECTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_SELECTION_CLASS</NAME>
#define GTK_IS_TREE_SELECTION_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_SELECTION))
</MACRO>
<MACRO>
<NAME>GTK_TREE_SELECTION_GET_CLASS</NAME>
#define GTK_TREE_SELECTION_GET_CLASS(obj)	(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TREE_SELECTION, GtkTreeSelectionClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkTreeSelectionFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeSelection  *selection,
					      GtkTreeModel      *model,
					      GtkTreePath       *path,
                                              gboolean           path_currently_selected,
					      gpointer           data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeSelectionForeachFunc</NAME>
<RETURNS>void </RETURNS>
GtkTreeModel      *model,
					      GtkTreePath       *path,
					      GtkTreeIter       *iter,
					      gpointer           data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkTreeSelection</NAME>
struct _GtkTreeSelection
{
  /*< private >*/
  GObject parent;

  GtkTreeSelectionPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeSelectionClass</NAME>
struct _GtkTreeSelectionClass
{
  GObjectClass parent_class;

  /*< public >*/

  void (* changed) (GtkTreeSelection *selection);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_selection_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_set_mode</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkSelectionMode             type
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_get_mode</NAME>
<RETURNS>GtkSelectionMode  </RETURNS>
GtkTreeSelection            *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_set_select_function</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreeSelectionFunc         func, gpointer                     data, GDestroyNotify               destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_get_user_data</NAME>
<RETURNS>gpointer          </RETURNS>
GtkTreeSelection            *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_get_tree_view</NAME>
<RETURNS>GtkTreeView *     </RETURNS>
GtkTreeSelection            *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_get_select_function</NAME>
<RETURNS>GtkTreeSelectionFunc  </RETURNS>
GtkTreeSelection        *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_get_selected</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTreeSelection            *selection, GtkTreeModel               **model, GtkTreeIter                 *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_get_selected_rows</NAME>
<RETURNS>GList  *          </RETURNS>
GtkTreeSelection            *selection, GtkTreeModel               **model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_count_selected_rows</NAME>
<RETURNS>gint              </RETURNS>
GtkTreeSelection            *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_selected_foreach</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreeSelectionForeachFunc  func, gpointer                     data
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_select_path</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreePath                 *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_unselect_path</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreePath                 *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_select_iter</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreeIter                 *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_unselect_iter</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreeIter                 *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_path_is_selected</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTreeSelection            *selection, GtkTreePath                 *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_iter_is_selected</NAME>
<RETURNS>gboolean          </RETURNS>
GtkTreeSelection            *selection, GtkTreeIter                 *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_select_all</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_unselect_all</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_select_range</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreePath                 *start_path, GtkTreePath                 *end_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_selection_unselect_range</NAME>
<RETURNS>void              </RETURNS>
GtkTreeSelection            *selection, GtkTreePath                 *start_path, GtkTreePath                 *end_path
</FUNCTION>
<STRUCT>
<NAME>GtkTreeSelectionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_SORTABLE</NAME>
#define GTK_TYPE_TREE_SORTABLE            (gtk_tree_sortable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_SORTABLE</NAME>
#define GTK_TREE_SORTABLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortable))
</MACRO>
<MACRO>
<NAME>GTK_TREE_SORTABLE_CLASS</NAME>
#define GTK_TREE_SORTABLE_CLASS(obj)      (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortableIface))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_SORTABLE</NAME>
#define GTK_IS_TREE_SORTABLE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_SORTABLE))
</MACRO>
<MACRO>
<NAME>GTK_TREE_SORTABLE_GET_IFACE</NAME>
#define GTK_TREE_SORTABLE_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_TREE_SORTABLE, GtkTreeSortableIface))
</MACRO>
<MACRO>
<NAME>GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID</NAME>
#define GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID (-1)
</MACRO>
<MACRO>
<NAME>GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID</NAME>
#define GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID (-2)
</MACRO>
<USER_FUNCTION>
<NAME>GtkTreeIterCompareFunc</NAME>
<RETURNS>gint </RETURNS>
GtkTreeModel *model,
					 GtkTreeIter  *a,
					 GtkTreeIter  *b,
					 gpointer      user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkTreeSortableIface</NAME>
struct _GtkTreeSortableIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* signals */
  void     (* sort_column_changed)   (GtkTreeSortable        *sortable);

  /* virtual table */
  gboolean (* get_sort_column_id)    (GtkTreeSortable        *sortable,
				      gint                   *sort_column_id,
				      GtkSortType            *order);
  void     (* set_sort_column_id)    (GtkTreeSortable        *sortable,
				      gint                    sort_column_id,
				      GtkSortType             order);
  void     (* set_sort_func)         (GtkTreeSortable        *sortable,
				      gint                    sort_column_id,
				      GtkTreeIterCompareFunc  sort_func,
				      gpointer                user_data,
				      GDestroyNotify          destroy);
  void     (* set_default_sort_func) (GtkTreeSortable        *sortable,
				      GtkTreeIterCompareFunc  sort_func,
				      gpointer                user_data,
				      GDestroyNotify          destroy);
  gboolean (* has_default_sort_func) (GtkTreeSortable        *sortable);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_sortable_get_type</NAME>
<RETURNS>GType     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_sortable_sort_column_changed</NAME>
<RETURNS>void      </RETURNS>
GtkTreeSortable        *sortable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_sortable_get_sort_column_id</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeSortable        *sortable, gint                   *sort_column_id, GtkSortType            *order
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_sortable_set_sort_column_id</NAME>
<RETURNS>void      </RETURNS>
GtkTreeSortable        *sortable, gint                    sort_column_id, GtkSortType             order
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_sortable_set_sort_func</NAME>
<RETURNS>void      </RETURNS>
GtkTreeSortable        *sortable, gint                    sort_column_id, GtkTreeIterCompareFunc  sort_func, gpointer                user_data, GDestroyNotify          destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_sortable_set_default_sort_func</NAME>
<RETURNS>void      </RETURNS>
GtkTreeSortable        *sortable, GtkTreeIterCompareFunc  sort_func, gpointer                user_data, GDestroyNotify          destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_sortable_has_default_sort_func</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeSortable        *sortable
</FUNCTION>
<STRUCT>
<NAME>GtkTreeSortable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_STORE</NAME>
#define GTK_TYPE_TREE_STORE			(gtk_tree_store_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_STORE</NAME>
#define GTK_TREE_STORE(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_STORE, GtkTreeStore))
</MACRO>
<MACRO>
<NAME>GTK_TREE_STORE_CLASS</NAME>
#define GTK_TREE_STORE_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_STORE, GtkTreeStoreClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_STORE</NAME>
#define GTK_IS_TREE_STORE(obj)			(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_STORE))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_STORE_CLASS</NAME>
#define GTK_IS_TREE_STORE_CLASS(klass)		(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_STORE))
</MACRO>
<MACRO>
<NAME>GTK_TREE_STORE_GET_CLASS</NAME>
#define GTK_TREE_STORE_GET_CLASS(obj)		(G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TREE_STORE, GtkTreeStoreClass))
</MACRO>
<STRUCT>
<NAME>GtkTreeStore</NAME>
struct _GtkTreeStore
{
  GObject parent;

  GtkTreeStorePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeStoreClass</NAME>
struct _GtkTreeStoreClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_store_get_type</NAME>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_new</NAME>
<RETURNS>GtkTreeStore  *</RETURNS>
gint          n_columns, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_newv</NAME>
<RETURNS>GtkTreeStore  *</RETURNS>
gint          n_columns, GType        *types
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_set_column_types</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, gint          n_columns, GType        *types
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_set_value</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, gint          column, GValue       *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_set</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_set_valuesv</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, gint         *columns, GValue       *values, gint          n_values
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_set_valist</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, va_list       var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_remove</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_insert</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent, gint          position
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_insert_before</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent, GtkTreeIter  *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_insert_after</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent, GtkTreeIter  *sibling
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_insert_with_values</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent, gint          position, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_insert_with_valuesv</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent, gint          position, gint         *columns, GValue       *values, gint          n_values
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_prepend</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_append</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_is_ancestor</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *descendant
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_iter_depth</NAME>
<RETURNS>gint           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_clear</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_iter_is_valid</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_reorder</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *parent, gint         *new_order
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_swap</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *a, GtkTreeIter  *b
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_move_before</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *position
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_store_move_after</NAME>
<RETURNS>void           </RETURNS>
GtkTreeStore *tree_store, GtkTreeIter  *iter, GtkTreeIter  *position
</FUNCTION>
<STRUCT>
<NAME>GtkTreeStorePrivate</NAME>
</STRUCT>
<ENUM>
<NAME>GtkTreeViewDropPosition</NAME>
typedef enum
{
  /* drop before/after this row */
  GTK_TREE_VIEW_DROP_BEFORE,
  GTK_TREE_VIEW_DROP_AFTER,
  /* drop as a child of this row (with fallback to before or after
   * if into is not possible)
   */
  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE,
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER
} GtkTreeViewDropPosition;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_TREE_VIEW</NAME>
#define GTK_TYPE_TREE_VIEW		(gtk_tree_view_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_VIEW</NAME>
#define GTK_TREE_VIEW(obj)		(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_VIEW, GtkTreeView))
</MACRO>
<MACRO>
<NAME>GTK_TREE_VIEW_CLASS</NAME>
#define GTK_TREE_VIEW_CLASS(klass)	(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_VIEW, GtkTreeViewClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_VIEW</NAME>
#define GTK_IS_TREE_VIEW(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_VIEW_CLASS</NAME>
#define GTK_IS_TREE_VIEW_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_VIEW))
</MACRO>
<MACRO>
<NAME>GTK_TREE_VIEW_GET_CLASS</NAME>
#define GTK_TREE_VIEW_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TREE_VIEW, GtkTreeViewClass))
</MACRO>
<STRUCT>
<NAME>GtkTreeView</NAME>
struct _GtkTreeView
{
  GtkContainer parent;

  /*< private >*/
  GtkTreeViewPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeViewClass</NAME>
struct _GtkTreeViewClass
{
  GtkContainerClass parent_class;

  void     (* row_activated)              (GtkTreeView       *tree_view,
				           GtkTreePath       *path,
					   GtkTreeViewColumn *column);
  gboolean (* test_expand_row)            (GtkTreeView       *tree_view,
				           GtkTreeIter       *iter,
				           GtkTreePath       *path);
  gboolean (* test_collapse_row)          (GtkTreeView       *tree_view,
				           GtkTreeIter       *iter,
				           GtkTreePath       *path);
  void     (* row_expanded)               (GtkTreeView       *tree_view,
				           GtkTreeIter       *iter,
				           GtkTreePath       *path);
  void     (* row_collapsed)              (GtkTreeView       *tree_view,
				           GtkTreeIter       *iter,
				           GtkTreePath       *path);
  void     (* columns_changed)            (GtkTreeView       *tree_view);
  void     (* cursor_changed)             (GtkTreeView       *tree_view);

  /* Key Binding signals */
  gboolean (* move_cursor)                (GtkTreeView       *tree_view,
				           GtkMovementStep    step,
				           gint               count);
  gboolean (* select_all)                 (GtkTreeView       *tree_view);
  gboolean (* unselect_all)               (GtkTreeView       *tree_view);
  gboolean (* select_cursor_row)          (GtkTreeView       *tree_view,
					   gboolean           start_editing);
  gboolean (* toggle_cursor_row)          (GtkTreeView       *tree_view);
  gboolean (* expand_collapse_cursor_row) (GtkTreeView       *tree_view,
					   gboolean           logical,
					   gboolean           expand,
					   gboolean           open_all);
  gboolean (* select_cursor_parent)       (GtkTreeView       *tree_view);
  gboolean (* start_interactive_search)   (GtkTreeView       *tree_view);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};
</STRUCT>
<USER_FUNCTION>
<NAME>GtkTreeViewColumnDropFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeView             *tree_view,
						GtkTreeViewColumn       *column,
						GtkTreeViewColumn       *prev_column,
						GtkTreeViewColumn       *next_column,
						gpointer                 data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeViewMappingFunc</NAME>
<RETURNS>void </RETURNS>
GtkTreeView             *tree_view,
						GtkTreePath             *path,
						gpointer                 user_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeViewSearchEqualFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeModel            *model,
						gint                     column,
						const gchar             *key,
						GtkTreeIter             *iter,
						gpointer                 search_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeViewRowSeparatorFunc</NAME>
<RETURNS>gboolean </RETURNS>
GtkTreeModel      *model,
						 GtkTreeIter       *iter,
						 gpointer           data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeViewSearchPositionFunc</NAME>
<RETURNS>void </RETURNS>
GtkTreeView  *tree_view,
						   GtkWidget    *search_dialog,
						   gpointer      user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_type</NAME>
<RETURNS>GType                   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_new</NAME>
<RETURNS>GtkWidget              *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_new_with_model</NAME>
<RETURNS>GtkWidget              *</RETURNS>
GtkTreeModel              *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_model</NAME>
<RETURNS>GtkTreeModel           *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_model</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeModel              *model
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_selection</NAME>
<RETURNS>GtkTreeSelection       *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment          *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkAdjustment             *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment          *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkAdjustment             *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_headers_visible</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_headers_visible</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, gboolean                   headers_visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_columns_autosize</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_headers_clickable</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_headers_clickable</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, gboolean                   setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_rules_hint</NAME>
<DEPRECATED/>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, gboolean                   setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_rules_hint</NAME>
<DEPRECATED/>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_activate_on_single_click</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_activate_on_single_click</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, gboolean                   single
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_append_column</NAME>
<RETURNS>gint                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewColumn         *column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_remove_column</NAME>
<RETURNS>gint                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewColumn         *column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_insert_column</NAME>
<RETURNS>gint                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewColumn         *column, gint                       position
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_insert_column_with_attributes</NAME>
<RETURNS>gint                    </RETURNS>
GtkTreeView               *tree_view, gint                       position, const gchar               *title, GtkCellRenderer           *cell, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_insert_column_with_data_func</NAME>
<RETURNS>gint                    </RETURNS>
GtkTreeView               *tree_view, gint                       position, const gchar               *title, GtkCellRenderer           *cell, GtkTreeCellDataFunc        func, gpointer                   data, GDestroyNotify             dnotify
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_n_columns</NAME>
<RETURNS>guint                   </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_column</NAME>
<RETURNS>GtkTreeViewColumn      *</RETURNS>
GtkTreeView               *tree_view, gint                       n
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_columns</NAME>
<RETURNS>GList                  *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_move_column_after</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewColumn         *column, GtkTreeViewColumn         *base_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_expander_column</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewColumn         *column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_expander_column</NAME>
<RETURNS>GtkTreeViewColumn      *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_column_drag_function</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewColumnDropFunc  func, gpointer                   user_data, GDestroyNotify             destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_scroll_to_point</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, gint                       tree_x, gint                       tree_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_scroll_to_cell</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewColumn         *column, gboolean                   use_align, gfloat                     row_align, gfloat                     col_align
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_row_activated</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewColumn         *column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_expand_all</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_collapse_all</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_expand_to_path</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_expand_row</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, gboolean                   open_all
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_collapse_row</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_map_expanded_rows</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreeViewMappingFunc     func, gpointer                   data
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_row_expanded</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_reorderable</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, gboolean                   reorderable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_reorderable</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_cursor</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewColumn         *focus_column, gboolean                   start_editing
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_cursor_on_cell</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewColumn         *focus_column, GtkCellRenderer           *focus_cell, gboolean                   start_editing
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_cursor</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath              **path, GtkTreeViewColumn        **focus_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_bin_window</NAME>
<RETURNS>GdkWindow              *</RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_path_at_pos</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, gint                       x, gint                       y, GtkTreePath              **path, GtkTreeViewColumn        **column, gint                      *cell_x, gint                      *cell_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_cell_area</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewColumn         *column, GdkRectangle              *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_background_area</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewColumn         *column, GdkRectangle              *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_visible_rect</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GdkRectangle              *visible_rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_visible_range</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, GtkTreePath              **start_path, GtkTreePath              **end_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_is_blank_at_pos</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, gint                       x, gint                       y, GtkTreePath              **path, GtkTreeViewColumn        **column, gint                      *cell_x, gint                      *cell_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_enable_model_drag_source</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GdkModifierType            start_button_mask, const GtkTargetEntry      *targets, gint                       n_targets, GdkDragAction              actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_enable_model_drag_dest</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, const GtkTargetEntry      *targets, gint                       n_targets, GdkDragAction              actions
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_unset_rows_drag_source</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_unset_rows_drag_dest</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_drag_dest_row</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path, GtkTreeViewDropPosition    pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_drag_dest_row</NAME>
<RETURNS>void                    </RETURNS>
GtkTreeView               *tree_view, GtkTreePath              **path, GtkTreeViewDropPosition   *pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_dest_row_at_pos</NAME>
<RETURNS>gboolean                </RETURNS>
GtkTreeView               *tree_view, gint                       drag_x, gint                       drag_y, GtkTreePath              **path, GtkTreeViewDropPosition   *pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_create_row_drag_icon</NAME>
<RETURNS>cairo_surface_t        *</RETURNS>
GtkTreeView               *tree_view, GtkTreePath               *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_enable_search</NAME>
<RETURNS>void                        </RETURNS>
GtkTreeView                *tree_view, gboolean                    enable_search
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_enable_search</NAME>
<RETURNS>gboolean                    </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_search_column</NAME>
<RETURNS>gint                        </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_search_column</NAME>
<RETURNS>void                        </RETURNS>
GtkTreeView                *tree_view, gint                        column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_search_equal_func</NAME>
<RETURNS>GtkTreeViewSearchEqualFunc  </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_search_equal_func</NAME>
<RETURNS>void                        </RETURNS>
GtkTreeView                *tree_view, GtkTreeViewSearchEqualFunc  search_equal_func, gpointer                    search_user_data, GDestroyNotify              search_destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_search_entry</NAME>
<RETURNS>GtkEntry                      *</RETURNS>
GtkTreeView                   *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_search_entry</NAME>
<RETURNS>void                           </RETURNS>
GtkTreeView                   *tree_view, GtkEntry                      *entry
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_search_position_func</NAME>
<RETURNS>GtkTreeViewSearchPositionFunc  </RETURNS>
GtkTreeView                   *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_search_position_func</NAME>
<RETURNS>void                           </RETURNS>
GtkTreeView                   *tree_view, GtkTreeViewSearchPositionFunc  func, gpointer                       data, GDestroyNotify                 destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_convert_widget_to_tree_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTreeView *tree_view, gint         wx, gint         wy, gint        *tx, gint        *ty
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_convert_tree_to_widget_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTreeView *tree_view, gint         tx, gint         ty, gint        *wx, gint        *wy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_convert_widget_to_bin_window_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTreeView *tree_view, gint         wx, gint         wy, gint        *bx, gint        *by
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_convert_bin_window_to_widget_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTreeView *tree_view, gint         bx, gint         by, gint        *wx, gint        *wy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_convert_tree_to_bin_window_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTreeView *tree_view, gint         tx, gint         ty, gint        *bx, gint        *by
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_convert_bin_window_to_tree_coords</NAME>
<RETURNS>void  </RETURNS>
GtkTreeView *tree_view, gint         bx, gint         by, gint        *tx, gint        *ty
</FUNCTION>
<USER_FUNCTION>
<NAME>GtkTreeDestroyCountFunc</NAME>
<RETURNS>void </RETURNS>
GtkTreeView             *tree_view,
					   GtkTreePath             *path,
					   gint                     children,
					   gpointer                 user_data
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_destroy_count_func</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkTreeView             *tree_view, GtkTreeDestroyCountFunc  func, gpointer                 data, GDestroyNotify           destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_fixed_height_mode</NAME>
<RETURNS>void      </RETURNS>
GtkTreeView          *tree_view, gboolean              enable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_fixed_height_mode</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeView          *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_hover_selection</NAME>
<RETURNS>void      </RETURNS>
GtkTreeView          *tree_view, gboolean              hover
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_hover_selection</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeView          *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_hover_expand</NAME>
<RETURNS>void      </RETURNS>
GtkTreeView          *tree_view, gboolean              expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_hover_expand</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeView          *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_rubber_banding</NAME>
<RETURNS>void      </RETURNS>
GtkTreeView          *tree_view, gboolean              enable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_rubber_banding</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeView          *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_is_rubber_banding_active</NAME>
<RETURNS>gboolean  </RETURNS>
GtkTreeView       *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_row_separator_func</NAME>
<RETURNS>GtkTreeViewRowSeparatorFunc  </RETURNS>
GtkTreeView               *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_row_separator_func</NAME>
<RETURNS>void                         </RETURNS>
GtkTreeView                *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer                    data, GDestroyNotify              destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_grid_lines</NAME>
<RETURNS>GtkTreeViewGridLines         </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_grid_lines</NAME>
<RETURNS>void                         </RETURNS>
GtkTreeView                *tree_view, GtkTreeViewGridLines        grid_lines
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_enable_tree_lines</NAME>
<RETURNS>gboolean                     </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_enable_tree_lines</NAME>
<RETURNS>void                         </RETURNS>
GtkTreeView                *tree_view, gboolean                    enabled
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_show_expanders</NAME>
<RETURNS>void                         </RETURNS>
GtkTreeView                *tree_view, gboolean                    enabled
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_show_expanders</NAME>
<RETURNS>gboolean                     </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_level_indentation</NAME>
<RETURNS>void                         </RETURNS>
GtkTreeView                *tree_view, gint                        indentation
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_level_indentation</NAME>
<RETURNS>gint                         </RETURNS>
GtkTreeView                *tree_view
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_tooltip_row</NAME>
<RETURNS>void           </RETURNS>
GtkTreeView       *tree_view, GtkTooltip        *tooltip, GtkTreePath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_tooltip_cell</NAME>
<RETURNS>void           </RETURNS>
GtkTreeView       *tree_view, GtkTooltip        *tooltip, GtkTreePath       *path, GtkTreeViewColumn *column, GtkCellRenderer   *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_tooltip_context</NAME>
<RETURNS>gboolean       </RETURNS>
GtkTreeView       *tree_view, gint              *x, gint              *y, gboolean           keyboard_tip, GtkTreeModel     **model, GtkTreePath      **path, GtkTreeIter       *iter
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_set_tooltip_column</NAME>
<RETURNS>void           </RETURNS>
GtkTreeView       *tree_view, gint               column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_get_tooltip_column</NAME>
<RETURNS>gint           </RETURNS>
GtkTreeView       *tree_view
</FUNCTION>
<STRUCT>
<NAME>GtkTreeSelection</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTreeSelectionClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTreeViewPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TREE_VIEW_COLUMN</NAME>
#define GTK_TYPE_TREE_VIEW_COLUMN	     (gtk_tree_view_column_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TREE_VIEW_COLUMN</NAME>
#define GTK_TREE_VIEW_COLUMN(obj)	     (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumn))
</MACRO>
<MACRO>
<NAME>GTK_TREE_VIEW_COLUMN_CLASS</NAME>
#define GTK_TREE_VIEW_COLUMN_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumnClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_VIEW_COLUMN</NAME>
#define GTK_IS_TREE_VIEW_COLUMN(obj)	     (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TREE_VIEW_COLUMN))
</MACRO>
<MACRO>
<NAME>GTK_IS_TREE_VIEW_COLUMN_CLASS</NAME>
#define GTK_IS_TREE_VIEW_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TREE_VIEW_COLUMN))
</MACRO>
<MACRO>
<NAME>GTK_TREE_VIEW_COLUMN_GET_CLASS</NAME>
#define GTK_TREE_VIEW_COLUMN_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TREE_VIEW_COLUMN, GtkTreeViewColumnClass))
</MACRO>
<ENUM>
<NAME>GtkTreeViewColumnSizing</NAME>
typedef enum
{
  GTK_TREE_VIEW_COLUMN_GROW_ONLY,
  GTK_TREE_VIEW_COLUMN_AUTOSIZE,
  GTK_TREE_VIEW_COLUMN_FIXED
} GtkTreeViewColumnSizing;
</ENUM>
<USER_FUNCTION>
<NAME>GtkTreeCellDataFunc</NAME>
<RETURNS>void </RETURNS>
GtkTreeViewColumn *tree_column,
				      GtkCellRenderer   *cell,
				      GtkTreeModel      *tree_model,
				      GtkTreeIter       *iter,
				      gpointer           data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkTreeViewColumn</NAME>
struct _GtkTreeViewColumn
{
  GInitiallyUnowned parent_instance;

  GtkTreeViewColumnPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTreeViewColumnClass</NAME>
struct _GtkTreeViewColumnClass
{
  GInitiallyUnownedClass parent_class;

  void (*clicked) (GtkTreeViewColumn *tree_column);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tree_view_column_get_type</NAME>
<RETURNS>GType                    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_new</NAME>
<RETURNS>GtkTreeViewColumn       *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_new_with_area</NAME>
<RETURNS>GtkTreeViewColumn       *</RETURNS>
GtkCellArea             *area
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_new_with_attributes</NAME>
<RETURNS>GtkTreeViewColumn       *</RETURNS>
const gchar             *title, GtkCellRenderer         *cell, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_pack_start</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell, gboolean                 expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_pack_end</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell, gboolean                 expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_clear</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_add_attribute</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell_renderer, const gchar             *attribute, gint                     column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_attributes</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell_renderer, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_cell_data_func</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell_renderer, GtkTreeCellDataFunc      func, gpointer                 func_data, GDestroyNotify           destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_clear_attributes</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell_renderer
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_spacing</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gint                     spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_spacing</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_visible</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gboolean                 visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_visible</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_resizable</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gboolean                 resizable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_resizable</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_sizing</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkTreeViewColumnSizing  type
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_sizing</NAME>
<RETURNS>GtkTreeViewColumnSizing  </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_x_offset</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_width</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_fixed_width</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_fixed_width</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gint                     fixed_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_min_width</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gint                     min_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_min_width</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_max_width</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gint                     max_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_max_width</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_clicked</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_title</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, const gchar             *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_title</NAME>
<RETURNS>const gchar  *           </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_expand</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gboolean                 expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_expand</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_clickable</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gboolean                 clickable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_clickable</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_widget</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkWidget               *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_widget</NAME>
<RETURNS>GtkWidget               *</RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_alignment</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gfloat                   xalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_alignment</NAME>
<RETURNS>gfloat                   </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_reorderable</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gboolean                 reorderable
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_reorderable</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_sort_column_id</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gint                     sort_column_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_sort_column_id</NAME>
<RETURNS>gint                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_sort_indicator</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, gboolean                 setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_sort_indicator</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_set_sort_order</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkSortType              order
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_sort_order</NAME>
<RETURNS>GtkSortType              </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_cell_set_cell_data</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkTreeModel            *tree_model, GtkTreeIter             *iter, gboolean                 is_expander, gboolean                 is_expanded
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_cell_get_size</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, const GdkRectangle      *cell_area, gint                    *x_offset, gint                    *y_offset, gint                    *width, gint                    *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_cell_is_visible</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_focus_cell</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_cell_get_position</NAME>
<RETURNS>gboolean                 </RETURNS>
GtkTreeViewColumn       *tree_column, GtkCellRenderer         *cell_renderer, gint                    *x_offset, gint                    *width
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_queue_resize</NAME>
<RETURNS>void                     </RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_tree_view</NAME>
<RETURNS>GtkWidget               *</RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<FUNCTION>
<NAME>gtk_tree_view_column_get_button</NAME>
<RETURNS>GtkWidget               *</RETURNS>
GtkTreeViewColumn       *tree_column
</FUNCTION>
<STRUCT>
<NAME>GtkTreeViewColumnPrivate</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GtkRcPropertyParser</NAME>
<RETURNS>gboolean </RETURNS>
const GParamSpec *pspec,
                                         const GString    *rc_string,
                                         GValue           *property_value
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkBuilderConnectFunc</NAME>
<RETURNS>void </RETURNS>
GtkBuilder    *builder,
				       GObject       *object,
				       const gchar   *signal_name,
				       const gchar   *handler_name,
				       GObject       *connect_object,
				       GConnectFlags  flags,
				       gpointer       user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkAdjustment</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkBuilder</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkClipboard</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkIconSet</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkIconSource</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkRcStyle</NAME>
</STRUCT>

<STRUCT>
<NAME>GtkSelectionData</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkSettings</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkStyle</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkStyleContext</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkTooltip</NAME>
</STRUCT>

<STRUCT>
<NAME>GtkWidgetPath</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkWindow</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_scan_string</NAME>
<RETURNS>gboolean         </RETURNS>
const char     **pos, GString         *out
</FUNCTION>
<FUNCTION>
<NAME>gtk_skip_space</NAME>
<RETURNS>gboolean         </RETURNS>
const char     **pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_read_line</NAME>
<RETURNS>gint             </RETURNS>
FILE            *stream, GString         *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_trim_string</NAME>
<RETURNS>char  *          </RETURNS>
const char      *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_split_file_list</NAME>
<RETURNS>char  **         </RETURNS>
const char      *str
</FUNCTION>
<FUNCTION>
<NAME>gtk_file_load_bytes</NAME>
<RETURNS>GBytes          *</RETURNS>
GFile           *file, GCancellable    *cancellable, GError         **error
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_VIEWPORT</NAME>
#define GTK_TYPE_VIEWPORT            (gtk_viewport_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VIEWPORT</NAME>
#define GTK_VIEWPORT(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VIEWPORT, GtkViewport))
</MACRO>
<MACRO>
<NAME>GTK_VIEWPORT_CLASS</NAME>
#define GTK_VIEWPORT_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VIEWPORT, GtkViewportClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VIEWPORT</NAME>
#define GTK_IS_VIEWPORT(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VIEWPORT))
</MACRO>
<MACRO>
<NAME>GTK_IS_VIEWPORT_CLASS</NAME>
#define GTK_IS_VIEWPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VIEWPORT))
</MACRO>
<MACRO>
<NAME>GTK_VIEWPORT_GET_CLASS</NAME>
#define GTK_VIEWPORT_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VIEWPORT, GtkViewportClass))
</MACRO>
<STRUCT>
<NAME>GtkViewport</NAME>
struct _GtkViewport
{
  GtkBin bin;

  /*< private >*/
  GtkViewportPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkViewportClass</NAME>
struct _GtkViewportClass
{
  GtkBinClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_viewport_get_type</NAME>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_new</NAME>
<RETURNS>GtkWidget *     </RETURNS>
GtkAdjustment *hadjustment, GtkAdjustment *vadjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_get_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment * </RETURNS>
GtkViewport   *viewport
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_get_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>GtkAdjustment * </RETURNS>
GtkViewport   *viewport
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_set_hadjustment</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkViewport   *viewport, GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_set_vadjustment</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkViewport   *viewport, GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_set_shadow_type</NAME>
<RETURNS>void            </RETURNS>
GtkViewport   *viewport, GtkShadowType  type
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_get_shadow_type</NAME>
<RETURNS>GtkShadowType   </RETURNS>
GtkViewport   *viewport
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_get_bin_window</NAME>
<RETURNS>GdkWindow *     </RETURNS>
GtkViewport   *viewport
</FUNCTION>
<FUNCTION>
<NAME>gtk_viewport_get_view_window</NAME>
<RETURNS>GdkWindow *     </RETURNS>
GtkViewport   *viewport
</FUNCTION>
<STRUCT>
<NAME>GtkViewportPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_VOLUME_BUTTON</NAME>
#define GTK_TYPE_VOLUME_BUTTON                 (gtk_volume_button_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VOLUME_BUTTON</NAME>
#define GTK_VOLUME_BUTTON(obj)                 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VOLUME_BUTTON, GtkVolumeButton))
</MACRO>
<MACRO>
<NAME>GTK_VOLUME_BUTTON_CLASS</NAME>
#define GTK_VOLUME_BUTTON_CLASS(klass)         (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VOLUME_BUTTON, GtkVolumeButtonClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VOLUME_BUTTON</NAME>
#define GTK_IS_VOLUME_BUTTON(obj)              (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VOLUME_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_IS_VOLUME_BUTTON_CLASS</NAME>
#define GTK_IS_VOLUME_BUTTON_CLASS(klass)      (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VOLUME_BUTTON))
</MACRO>
<MACRO>
<NAME>GTK_VOLUME_BUTTON_GET_CLASS</NAME>
#define GTK_VOLUME_BUTTON_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VOLUME_BUTTON, GtkVolumeButtonClass))
</MACRO>
<STRUCT>
<NAME>GtkVolumeButton</NAME>
struct _GtkVolumeButton
{
  GtkScaleButton  parent;
};
</STRUCT>
<STRUCT>
<NAME>GtkVolumeButtonClass</NAME>
struct _GtkVolumeButtonClass
{
  GtkScaleButtonClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_volume_button_get_type</NAME>
<RETURNS>GType 		</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_volume_button_new</NAME>
<RETURNS>GtkWidget *	</RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>GtkWidgetHelpType</NAME>
typedef enum
{
  GTK_WIDGET_HELP_TOOLTIP,
  GTK_WIDGET_HELP_WHATS_THIS
} GtkWidgetHelpType;
</ENUM>
<MACRO>
<NAME>GTK_TYPE_WIDGET</NAME>
#define GTK_TYPE_WIDGET			  (gtk_widget_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_WIDGET</NAME>
#define GTK_WIDGET(widget)		  (G_TYPE_CHECK_INSTANCE_CAST ((widget), GTK_TYPE_WIDGET, GtkWidget))
</MACRO>
<MACRO>
<NAME>GTK_WIDGET_CLASS</NAME>
#define GTK_WIDGET_CLASS(klass)		  (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_WIDGET, GtkWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_WIDGET</NAME>
#define GTK_IS_WIDGET(widget)		  (G_TYPE_CHECK_INSTANCE_TYPE ((widget), GTK_TYPE_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_IS_WIDGET_CLASS</NAME>
#define GTK_IS_WIDGET_CLASS(klass)	  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WIDGET))
</MACRO>
<MACRO>
<NAME>GTK_WIDGET_GET_CLASS</NAME>
#define GTK_WIDGET_GET_CLASS(obj)         (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_WIDGET, GtkWidgetClass))
</MACRO>
<MACRO>
<NAME>GTK_TYPE_REQUISITION</NAME>
#define GTK_TYPE_REQUISITION              (gtk_requisition_get_type ())
</MACRO>
<TYPEDEF>
<NAME>GtkAllocation</NAME>
typedef 	GdkRectangle	   GtkAllocation;
</TYPEDEF>
<USER_FUNCTION>
<NAME>GtkCallback</NAME>
<RETURNS>void </RETURNS>
GtkWidget        *widget,
				    gpointer          data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkTickCallback</NAME>
<RETURNS>gboolean </RETURNS>
GtkWidget     *widget,
                                     GdkFrameClock *frame_clock,
                                     gpointer       user_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkRequisition</NAME>
struct _GtkRequisition
{
  gint width;
  gint height;
};
</STRUCT>
<STRUCT>
<NAME>GtkWidget</NAME>
struct _GtkWidget
{
  GInitiallyUnowned parent_instance;

  /*< private >*/

  GtkWidgetPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkWidgetClass</NAME>
struct _GtkWidgetClass
{
  GInitiallyUnownedClass parent_class;

  /*< public >*/

  guint activate_signal;

  /* seldomly overidden */
  void (*dispatch_child_properties_changed) (GtkWidget   *widget,
					     guint        n_pspecs,
					     GParamSpec **pspecs);

  /* basics */
  void (* destroy)             (GtkWidget        *widget);
  void (* show)		       (GtkWidget        *widget);
  void (* show_all)            (GtkWidget        *widget);
  void (* hide)		       (GtkWidget        *widget);
  void (* map)		       (GtkWidget        *widget);
  void (* unmap)	       (GtkWidget        *widget);
  void (* realize)	       (GtkWidget        *widget);
  void (* unrealize)	       (GtkWidget        *widget);
  void (* size_allocate)       (GtkWidget        *widget,
				GtkAllocation    *allocation);
  void (* state_changed)       (GtkWidget        *widget,
				GtkStateType   	  previous_state);
  void (* state_flags_changed) (GtkWidget        *widget,
				GtkStateFlags  	  previous_state_flags);
  void (* parent_set)	       (GtkWidget        *widget,
				GtkWidget        *previous_parent);
  void (* hierarchy_changed)   (GtkWidget        *widget,
				GtkWidget        *previous_toplevel);
  void (* style_set)	       (GtkWidget        *widget,
				GtkStyle         *previous_style);
  void (* direction_changed)   (GtkWidget        *widget,
				GtkTextDirection  previous_direction);
  void (* grab_notify)         (GtkWidget        *widget,
				gboolean          was_grabbed);
  void (* child_notify)        (GtkWidget	 *widget,
				GParamSpec       *child_property);
  gboolean (* draw)	       (GtkWidget	 *widget,
                                cairo_t          *cr);

  /* size requests */
  GtkSizeRequestMode (* get_request_mode)               (GtkWidget      *widget);

  void               (* get_preferred_height)           (GtkWidget       *widget,
                                                         gint            *minimum_height,
                                                         gint            *natural_height);
  void               (* get_preferred_width_for_height) (GtkWidget       *widget,
                                                         gint             height,
                                                         gint            *minimum_width,
                                                         gint            *natural_width);
  void               (* get_preferred_width)            (GtkWidget       *widget,
                                                         gint            *minimum_width,
                                                         gint            *natural_width);
  void               (* get_preferred_height_for_width) (GtkWidget       *widget,
                                                         gint             width,
                                                         gint            *minimum_height,
                                                         gint            *natural_height);

  /* Mnemonics */
  gboolean (* mnemonic_activate)        (GtkWidget           *widget,
                                         gboolean             group_cycling);

  /* explicit focus */
  void     (* grab_focus)               (GtkWidget           *widget);
  gboolean (* focus)                    (GtkWidget           *widget,
                                         GtkDirectionType     direction);

  /* keyboard navigation */
  void     (* move_focus)               (GtkWidget           *widget,
                                         GtkDirectionType     direction);
  gboolean (* keynav_failed)            (GtkWidget           *widget,
                                         GtkDirectionType     direction);

  /* events */
  gboolean (* event)			(GtkWidget	     *widget,
					 GdkEvent	     *event);
  gboolean (* button_press_event)	(GtkWidget	     *widget,
					 GdkEventButton      *event);
  gboolean (* button_release_event)	(GtkWidget	     *widget,
					 GdkEventButton      *event);
  gboolean (* scroll_event)		(GtkWidget           *widget,
					 GdkEventScroll      *event);
  gboolean (* motion_notify_event)	(GtkWidget	     *widget,
					 GdkEventMotion      *event);
  gboolean (* delete_event)		(GtkWidget	     *widget,
					 GdkEventAny	     *event);
  gboolean (* destroy_event)		(GtkWidget	     *widget,
					 GdkEventAny	     *event);
  gboolean (* key_press_event)		(GtkWidget	     *widget,
					 GdkEventKey	     *event);
  gboolean (* key_release_event)	(GtkWidget	     *widget,
					 GdkEventKey	     *event);
  gboolean (* enter_notify_event)	(GtkWidget	     *widget,
					 GdkEventCrossing    *event);
  gboolean (* leave_notify_event)	(GtkWidget	     *widget,
					 GdkEventCrossing    *event);
  gboolean (* configure_event)		(GtkWidget	     *widget,
					 GdkEventConfigure   *event);
  gboolean (* focus_in_event)		(GtkWidget	     *widget,
					 GdkEventFocus       *event);
  gboolean (* focus_out_event)		(GtkWidget	     *widget,
					 GdkEventFocus       *event);
  gboolean (* map_event)		(GtkWidget	     *widget,
					 GdkEventAny	     *event);
  gboolean (* unmap_event)		(GtkWidget	     *widget,
					 GdkEventAny	     *event);
  gboolean (* property_notify_event)	(GtkWidget	     *widget,
					 GdkEventProperty    *event);
  gboolean (* selection_clear_event)	(GtkWidget	     *widget,
					 GdkEventSelection   *event);
  gboolean (* selection_request_event)	(GtkWidget	     *widget,
					 GdkEventSelection   *event);
  gboolean (* selection_notify_event)	(GtkWidget	     *widget,
					 GdkEventSelection   *event);
  gboolean (* proximity_in_event)	(GtkWidget	     *widget,
					 GdkEventProximity   *event);
  gboolean (* proximity_out_event)	(GtkWidget	     *widget,
					 GdkEventProximity   *event);
  gboolean (* visibility_notify_event)	(GtkWidget	     *widget,
					 GdkEventVisibility  *event);
  gboolean (* window_state_event)	(GtkWidget	     *widget,
					 GdkEventWindowState *event);
  gboolean (* damage_event)             (GtkWidget           *widget,
                                         GdkEventExpose      *event);
  gboolean (* grab_broken_event)        (GtkWidget           *widget,
                                         GdkEventGrabBroken  *event);

  /* selection */
  void     (* selection_get)       (GtkWidget          *widget,
				    GtkSelectionData   *selection_data,
				    guint               info,
				    guint               time_);
  void     (* selection_received)  (GtkWidget          *widget,
				    GtkSelectionData   *selection_data,
				    guint               time_);

  /* Source side drag signals */
  void     (* drag_begin)          (GtkWidget         *widget,
				    GdkDragContext     *context);
  void     (* drag_end)	           (GtkWidget	       *widget,
				    GdkDragContext     *context);
  void     (* drag_data_get)       (GtkWidget          *widget,
				    GdkDragContext     *context,
				    GtkSelectionData   *selection_data,
				    guint               info,
				    guint               time_);
  void     (* drag_data_delete)    (GtkWidget          *widget,
				    GdkDragContext     *context);

  /* Target side drag signals */
  void     (* drag_leave)          (GtkWidget          *widget,
				    GdkDragContext     *context,
				    guint               time_);
  gboolean (* drag_motion)         (GtkWidget	       *widget,
				    GdkDragContext     *context,
				    gint                x,
				    gint                y,
				    guint               time_);
  gboolean (* drag_drop)           (GtkWidget	       *widget,
				    GdkDragContext     *context,
				    gint                x,
				    gint                y,
				    guint               time_);
  void     (* drag_data_received)  (GtkWidget          *widget,
				    GdkDragContext     *context,
				    gint                x,
				    gint                y,
				    GtkSelectionData   *selection_data,
				    guint               info,
				    guint               time_);
  gboolean (* drag_failed)         (GtkWidget          *widget,
                                    GdkDragContext     *context,
                                    GtkDragResult       result);

  /* Signals used only for keybindings */
  gboolean (* popup_menu)          (GtkWidget          *widget);

  /* If a widget has multiple tooltips/whatsthis, it should show the
   * one for the current focus location, or if that doesn't make
   * sense, should cycle through them showing each tip alongside
   * whatever piece of the widget it applies to.
   */
  gboolean (* show_help)           (GtkWidget          *widget,
                                    GtkWidgetHelpType   help_type);

  /* accessibility support
   */
  AtkObject *  (* get_accessible)     (GtkWidget *widget);

  void         (* screen_changed)     (GtkWidget *widget,
                                       GdkScreen *previous_screen);
  gboolean     (* can_activate_accel) (GtkWidget *widget,
                                       guint      signal_id);


  void         (* composited_changed) (GtkWidget *widget);

  gboolean     (* query_tooltip)      (GtkWidget  *widget,
				       gint        x,
				       gint        y,
				       gboolean    keyboard_tooltip,
				       GtkTooltip *tooltip);

  void         (* compute_expand)     (GtkWidget  *widget,
                                       gboolean   *hexpand_p,
                                       gboolean   *vexpand_p);

  void         (* adjust_size_request)    (GtkWidget         *widget,
                                           GtkOrientation     orientation,
                                           gint              *minimum_size,
                                           gint              *natural_size);
  void         (* adjust_size_allocation) (GtkWidget         *widget,
                                           GtkOrientation     orientation,
                                           gint              *minimum_size,
                                           gint              *natural_size,
                                           gint              *allocated_pos,
                                           gint              *allocated_size);

  void         (* style_updated)          (GtkWidget *widget);

  gboolean     (* touch_event)            (GtkWidget     *widget,
                                           GdkEventTouch *event);

  void         (* get_preferred_height_and_baseline_for_width)  (GtkWidget     *widget,
								 gint           width,
								 gint          *minimum_height,
								 gint          *natural_height,
								 gint          *minimum_baseline,
								 gint          *natural_baseline);
  void         (* adjust_baseline_request)(GtkWidget         *widget,
                                           gint              *minimum_baseline,
                                           gint              *natural_baseline);
  void         (* adjust_baseline_allocation) (GtkWidget         *widget,
					       gint              *baseline);
  void         (*queue_draw_region)           (GtkWidget         *widget,
					       const cairo_region_t *region);

  /*< private >*/

  GtkWidgetClassPrivate *priv;

  /* Padding for future expansion */
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_widget_get_type</NAME>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
GType		type, const gchar	       *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_destroy</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_destroyed</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, GtkWidget	      **widget_pointer
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_unparent</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_show</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_hide</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_show_now</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_show_all</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_no_show_all</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gboolean             no_show_all
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_no_show_all</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_map</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_unmap</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_realize</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_unrealize</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_draw</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, cairo_t             *cr
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_draw</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_draw_area</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, gint                 x, gint                 y, gint                 width, gint                 height
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_draw_region</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, const cairo_region_t*region
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_resize</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_resize_no_redraw</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_allocate</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_frame_clock</NAME>
<RETURNS>GdkFrameClock * </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_size_request</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, GtkRequisition      *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_size_allocate</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, GtkAllocation       *allocation
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_size_allocate_with_baseline</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, GtkAllocation       *allocation, gint                 baseline
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_request_mode</NAME>
<RETURNS>GtkSizeRequestMode   </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_preferred_width</NAME>
<RETURNS>void                 </RETURNS>
GtkWidget      *widget, gint           *minimum_width, gint           *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_preferred_height_for_width</NAME>
<RETURNS>void                 </RETURNS>
GtkWidget      *widget, gint            width, gint           *minimum_height, gint           *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_preferred_height</NAME>
<RETURNS>void                 </RETURNS>
GtkWidget      *widget, gint           *minimum_height, gint           *natural_height
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_preferred_width_for_height</NAME>
<RETURNS>void                 </RETURNS>
GtkWidget      *widget, gint            height, gint           *minimum_width, gint           *natural_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_preferred_height_and_baseline_for_width</NAME>
<RETURNS>void    </RETURNS>
GtkWidget     *widget, gint           width, gint          *minimum_height, gint          *natural_height, gint          *minimum_baseline, gint          *natural_baseline
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_preferred_size</NAME>
<RETURNS>void                 </RETURNS>
GtkWidget      *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_child_requisition</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWidget         *widget, GtkRequisition    *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_add_accelerator</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget           *widget, const gchar         *accel_signal, GtkAccelGroup       *accel_group, guint                accel_key, GdkModifierType      accel_mods, GtkAccelFlags        accel_flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_remove_accelerator</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, GtkAccelGroup       *accel_group, guint                accel_key, GdkModifierType      accel_mods
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_accel_path</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, const gchar         *accel_path, GtkAccelGroup       *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_list_accel_closures</NAME>
<RETURNS>GList *     </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_can_activate_accel</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, guint                signal_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_mnemonic_activate</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, gboolean             group_cycling
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_event</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget	       *widget, GdkEvent	       *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_send_expose</NAME>
<DEPRECATED/>
<RETURNS>gint        </RETURNS>
GtkWidget           *widget, GdkEvent            *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_send_focus_change</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, GdkEvent            *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_activate</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_reparent</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, GtkWidget	       *new_parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_intersect</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget	       *widget, const GdkRectangle  *area, GdkRectangle	       *intersection
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_region_intersect</NAME>
<DEPRECATED/>
<RETURNS>cairo_region_t  *</RETURNS>
GtkWidget	       *widget, const cairo_region_t     *region
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_freeze_child_notify</NAME>
<RETURNS>void 	</RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_child_notify</NAME>
<RETURNS>void 	</RETURNS>
GtkWidget	       *widget, const gchar	       *child_property
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_thaw_child_notify</NAME>
<RETURNS>void 	</RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_can_focus</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gboolean             can_focus
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_can_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_has_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_has_visible_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_grab_focus</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_focus_on_click</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gboolean             focus_on_click
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_focus_on_click</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_can_default</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gboolean             can_default
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_can_default</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_has_default</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_grab_default</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_receives_default</NAME>
<RETURNS>void       </RETURNS>
GtkWidget           *widget, gboolean             receives_default
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_receives_default</NAME>
<RETURNS>gboolean   </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_has_grab</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_device_is_shadowed</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, GdkDevice           *device
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_name</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, const gchar  *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_name</NAME>
<RETURNS>const gchar  *         </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_state</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, GtkStateType  state
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_state</NAME>
<DEPRECATED/>
<RETURNS>GtkStateType           </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_state_flags</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, GtkStateFlags  flags, gboolean       clear
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_unset_state_flags</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, GtkStateFlags  flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_state_flags</NAME>
<RETURNS>GtkStateFlags          </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_sensitive</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_sensitive</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_sensitive</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_visible</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_visible</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_visible</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_has_window</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      has_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_has_window</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_toplevel</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_drawable</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_realized</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      realized
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_realized</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_mapped</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      mapped
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_mapped</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_app_paintable</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      app_paintable
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_app_paintable</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_double_buffered</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      double_buffered
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_double_buffered</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_redraw_on_allocate</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      redraw_on_allocate
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_parent</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, GtkWidget    *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_parent</NAME>
<RETURNS>GtkWidget            * </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_parent_window</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, GdkWindow    *parent_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_parent_window</NAME>
<RETURNS>GdkWindow            * </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_child_visible</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, gboolean      is_visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_child_visible</NAME>
<RETURNS>gboolean               </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_window</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, GdkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_window</NAME>
<RETURNS>GdkWindow            * </RETURNS>
GtkWidget    *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_register_window</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, GdkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_unregister_window</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget    *widget, GdkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_allocated_width</NAME>
<RETURNS>int                    </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_allocated_height</NAME>
<RETURNS>int                    </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_allocated_baseline</NAME>
<RETURNS>int                    </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_allocated_size</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, GtkAllocation *allocation, int           *baseline
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_allocation</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, GtkAllocation *allocation
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_allocation</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, const GtkAllocation *allocation
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_clip</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, const GtkAllocation *clip
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_clip</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, GtkAllocation *clip
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_requisition</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkWidget     *widget, GtkRequisition *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_child_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, GtkDirectionType     direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_keynav_failed</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget           *widget, GtkDirectionType     direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_error_bell</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_size_request</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gint                 width, gint                 height
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_size_request</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gint                *width, gint                *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_events</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, gint			events
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_add_events</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, gint	                events
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_device_events</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, GdkDevice           *device, GdkEventMask		events
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_add_device_events</NAME>
<RETURNS>void        </RETURNS>
GtkWidget           *widget, GdkDevice           *device, GdkEventMask         events
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_opacity</NAME>
<RETURNS>void 	   </RETURNS>
GtkWidget	       *widget, double		opacity
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_opacity</NAME>
<RETURNS>double 	   </RETURNS>
GtkWidget	       *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_device_enabled</NAME>
<RETURNS>void        </RETURNS>
GtkWidget    *widget, GdkDevice    *device, gboolean      enabled
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_device_enabled</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget    *widget, GdkDevice    *device
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_toplevel</NAME>
<RETURNS>GtkWidget *   </RETURNS>
GtkWidget	*widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_ancestor</NAME>
<RETURNS>GtkWidget *   </RETURNS>
GtkWidget	*widget, GType		 widget_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_visual</NAME>
<RETURNS>GdkVisual *   </RETURNS>
GtkWidget	*widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_visual</NAME>
<RETURNS>void          </RETURNS>
GtkWidget	*widget, GdkVisual      *visual
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_screen</NAME>
<RETURNS>GdkScreen  *   </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_has_screen</NAME>
<RETURNS>gboolean       </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_scale_factor</NAME>
<RETURNS>gint           </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_display</NAME>
<RETURNS>GdkDisplay  *  </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_root_window</NAME>
<DEPRECATED/>
<RETURNS>GdkWindow  *   </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_settings</NAME>
<RETURNS>GtkSettings *  </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_clipboard</NAME>
<RETURNS>GtkClipboard  *</RETURNS>
GtkWidget *widget, GdkAtom    selection
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_hexpand</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_hexpand</NAME>
<RETURNS>void      </RETURNS>
GtkWidget      *widget, gboolean        expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_hexpand_set</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_hexpand_set</NAME>
<RETURNS>void      </RETURNS>
GtkWidget      *widget, gboolean        set
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_vexpand</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_vexpand</NAME>
<RETURNS>void      </RETURNS>
GtkWidget      *widget, gboolean        expand
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_vexpand_set</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_vexpand_set</NAME>
<RETURNS>void      </RETURNS>
GtkWidget      *widget, gboolean        set
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_queue_compute_expand</NAME>
<RETURNS>void      </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_compute_expand</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWidget      *widget, GtkOrientation  orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_support_multidevice</NAME>
<RETURNS>gboolean          </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_support_multidevice</NAME>
<RETURNS>void              </RETURNS>
GtkWidget      *widget, gboolean        support_multidevice
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_set_accessible_type</NAME>
<RETURNS>void              </RETURNS>
GtkWidgetClass     *widget_class, GType               type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_set_accessible_role</NAME>
<RETURNS>void              </RETURNS>
GtkWidgetClass     *widget_class, AtkRole             role
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_accessible</NAME>
<RETURNS>AtkObject *       </RETURNS>
GtkWidget          *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_halign</NAME>
<RETURNS>GtkAlign  </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_halign</NAME>
<RETURNS>void      </RETURNS>
GtkWidget *widget, GtkAlign   align
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_valign</NAME>
<RETURNS>GtkAlign  </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_valign_with_baseline</NAME>
<RETURNS>GtkAlign  </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_valign</NAME>
<RETURNS>void      </RETURNS>
GtkWidget *widget, GtkAlign   align
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_margin_left</NAME>
<DEPRECATED/>
<RETURNS>gint      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_margin_left</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWidget *widget, gint       margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_margin_right</NAME>
<DEPRECATED/>
<RETURNS>gint      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_margin_right</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWidget *widget, gint       margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_margin_start</NAME>
<RETURNS>gint      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_margin_start</NAME>
<RETURNS>void      </RETURNS>
GtkWidget *widget, gint       margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_margin_end</NAME>
<RETURNS>gint      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_margin_end</NAME>
<RETURNS>void      </RETURNS>
GtkWidget *widget, gint       margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_margin_top</NAME>
<RETURNS>gint      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_margin_top</NAME>
<RETURNS>void      </RETURNS>
GtkWidget *widget, gint       margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_margin_bottom</NAME>
<RETURNS>gint      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_margin_bottom</NAME>
<RETURNS>void      </RETURNS>
GtkWidget *widget, gint       margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_events</NAME>
<RETURNS>gint 	     </RETURNS>
GtkWidget	*widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_device_events</NAME>
<RETURNS>GdkEventMask  </RETURNS>
GtkWidget	*widget, GdkDevice    *device
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_pointer</NAME>
<DEPRECATED/>
<RETURNS>void 	     </RETURNS>
GtkWidget	*widget, gint		*x, gint		*y
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_ancestor</NAME>
<RETURNS>gboolean      </RETURNS>
GtkWidget	*widget, GtkWidget	*ancestor
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_translate_coordinates</NAME>
<RETURNS>gboolean      </RETURNS>
GtkWidget  *src_widget, GtkWidget  *dest_widget, gint        src_x, gint        src_y, gint       *dest_x, gint       *dest_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_hide_on_delete</NAME>
<RETURNS>gboolean      </RETURNS>
GtkWidget	*widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_override_color</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkWidget     *widget, GtkStateFlags  state, const GdkRGBA *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_override_background_color</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkWidget     *widget, GtkStateFlags  state, const GdkRGBA *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_override_font</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkWidget                  *widget, const PangoFontDescription *font_desc
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_override_symbolic_color</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkWidget     *widget, const gchar   *name, const GdkRGBA *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_override_cursor</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkWidget       *widget, const GdkRGBA   *cursor, const GdkRGBA   *secondary_cursor
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_reset_style</NAME>
<RETURNS>void        </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_create_pango_context</NAME>
<RETURNS>PangoContext  *</RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_pango_context</NAME>
<RETURNS>PangoContext  *</RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_font_options</NAME>
<RETURNS>void  </RETURNS>
GtkWidget                  *widget, const cairo_font_options_t *options
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_font_options</NAME>
<RETURNS>const cairo_font_options_t  *</RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_create_pango_layout</NAME>
<RETURNS>PangoLayout   *</RETURNS>
GtkWidget   *widget, const gchar *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_render_icon_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf     *</RETURNS>
GtkWidget   *widget, const gchar *stock_id, GtkIconSize  size
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_composite_name</NAME>
<DEPRECATED/>
<RETURNS>void    </RETURNS>
GtkWidget	*widget, const gchar   	*name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_composite_name</NAME>
<DEPRECATED/>
<RETURNS>gchar * </RETURNS>
GtkWidget	*widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_push_composite_child</NAME>
<DEPRECATED/>
<RETURNS>void 	     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_pop_composite_child</NAME>
<DEPRECATED/>
<RETURNS>void 	     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_install_style_property</NAME>
<RETURNS>void  </RETURNS>
GtkWidgetClass     *klass, GParamSpec         *pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_install_style_property_parser</NAME>
<RETURNS>void  </RETURNS>
GtkWidgetClass     *klass, GParamSpec         *pspec, GtkRcPropertyParser parser
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_find_style_property</NAME>
<RETURNS>GParamSpec *  </RETURNS>
GtkWidgetClass     *klass, const gchar        *property_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_list_style_properties</NAME>
<RETURNS>GParamSpec ** </RETURNS>
GtkWidgetClass     *klass, guint              *n_properties
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_style_get_property</NAME>
<RETURNS>void  </RETURNS>
GtkWidget	     *widget, const gchar    *property_name, GValue	     *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_style_get_valist</NAME>
<RETURNS>void  </RETURNS>
GtkWidget	     *widget, const gchar    *first_property_name, va_list         var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_style_get</NAME>
<RETURNS>void  </RETURNS>
GtkWidget	     *widget, const gchar    *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_direction</NAME>
<RETURNS>void              </RETURNS>
GtkWidget        *widget, GtkTextDirection  dir
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_direction</NAME>
<RETURNS>GtkTextDirection  </RETURNS>
GtkWidget        *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_default_direction</NAME>
<RETURNS>void              </RETURNS>
GtkTextDirection  dir
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_default_direction</NAME>
<RETURNS>GtkTextDirection  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_is_composited</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_shape_combine_region</NAME>
<RETURNS>void 	     </RETURNS>
GtkWidget *widget, cairo_region_t *region
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_input_shape_combine_region</NAME>
<RETURNS>void 	     </RETURNS>
GtkWidget *widget, cairo_region_t *region
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_list_mnemonic_labels</NAME>
<RETURNS>GList * </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_add_mnemonic_label</NAME>
<RETURNS>void    </RETURNS>
GtkWidget *widget, GtkWidget *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_remove_mnemonic_label</NAME>
<RETURNS>void    </RETURNS>
GtkWidget *widget, GtkWidget *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_tooltip_window</NAME>
<RETURNS>void                   </RETURNS>
GtkWidget   *widget, GtkWindow   *custom_window
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_tooltip_window</NAME>
<RETURNS>GtkWindow  *</RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_trigger_tooltip_query</NAME>
<RETURNS>void        </RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_tooltip_text</NAME>
<RETURNS>void        </RETURNS>
GtkWidget   *widget, const gchar *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_tooltip_text</NAME>
<RETURNS>gchar  *    </RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_tooltip_markup</NAME>
<RETURNS>void        </RETURNS>
GtkWidget   *widget, const gchar *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_tooltip_markup</NAME>
<RETURNS>gchar  *    </RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_has_tooltip</NAME>
<RETURNS>void        </RETURNS>
GtkWidget   *widget, gboolean     has_tooltip
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_has_tooltip</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_cairo_should_draw_window</NAME>
<RETURNS>gboolean    </RETURNS>
cairo_t     *cr, GdkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_cairo_transform_to_window</NAME>
<RETURNS>void        </RETURNS>
cairo_t     *cr, GtkWidget   *widget, GdkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_requisition_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_requisition_new</NAME>
<RETURNS>GtkRequisition  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_requisition_copy</NAME>
<RETURNS>GtkRequisition  *</RETURNS>
const GtkRequisition *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_requisition_free</NAME>
<RETURNS>void             </RETURNS>
GtkRequisition       *requisition
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_in_destruction</NAME>
<RETURNS>gboolean      </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_style_context</NAME>
<RETURNS>GtkStyleContext  * </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_path</NAME>
<RETURNS>GtkWidgetPath  *   </RETURNS>
GtkWidget *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_set_css_name</NAME>
<RETURNS>void               </RETURNS>
GtkWidgetClass *widget_class, const char     *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_get_css_name</NAME>
<RETURNS>const char  *      </RETURNS>
GtkWidgetClass *widget_class
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_modifier_mask</NAME>
<RETURNS>GdkModifierType    </RETURNS>
GtkWidget         *widget, GdkModifierIntent  intent
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_insert_action_group</NAME>
<RETURNS>void                     </RETURNS>
GtkWidget    *widget, const gchar  *name, GActionGroup *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_add_tick_callback</NAME>
<RETURNS>guint  </RETURNS>
GtkWidget       *widget, GtkTickCallback  callback, gpointer         user_data, GDestroyNotify   notify
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_remove_tick_callback</NAME>
<RETURNS>void  </RETURNS>
GtkWidget       *widget, guint            id
</FUNCTION>
<MACRO>
<NAME>gtk_widget_class_bind_template_callback</NAME>
#define gtk_widget_class_bind_template_callback(widget_class, callback) \
  gtk_widget_class_bind_template_callback_full (GTK_WIDGET_CLASS (widget_class), \
                                                #callback, \
                                                G_CALLBACK (callback))
</MACRO>
<MACRO>
<NAME>gtk_widget_class_bind_template_child</NAME>
#define gtk_widget_class_bind_template_child(widget_class, TypeName, member_name) \
  gtk_widget_class_bind_template_child_full (widget_class, \
                                             #member_name, \
                                             FALSE, \
                                             G_STRUCT_OFFSET (TypeName, member_name))
</MACRO>
<MACRO>
<NAME>gtk_widget_class_bind_template_child_internal</NAME>
#define gtk_widget_class_bind_template_child_internal(widget_class, TypeName, member_name) \
  gtk_widget_class_bind_template_child_full (widget_class, \
                                             #member_name, \
                                             TRUE, \
                                             G_STRUCT_OFFSET (TypeName, member_name))
</MACRO>
<MACRO>
<NAME>gtk_widget_class_bind_template_child_private</NAME>
#define gtk_widget_class_bind_template_child_private(widget_class, TypeName, member_name) \
  gtk_widget_class_bind_template_child_full (widget_class, \
                                             #member_name, \
                                             FALSE, \
                                             G_PRIVATE_OFFSET (TypeName, member_name))
</MACRO>
<MACRO>
<NAME>gtk_widget_class_bind_template_child_internal_private</NAME>
#define gtk_widget_class_bind_template_child_internal_private(widget_class, TypeName, member_name) \
  gtk_widget_class_bind_template_child_full (widget_class, \
                                             #member_name, \
                                             TRUE, \
                                             G_PRIVATE_OFFSET (TypeName, member_name))
</MACRO>
<FUNCTION>
<NAME>gtk_widget_init_template</NAME>
<RETURNS>void     </RETURNS>
GtkWidget             *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_template_child</NAME>
<RETURNS>GObject  *</RETURNS>
GtkWidget             *widget, GType                  widget_type, const gchar           *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_set_template</NAME>
<RETURNS>void     </RETURNS>
GtkWidgetClass        *widget_class, GBytes                *template_bytes
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_set_template_from_resource</NAME>
<RETURNS>void     </RETURNS>
GtkWidgetClass        *widget_class, const gchar           *resource_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_bind_template_callback_full</NAME>
<RETURNS>void     </RETURNS>
GtkWidgetClass        *widget_class, const gchar           *callback_name, GCallback              callback_symbol
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_set_connect_func</NAME>
<RETURNS>void     </RETURNS>
GtkWidgetClass        *widget_class, GtkBuilderConnectFunc  connect_func, gpointer               connect_data, GDestroyNotify         connect_data_destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_bind_template_child_full</NAME>
<RETURNS>void     </RETURNS>
GtkWidgetClass        *widget_class, const gchar           *name, gboolean               internal_child, gssize                 struct_offset
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_action_group</NAME>
<RETURNS>GActionGroup            *</RETURNS>
GtkWidget             *widget, const gchar           *prefix
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_list_action_prefixes</NAME>
<RETURNS>const gchar  **          </RETURNS>
GtkWidget             *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_font_map</NAME>
<RETURNS>void                     </RETURNS>
GtkWidget             *widget, PangoFontMap          *font_map
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_font_map</NAME>
<RETURNS>PangoFontMap  *          </RETURNS>
GtkWidget             *widget
</FUNCTION>
<STRUCT>
<NAME>GtkWidgetClassPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkWidgetPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_WIDGET_PATH</NAME>
#define GTK_TYPE_WIDGET_PATH (gtk_widget_path_get_type ())
</MACRO>
<FUNCTION>
<NAME>gtk_widget_path_get_type</NAME>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_new</NAME>
<RETURNS>GtkWidgetPath  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_copy</NAME>
<RETURNS>GtkWidgetPath  * </RETURNS>
const GtkWidgetPath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_ref</NAME>
<RETURNS>GtkWidgetPath  * </RETURNS>
GtkWidgetPath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_unref</NAME>
<RETURNS>void             </RETURNS>
GtkWidgetPath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_free</NAME>
<RETURNS>void             </RETURNS>
GtkWidgetPath       *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_to_string</NAME>
<RETURNS>char  *          </RETURNS>
const GtkWidgetPath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_length</NAME>
<RETURNS>gint             </RETURNS>
const GtkWidgetPath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_append_type</NAME>
<RETURNS>gint             </RETURNS>
GtkWidgetPath       *path, GType                type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_prepend_type</NAME>
<RETURNS>void             </RETURNS>
GtkWidgetPath       *path, GType                type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_append_with_siblings</NAME>
<RETURNS>gint             </RETURNS>
GtkWidgetPath       *path, GtkWidgetPath       *siblings, guint                sibling_index
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_append_for_widget</NAME>
<RETURNS>gint             </RETURNS>
GtkWidgetPath       *path, GtkWidget           *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_get_object_type</NAME>
<RETURNS>GType                </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_set_object_type</NAME>
<RETURNS>void                 </RETURNS>
GtkWidgetPath       *path, gint                 pos, GType                type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_get_object_name</NAME>
<RETURNS>const char  *        </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_set_object_name</NAME>
<RETURNS>void                 </RETURNS>
GtkWidgetPath       *path, gint                 pos, const char          *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_get_siblings</NAME>
<RETURNS>const GtkWidgetPath  *</RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_get_sibling_index</NAME>
<RETURNS>guint                </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_get_name</NAME>
<RETURNS>const gchar  *          </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_set_name</NAME>
<RETURNS>void                    </RETURNS>
GtkWidgetPath       *path, gint                 pos, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_has_name</NAME>
<RETURNS>gboolean                </RETURNS>
const GtkWidgetPath *path, gint                 pos, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_has_qname</NAME>
<RETURNS>gboolean                </RETURNS>
const GtkWidgetPath *path, gint                 pos, GQuark               qname
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_get_state</NAME>
<RETURNS>GtkStateFlags           </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_set_state</NAME>
<RETURNS>void                    </RETURNS>
GtkWidgetPath       *path, gint                 pos, GtkStateFlags        state
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_add_class</NAME>
<RETURNS>void      </RETURNS>
GtkWidgetPath       *path, gint                 pos, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_remove_class</NAME>
<RETURNS>void      </RETURNS>
GtkWidgetPath       *path, gint                 pos, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_clear_classes</NAME>
<RETURNS>void      </RETURNS>
GtkWidgetPath       *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_list_classes</NAME>
<RETURNS>GSList  * </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_has_class</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkWidgetPath *path, gint                 pos, const gchar         *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_has_qclass</NAME>
<RETURNS>gboolean  </RETURNS>
const GtkWidgetPath *path, gint                 pos, GQuark               qname
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_add_region</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWidgetPath      *path, gint                pos, const gchar        *name, GtkRegionFlags     flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_remove_region</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWidgetPath      *path, gint                pos, const gchar        *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_clear_regions</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWidgetPath      *path, gint                pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_list_regions</NAME>
<DEPRECATED/>
<RETURNS>GSList  * </RETURNS>
const GtkWidgetPath *path, gint                 pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_has_region</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
const GtkWidgetPath *path, gint                 pos, const gchar         *name, GtkRegionFlags      *flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_has_qregion</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
const GtkWidgetPath *path, gint                 pos, GQuark               qname, GtkRegionFlags      *flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_get_object_type</NAME>
<RETURNS>GType            </RETURNS>
const GtkWidgetPath *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_is_type</NAME>
<RETURNS>gboolean         </RETURNS>
const GtkWidgetPath *path, GType                type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_has_parent</NAME>
<RETURNS>gboolean         </RETURNS>
const GtkWidgetPath *path, GType                type
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path_iter_add_qclass</NAME>
<RETURNS>void  </RETURNS>
GtkWidgetPath *path, gint           pos, GQuark         qname
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_draw_theme_background</NAME>
<RETURNS>void                     </RETURNS>
cairo_t        *cr, const char     *class_name, int             part, int             state, int             width, int             height
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_theme_part_size</NAME>
<RETURNS>void                     </RETURNS>
const char     *class_name, int             part, int             state, int            *width, int            *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_theme_margins</NAME>
<RETURNS>void                     </RETURNS>
const char     *class_name, int             part, int             state, GtkBorder      *out_margins
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_sys_metric_name_for_id</NAME>
<RETURNS>const char  *            </RETURNS>
gint            id
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_sys_metric_id_for_name</NAME>
<RETURNS>int                      </RETURNS>
const char     *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_sys_metric</NAME>
<RETURNS>int                      </RETURNS>
gint            id
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_sys_color_name_for_id</NAME>
<RETURNS>const char  *            </RETURNS>
gint            id
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_sys_color_id_for_name</NAME>
<RETURNS>int                      </RETURNS>
const char     *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_win32_get_sys_color</NAME>
<RETURNS>void                     </RETURNS>
gint            id, GdkRGBA        *color
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_WINDOW</NAME>
#define GTK_TYPE_WINDOW			(gtk_window_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_WINDOW</NAME>
#define GTK_WINDOW(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_WINDOW, GtkWindow))
</MACRO>
<MACRO>
<NAME>GTK_WINDOW_CLASS</NAME>
#define GTK_WINDOW_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_WINDOW, GtkWindowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_WINDOW</NAME>
#define GTK_IS_WINDOW(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_IS_WINDOW_CLASS</NAME>
#define GTK_IS_WINDOW_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WINDOW))
</MACRO>
<MACRO>
<NAME>GTK_WINDOW_GET_CLASS</NAME>
#define GTK_WINDOW_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_WINDOW, GtkWindowClass))
</MACRO>
<STRUCT>
<NAME>GtkWindow</NAME>
struct _GtkWindow
{
  GtkBin bin;

  GtkWindowPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkWindowClass</NAME>
struct _GtkWindowClass
{
  GtkBinClass parent_class;

  /*< public >*/

  void     (* set_focus)   (GtkWindow *window,
                            GtkWidget *focus);

  /* G_SIGNAL_ACTION signals for keybindings */

  void     (* activate_focus)   (GtkWindow *window);
  void     (* activate_default) (GtkWindow *window);
  void	   (* keys_changed)     (GtkWindow *window);
  gboolean (* enable_debugging) (GtkWindow *window,
                                 gboolean   toggle);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkWindowType</NAME>
typedef enum
{
  GTK_WINDOW_TOPLEVEL,
  GTK_WINDOW_POPUP
} GtkWindowType;
</ENUM>
<ENUM>
<NAME>GtkWindowPosition</NAME>
typedef enum
{
  GTK_WIN_POS_NONE,
  GTK_WIN_POS_CENTER,
  GTK_WIN_POS_MOUSE,
  GTK_WIN_POS_CENTER_ALWAYS,
  GTK_WIN_POS_CENTER_ON_PARENT
} GtkWindowPosition;
</ENUM>
<FUNCTION>
<NAME>gtk_window_get_type</NAME>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_new</NAME>
<RETURNS>GtkWidget * </RETURNS>
GtkWindowType        type
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_title</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, const gchar         *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_title</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_wmclass</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWindow           *window, const gchar         *wmclass_name, const gchar         *wmclass_class
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_role</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, const gchar         *role
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_startup_id</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, const gchar         *startup_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_role</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_add_accel_group</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkAccelGroup	    *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_remove_accel_group</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkAccelGroup	    *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_position</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkWindowPosition    position
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_activate_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_focus</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkWidget           *focus
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_focus</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkWidget           *default_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_default_widget</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_activate_default</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_transient_for</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkWindow           *parent
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_transient_for</NAME>
<RETURNS>GtkWindow  *</RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_attached_to</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkWidget           *attach_widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_attached_to</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_opacity</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gdouble              opacity
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_opacity</NAME>
<DEPRECATED/>
<RETURNS>gdouble     </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_type_hint</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GdkWindowTypeHint    hint
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_type_hint</NAME>
<RETURNS>GdkWindowTypeHint  </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_skip_taskbar_hint</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_skip_taskbar_hint</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_skip_pager_hint</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_skip_pager_hint</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_urgency_hint</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_urgency_hint</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_accept_focus</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_accept_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_focus_on_map</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_focus_on_map</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_destroy_with_parent</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_destroy_with_parent</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_hide_titlebar_when_maximized</NAME>
<RETURNS>void        </RETURNS>
GtkWindow   *window, gboolean     setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_hide_titlebar_when_maximized</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_mnemonics_visible</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_mnemonics_visible</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_focus_visible</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_focus_visible</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_resizable</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, gboolean             resizable
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_resizable</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_gravity</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GdkGravity           gravity
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_gravity</NAME>
<RETURNS>GdkGravity  </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_geometry_hints</NAME>
<RETURNS>void        </RETURNS>
GtkWindow           *window, GtkWidget           *geometry_widget, GdkGeometry         *geometry, GdkWindowHints       geom_mask
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_screen</NAME>
<RETURNS>void 	   </RETURNS>
GtkWindow	    *window, GdkScreen	    *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_screen</NAME>
<RETURNS>GdkScreen * </RETURNS>
GtkWindow	    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_is_active</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_has_toplevel_focus</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow           *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_decorated</NAME>
<RETURNS>void        </RETURNS>
GtkWindow *window, gboolean   setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_decorated</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_deletable</NAME>
<RETURNS>void        </RETURNS>
GtkWindow *window, gboolean   setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_deletable</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_icon_list</NAME>
<RETURNS>void        </RETURNS>
GtkWindow  *window, GList      *list
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_icon_list</NAME>
<RETURNS>GList *     </RETURNS>
GtkWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_icon</NAME>
<RETURNS>void        </RETURNS>
GtkWindow  *window, GdkPixbuf  *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_icon_name</NAME>
<RETURNS>void        </RETURNS>
GtkWindow   *window, const gchar *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_icon_from_file</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow   *window, const gchar *filename, GError     **err
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_icon</NAME>
<RETURNS>GdkPixbuf * </RETURNS>
GtkWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_icon_name</NAME>
<RETURNS>const gchar  * </RETURNS>
GtkWindow  *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default_icon_list</NAME>
<RETURNS>void        </RETURNS>
GList      *list
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_default_icon_list</NAME>
<RETURNS>GList *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default_icon</NAME>
<RETURNS>void        </RETURNS>
GdkPixbuf  *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default_icon_name</NAME>
<RETURNS>void        </RETURNS>
const gchar *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_default_icon_name</NAME>
<RETURNS>const gchar  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default_icon_from_file</NAME>
<RETURNS>gboolean    </RETURNS>
const gchar *filename, GError     **err
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_auto_startup_notification</NAME>
<RETURNS>void        </RETURNS>
gboolean setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_modal</NAME>
<RETURNS>void        </RETURNS>
GtkWindow *window, gboolean   modal
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_modal</NAME>
<RETURNS>gboolean    </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_list_toplevels</NAME>
<RETURNS>GList *     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_has_user_ref_count</NAME>
<RETURNS>void        </RETURNS>
GtkWindow *window, gboolean   setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_add_mnemonic</NAME>
<RETURNS>void      </RETURNS>
GtkWindow       *window, guint            keyval, GtkWidget       *target
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_remove_mnemonic</NAME>
<RETURNS>void      </RETURNS>
GtkWindow       *window, guint            keyval, GtkWidget       *target
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_mnemonic_activate</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWindow       *window, guint            keyval, GdkModifierType  modifier
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_mnemonic_modifier</NAME>
<RETURNS>void      </RETURNS>
GtkWindow       *window, GdkModifierType  modifier
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_mnemonic_modifier</NAME>
<RETURNS>GdkModifierType  </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_activate_key</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWindow        *window, GdkEventKey      *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_propagate_key_event</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWindow        *window, GdkEventKey      *event
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_present</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_present_with_time</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window, guint32    timestamp
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_iconify</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_deiconify</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_stick</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_unstick</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_maximize</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_unmaximize</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_fullscreen</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_unfullscreen</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_fullscreen_on_monitor</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window, GdkScreen *screen, gint monitor
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_close</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_keep_above</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window, gboolean setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_keep_below</NAME>
<RETURNS>void      </RETURNS>
GtkWindow *window, gboolean setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_begin_resize_drag</NAME>
<RETURNS>void  </RETURNS>
GtkWindow     *window, GdkWindowEdge  edge, gint           button, gint           root_x, gint           root_y, guint32        timestamp
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_begin_move_drag</NAME>
<RETURNS>void  </RETURNS>
GtkWindow     *window, gint           button, gint           root_x, gint           root_y, guint32        timestamp
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default_size</NAME>
<RETURNS>void      </RETURNS>
GtkWindow   *window, gint         width, gint         height
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_default_size</NAME>
<RETURNS>void      </RETURNS>
GtkWindow   *window, gint        *width, gint        *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_resize</NAME>
<RETURNS>void      </RETURNS>
GtkWindow   *window, gint         width, gint         height
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_size</NAME>
<RETURNS>void      </RETURNS>
GtkWindow   *window, gint        *width, gint        *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_move</NAME>
<RETURNS>void      </RETURNS>
GtkWindow   *window, gint         x, gint         y
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_position</NAME>
<RETURNS>void      </RETURNS>
GtkWindow   *window, gint        *root_x, gint        *root_y
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_parse_geometry</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkWindow   *window, const gchar *geometry
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_default_geometry</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkWindow *window, gint       width, gint       height
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_resize_to_geometry</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkWindow *window, gint       width, gint       height
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_group</NAME>
<RETURNS>GtkWindowGroup  *</RETURNS>
GtkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_has_group</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWindow   *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_reshow_with_initial_size</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWindow *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_window_type</NAME>
<RETURNS>GtkWindowType  </RETURNS>
GtkWindow     *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_application</NAME>
<RETURNS>GtkApplication  *</RETURNS>
GtkWindow          *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_application</NAME>
<RETURNS>void             </RETURNS>
GtkWindow          *window, GtkApplication     *application
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_has_resize_grip</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkWindow    *window, gboolean      value
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_has_resize_grip</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_resize_grip_is_visible</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_resize_grip_area</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkWindow    *window, GdkRectangle *rect
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_titlebar</NAME>
<RETURNS>void      </RETURNS>
GtkWindow    *window, GtkWidget    *titlebar
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_get_titlebar</NAME>
<RETURNS>GtkWidget  *</RETURNS>
GtkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_is_maximized</NAME>
<RETURNS>gboolean  </RETURNS>
GtkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_set_interactive_debugging</NAME>
<RETURNS>void      </RETURNS>
gboolean enable
</FUNCTION>
<STRUCT>
<NAME>GtkWindowGeometryInfo</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkWindowGroup</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkWindowGroupClass</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkWindowGroupPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkWindowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_WINDOW_GROUP</NAME>
#define GTK_TYPE_WINDOW_GROUP             (gtk_window_group_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_WINDOW_GROUP</NAME>
#define GTK_WINDOW_GROUP(object)          (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_WINDOW_GROUP, GtkWindowGroup))
</MACRO>
<MACRO>
<NAME>GTK_WINDOW_GROUP_CLASS</NAME>
#define GTK_WINDOW_GROUP_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_WINDOW_GROUP, GtkWindowGroupClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_WINDOW_GROUP</NAME>
#define GTK_IS_WINDOW_GROUP(object)       (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_WINDOW_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_IS_WINDOW_GROUP_CLASS</NAME>
#define GTK_IS_WINDOW_GROUP_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_WINDOW_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_WINDOW_GROUP_GET_CLASS</NAME>
#define GTK_WINDOW_GROUP_GET_CLASS(obj)   (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_WINDOW_GROUP, GtkWindowGroupClass))
</MACRO>
<STRUCT>
<NAME>GtkWindowGroup</NAME>
struct _GtkWindowGroup
{
  GObject parent_instance;

  GtkWindowGroupPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkWindowGroupClass</NAME>
struct _GtkWindowGroupClass
{
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_window_group_get_type</NAME>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_group_new</NAME>
<RETURNS>GtkWindowGroup  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_group_add_window</NAME>
<RETURNS>void              </RETURNS>
GtkWindowGroup     *window_group, GtkWindow          *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_group_remove_window</NAME>
<RETURNS>void              </RETURNS>
GtkWindowGroup     *window_group, GtkWindow          *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_group_list_windows</NAME>
<RETURNS>GList  *          </RETURNS>
GtkWindowGroup     *window_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_group_get_current_grab</NAME>
<RETURNS>GtkWidget  *      </RETURNS>
GtkWindowGroup *window_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_window_group_get_current_device_grab</NAME>
<RETURNS>GtkWidget  *      </RETURNS>
GtkWindowGroup *window_group, GdkDevice      *device
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_ACTION</NAME>
#define GTK_TYPE_ACTION            (gtk_action_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACTION</NAME>
#define GTK_ACTION(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ACTION, GtkAction))
</MACRO>
<MACRO>
<NAME>GTK_ACTION_CLASS</NAME>
#define GTK_ACTION_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ACTION, GtkActionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTION</NAME>
#define GTK_IS_ACTION(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTION_CLASS</NAME>
#define GTK_IS_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_ACTION_GET_CLASS</NAME>
#define GTK_ACTION_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_ACTION, GtkActionClass))
</MACRO>
<STRUCT>
<NAME>GtkAction</NAME>
struct _GtkAction
{
  GObject object;

  /*< private >*/
  GtkActionPrivate *private_data;
};
</STRUCT>
<STRUCT>
<NAME>GtkActionClass</NAME>
struct _GtkActionClass
{
  GObjectClass parent_class;

  /*< public >*/

  /* activation signal */
  void       (* activate)           (GtkAction    *action);

  /*< private >*/

  GType      menu_item_type;
  GType      toolbar_item_type;

  /* widget creation routines (not signals) */
  GtkWidget *(* create_menu_item)   (GtkAction *action);
  GtkWidget *(* create_tool_item)   (GtkAction *action);
  void       (* connect_proxy)      (GtkAction *action,
				     GtkWidget *proxy);
  void       (* disconnect_proxy)   (GtkAction *action,
				     GtkWidget *proxy);

  GtkWidget *(* create_menu)        (GtkAction *action);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_action_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_new</NAME>
<DEPRECATED/>
<RETURNS>GtkAction    *</RETURNS>
const gchar *name, const gchar *label, const gchar *tooltip, const gchar *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar * </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_is_sensitive</NAME>
<DEPRECATED/>
<RETURNS>gboolean      </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_sensitive</NAME>
<DEPRECATED/>
<RETURNS>gboolean      </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_sensitive</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action, gboolean       sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_is_visible</NAME>
<DEPRECATED/>
<RETURNS>gboolean      </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_visible</NAME>
<DEPRECATED/>
<RETURNS>gboolean      </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_visible</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action, gboolean       visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_activate</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_create_icon</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkAction     *action, GtkIconSize    icon_size
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_create_menu_item</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_create_tool_item</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_create_menu</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_proxies</NAME>
<DEPRECATED/>
<RETURNS>GSList  *     </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_connect_accelerator</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_disconnect_accelerator</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_accel_path</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *</RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_accel_closure</NAME>
<DEPRECATED/>
<RETURNS>GClosure     *</RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_block_activate</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_unblock_activate</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_accel_path</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action, const gchar   *accel_path
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_accel_group</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkAction     *action, GtkAccelGroup *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_label</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, const gchar *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_label</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_short_label</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, const gchar *short_label
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_short_label</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_tooltip</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, const gchar *tooltip
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_tooltip</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_stock_id</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, const gchar *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_stock_id</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_gicon</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, GIcon       *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_gicon</NAME>
<DEPRECATED/>
<RETURNS>GIcon                 *</RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_icon_name</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, const gchar *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_icon_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_visible_horizontal</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, gboolean     visible_horizontal
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_visible_horizontal</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_visible_vertical</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, gboolean     visible_vertical
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_visible_vertical</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_is_important</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, gboolean     is_important
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_is_important</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkAction   *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_set_always_show_image</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkAction   *action, gboolean     always_show
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_get_always_show_image</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkAction   *action
</FUNCTION>
<STRUCT>
<NAME>GtkActionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACTION_GROUP</NAME>
#define GTK_TYPE_ACTION_GROUP              (gtk_action_group_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACTION_GROUP</NAME>
#define GTK_ACTION_GROUP(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ACTION_GROUP, GtkActionGroup))
</MACRO>
<MACRO>
<NAME>GTK_ACTION_GROUP_CLASS</NAME>
#define GTK_ACTION_GROUP_CLASS(vtable)     (G_TYPE_CHECK_CLASS_CAST ((vtable), GTK_TYPE_ACTION_GROUP, GtkActionGroupClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTION_GROUP</NAME>
#define GTK_IS_ACTION_GROUP(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ACTION_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTION_GROUP_CLASS</NAME>
#define GTK_IS_ACTION_GROUP_CLASS(vtable)  (G_TYPE_CHECK_CLASS_TYPE ((vtable), GTK_TYPE_ACTION_GROUP))
</MACRO>
<MACRO>
<NAME>GTK_ACTION_GROUP_GET_CLASS</NAME>
#define GTK_ACTION_GROUP_GET_CLASS(inst)   (G_TYPE_INSTANCE_GET_CLASS ((inst), GTK_TYPE_ACTION_GROUP, GtkActionGroupClass))
</MACRO>
<STRUCT>
<NAME>GtkActionGroup</NAME>
struct _GtkActionGroup
{
  GObject parent;

  /*< private >*/
  GtkActionGroupPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkActionGroupClass</NAME>
struct _GtkActionGroupClass
{
  GObjectClass parent_class;

  GtkAction *(* get_action) (GtkActionGroup *action_group,
                             const gchar    *action_name);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GtkActionEntry</NAME>
struct _GtkActionEntry 
{
  const gchar     *name;
  const gchar     *stock_id;
  const gchar     *label;
  const gchar     *accelerator;
  const gchar     *tooltip;
  GCallback  callback;
};
</STRUCT>
<STRUCT>
<NAME>GtkToggleActionEntry</NAME>
struct _GtkToggleActionEntry 
{
  const gchar     *name;
  const gchar     *stock_id;
  const gchar     *label;
  const gchar     *accelerator;
  const gchar     *tooltip;
  GCallback  callback;
  gboolean   is_active;
};
</STRUCT>
<STRUCT>
<NAME>GtkRadioActionEntry</NAME>
struct _GtkRadioActionEntry 
{
  const gchar *name;
  const gchar *stock_id;
  const gchar *label;
  const gchar *accelerator;
  const gchar *tooltip;
  gint   value; 
};
</STRUCT>
<FUNCTION>
<NAME>gtk_action_group_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_new</NAME>
<DEPRECATED/>
<RETURNS>GtkActionGroup  *</RETURNS>
const gchar                *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_get_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar     *</RETURNS>
GtkActionGroup             *action_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_get_sensitive</NAME>
<DEPRECATED/>
<RETURNS>gboolean         </RETURNS>
GtkActionGroup             *action_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_set_sensitive</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, gboolean                    sensitive
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_get_visible</NAME>
<DEPRECATED/>
<RETURNS>gboolean         </RETURNS>
GtkActionGroup             *action_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_set_visible</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, gboolean                    visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_get_accel_group</NAME>
<DEPRECATED/>
<RETURNS>GtkAccelGroup   *</RETURNS>
GtkActionGroup             *action_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_set_accel_group</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, GtkAccelGroup              *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_get_action</NAME>
<DEPRECATED/>
<RETURNS>GtkAction       *</RETURNS>
GtkActionGroup             *action_group, const gchar                *action_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_list_actions</NAME>
<DEPRECATED/>
<RETURNS>GList           *</RETURNS>
GtkActionGroup             *action_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_action</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, GtkAction                  *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_action_with_accel</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, GtkAction                  *action, const gchar                *accelerator
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_remove_action</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, GtkAction                  *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_actions</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const GtkActionEntry       *entries, guint                       n_entries, gpointer                    user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_toggle_actions</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const GtkToggleActionEntry *entries, guint                       n_entries, gpointer                    user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_radio_actions</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const GtkRadioActionEntry  *entries, guint                       n_entries, gint                        value, GCallback                   on_change, gpointer                    user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_actions_full</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const GtkActionEntry       *entries, guint                       n_entries, gpointer                    user_data, GDestroyNotify              destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_toggle_actions_full</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const GtkToggleActionEntry *entries, guint                       n_entries, gpointer                    user_data, GDestroyNotify              destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_add_radio_actions_full</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const GtkRadioActionEntry  *entries, guint                       n_entries, gint                        value, GCallback                   on_change, gpointer                    user_data, GDestroyNotify              destroy
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_set_translate_func</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, GtkTranslateFunc            func, gpointer                    data, GDestroyNotify              notify
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_set_translation_domain</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkActionGroup             *action_group, const gchar                *domain
</FUNCTION>
<FUNCTION>
<NAME>gtk_action_group_translate_string</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *   </RETURNS>
GtkActionGroup             *action_group, const gchar                *string
</FUNCTION>
<STRUCT>
<NAME>GtkActionGroupPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ACTIVATABLE</NAME>
#define GTK_TYPE_ACTIVATABLE            (gtk_activatable_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ACTIVATABLE</NAME>
#define GTK_ACTIVATABLE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ACTIVATABLE, GtkActivatable))
</MACRO>
<MACRO>
<NAME>GTK_ACTIVATABLE_CLASS</NAME>
#define GTK_ACTIVATABLE_CLASS(obj)      (G_TYPE_CHECK_CLASS_CAST ((obj), GTK_TYPE_ACTIVATABLE, GtkActivatableIface))
</MACRO>
<MACRO>
<NAME>GTK_IS_ACTIVATABLE</NAME>
#define GTK_IS_ACTIVATABLE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ACTIVATABLE))
</MACRO>
<MACRO>
<NAME>GTK_ACTIVATABLE_GET_IFACE</NAME>
#define GTK_ACTIVATABLE_GET_IFACE(obj)  (G_TYPE_INSTANCE_GET_INTERFACE ((obj), GTK_TYPE_ACTIVATABLE, GtkActivatableIface))
</MACRO>
<STRUCT>
<NAME>GtkActivatableIface</NAME>
struct _GtkActivatableIface
{
  /*< private >*/
  GTypeInterface g_iface;

  /*< public >*/

  /* virtual table */
  void   (* update)                   (GtkActivatable *activatable,
		                       GtkAction      *action,
		                       const gchar    *property_name);
  void   (* sync_action_properties)   (GtkActivatable *activatable,
		                       GtkAction      *action);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_activatable_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_activatable_sync_action_properties</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkActivatable *activatable, GtkAction      *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_activatable_set_related_action</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkActivatable *activatable, GtkAction      *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_activatable_get_related_action</NAME>
<DEPRECATED/>
<RETURNS>GtkAction  *</RETURNS>
GtkActivatable *activatable
</FUNCTION>
<FUNCTION>
<NAME>gtk_activatable_set_use_action_appearance</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkActivatable *activatable, gboolean        use_appearance
</FUNCTION>
<FUNCTION>
<NAME>gtk_activatable_get_use_action_appearance</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkActivatable *activatable
</FUNCTION>
<FUNCTION>
<NAME>gtk_activatable_do_set_related_action</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkActivatable *activatable, GtkAction      *action
</FUNCTION>
<STRUCT>
<NAME>GtkActivatable</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ALIGNMENT</NAME>
#define GTK_TYPE_ALIGNMENT                  (gtk_alignment_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ALIGNMENT</NAME>
#define GTK_ALIGNMENT(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ALIGNMENT, GtkAlignment))
</MACRO>
<MACRO>
<NAME>GTK_ALIGNMENT_CLASS</NAME>
#define GTK_ALIGNMENT_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ALIGNMENT, GtkAlignmentClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ALIGNMENT</NAME>
#define GTK_IS_ALIGNMENT(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ALIGNMENT))
</MACRO>
<MACRO>
<NAME>GTK_IS_ALIGNMENT_CLASS</NAME>
#define GTK_IS_ALIGNMENT_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ALIGNMENT))
</MACRO>
<MACRO>
<NAME>GTK_ALIGNMENT_GET_CLASS</NAME>
#define GTK_ALIGNMENT_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ALIGNMENT, GtkAlignmentClass))
</MACRO>
<STRUCT>
<NAME>GtkAlignment</NAME>
struct _GtkAlignment
{
  GtkBin bin;

  /*< private >*/
  GtkAlignmentPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkAlignmentClass</NAME>
struct _GtkAlignmentClass
{
  GtkBinClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_alignment_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_alignment_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
gfloat             xalign, gfloat             yalign, gfloat             xscale, gfloat             yscale
</FUNCTION>
<FUNCTION>
<NAME>gtk_alignment_set</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkAlignment      *alignment, gfloat             xalign, gfloat             yalign, gfloat             xscale, gfloat             yscale
</FUNCTION>
<FUNCTION>
<NAME>gtk_alignment_set_padding</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkAlignment      *alignment, guint              padding_top, guint              padding_bottom, guint              padding_left, guint              padding_right
</FUNCTION>
<FUNCTION>
<NAME>gtk_alignment_get_padding</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkAlignment      *alignment, guint             *padding_top, guint             *padding_bottom, guint             *padding_left, guint             *padding_right
</FUNCTION>
<STRUCT>
<NAME>GtkAlignmentPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ARROW</NAME>
#define GTK_TYPE_ARROW                  (gtk_arrow_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ARROW</NAME>
#define GTK_ARROW(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ARROW, GtkArrow))
</MACRO>
<MACRO>
<NAME>GTK_ARROW_CLASS</NAME>
#define GTK_ARROW_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ARROW, GtkArrowClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ARROW</NAME>
#define GTK_IS_ARROW(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ARROW))
</MACRO>
<MACRO>
<NAME>GTK_IS_ARROW_CLASS</NAME>
#define GTK_IS_ARROW_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ARROW))
</MACRO>
<MACRO>
<NAME>GTK_ARROW_GET_CLASS</NAME>
#define GTK_ARROW_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ARROW, GtkArrowClass))
</MACRO>
<STRUCT>
<NAME>GtkArrow</NAME>
struct _GtkArrow
{
  GtkMisc misc;

  /*< private >*/
  GtkArrowPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkArrowClass</NAME>
struct _GtkArrowClass
{
  GtkMiscClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_arrow_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_arrow_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkArrowType   arrow_type, GtkShadowType  shadow_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_arrow_set</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkArrow      *arrow, GtkArrowType   arrow_type, GtkShadowType  shadow_type
</FUNCTION>
<STRUCT>
<NAME>GtkArrowPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_COLOR_SELECTION</NAME>
#define GTK_TYPE_COLOR_SELECTION			(gtk_color_selection_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COLOR_SELECTION</NAME>
#define GTK_COLOR_SELECTION(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelection))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_SELECTION_CLASS</NAME>
#define GTK_COLOR_SELECTION_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_SELECTION, GtkColorSelectionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_SELECTION</NAME>
#define GTK_IS_COLOR_SELECTION(obj)			(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COLOR_SELECTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_SELECTION_CLASS</NAME>
#define GTK_IS_COLOR_SELECTION_CLASS(klass)		(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_SELECTION))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_SELECTION_GET_CLASS</NAME>
#define GTK_COLOR_SELECTION_GET_CLASS(obj)              (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_COLOR_SELECTION, GtkColorSelectionClass))
</MACRO>
<USER_FUNCTION>
<NAME>GtkColorSelectionChangePaletteFunc</NAME>
<RETURNS>void </RETURNS>
const GdkColor    *colors,
                                                     gint               n_colors
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>GtkColorSelectionChangePaletteWithScreenFunc</NAME>
<RETURNS>void </RETURNS>
GdkScreen         *screen,
							       const GdkColor    *colors,
							       gint               n_colors
</USER_FUNCTION>
<STRUCT>
<NAME>GtkColorSelection</NAME>
struct _GtkColorSelection
{
  GtkBox parent_instance;

  /*< private >*/
  GtkColorSelectionPrivate *private_data;
};
</STRUCT>
<STRUCT>
<NAME>GtkColorSelectionClass</NAME>
struct _GtkColorSelectionClass
{
  GtkBoxClass parent_class;

  void (*color_changed)	(GtkColorSelection *color_selection);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_color_selection_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_has_opacity_control</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkColorSelection *colorsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_has_opacity_control</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkColorSelection *colorsel, gboolean           has_opacity
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_has_palette</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkColorSelection *colorsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_has_palette</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkColorSelection *colorsel, gboolean           has_palette
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_current_alpha</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, guint16            alpha
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_current_alpha</NAME>
<DEPRECATED/>
<RETURNS>guint16   </RETURNS>
GtkColorSelection *colorsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_previous_alpha</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, guint16            alpha
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_previous_alpha</NAME>
<DEPRECATED/>
<RETURNS>guint16   </RETURNS>
GtkColorSelection *colorsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_current_rgba</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, const GdkRGBA     *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_current_rgba</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, GdkRGBA           *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_previous_rgba</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, const GdkRGBA     *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_previous_rgba</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, GdkRGBA           *rgba
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_is_adjusting</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkColorSelection *colorsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_palette_from_string</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
const gchar       *str, GdkColor         **colors, gint              *n_colors
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_palette_to_string</NAME>
<DEPRECATED/>
<RETURNS>gchar *   </RETURNS>
const GdkColor    *colors, gint               n_colors
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_change_palette_with_screen_hook</NAME>
<DEPRECATED/>
<RETURNS>GtkColorSelectionChangePaletteWithScreenFunc  </RETURNS>
GtkColorSelectionChangePaletteWithScreenFunc func
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_current_color</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, const GdkColor    *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_current_color</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, GdkColor          *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_set_previous_color</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, const GdkColor    *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_get_previous_color</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkColorSelection *colorsel, GdkColor          *color
</FUNCTION>
<STRUCT>
<NAME>GtkColorSelectionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_COLOR_SELECTION_DIALOG</NAME>
#define GTK_TYPE_COLOR_SELECTION_DIALOG            (gtk_color_selection_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_COLOR_SELECTION_DIALOG</NAME>
#define GTK_COLOR_SELECTION_DIALOG(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialog))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_SELECTION_DIALOG_CLASS</NAME>
#define GTK_COLOR_SELECTION_DIALOG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_SELECTION_DIALOG</NAME>
#define GTK_IS_COLOR_SELECTION_DIALOG(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_COLOR_SELECTION_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_COLOR_SELECTION_DIALOG_CLASS</NAME>
#define GTK_IS_COLOR_SELECTION_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_COLOR_SELECTION_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_COLOR_SELECTION_DIALOG_GET_CLASS</NAME>
#define GTK_COLOR_SELECTION_DIALOG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_COLOR_SELECTION_DIALOG, GtkColorSelectionDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkColorSelectionDialog</NAME>
struct _GtkColorSelectionDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkColorSelectionDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkColorSelectionDialogClass</NAME>
struct _GtkColorSelectionDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_color_selection_dialog_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_dialog_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
const gchar *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_color_selection_dialog_get_color_selection</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkColorSelectionDialog *colorsel
</FUNCTION>
<STRUCT>
<NAME>GtkColorSelectionDialogPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_FONT_SELECTION</NAME>
#define GTK_TYPE_FONT_SELECTION              (gtk_font_selection_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FONT_SELECTION</NAME>
#define GTK_FONT_SELECTION(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelection))
</MACRO>
<MACRO>
<NAME>GTK_FONT_SELECTION_CLASS</NAME>
#define GTK_FONT_SELECTION_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_SELECTION, GtkFontSelectionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_SELECTION</NAME>
#define GTK_IS_FONT_SELECTION(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FONT_SELECTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_SELECTION_CLASS</NAME>
#define GTK_IS_FONT_SELECTION_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_SELECTION))
</MACRO>
<MACRO>
<NAME>GTK_FONT_SELECTION_GET_CLASS</NAME>
#define GTK_FONT_SELECTION_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FONT_SELECTION, GtkFontSelectionClass))
</MACRO>
<MACRO>
<NAME>GTK_TYPE_FONT_SELECTION_DIALOG</NAME>
#define GTK_TYPE_FONT_SELECTION_DIALOG              (gtk_font_selection_dialog_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_FONT_SELECTION_DIALOG</NAME>
#define GTK_FONT_SELECTION_DIALOG(obj)              (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialog))
</MACRO>
<MACRO>
<NAME>GTK_FONT_SELECTION_DIALOG_CLASS</NAME>
#define GTK_FONT_SELECTION_DIALOG_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialogClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_SELECTION_DIALOG</NAME>
#define GTK_IS_FONT_SELECTION_DIALOG(obj)           (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_FONT_SELECTION_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_IS_FONT_SELECTION_DIALOG_CLASS</NAME>
#define GTK_IS_FONT_SELECTION_DIALOG_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_FONT_SELECTION_DIALOG))
</MACRO>
<MACRO>
<NAME>GTK_FONT_SELECTION_DIALOG_GET_CLASS</NAME>
#define GTK_FONT_SELECTION_DIALOG_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_FONT_SELECTION_DIALOG, GtkFontSelectionDialogClass))
</MACRO>
<STRUCT>
<NAME>GtkFontSelection</NAME>
struct _GtkFontSelection
{
  GtkBox parent_instance;

  /*< private >*/
  GtkFontSelectionPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFontSelectionClass</NAME>
struct _GtkFontSelectionClass
{
  GtkBoxClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GtkFontSelectionDialog</NAME>
struct _GtkFontSelectionDialog
{
  GtkDialog parent_instance;

  /*< private >*/
  GtkFontSelectionDialogPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkFontSelectionDialogClass</NAME>
struct _GtkFontSelectionDialogClass
{
  GtkDialogClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_font_selection_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType         </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_family_list</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_face_list</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_size_entry</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_size_list</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_preview_entry</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *  </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_family</NAME>
<DEPRECATED/>
<RETURNS>PangoFontFamily  *</RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_face</NAME>
<DEPRECATED/>
<RETURNS>PangoFontFace  *</RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_size</NAME>
<DEPRECATED/>
<RETURNS>gint          </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_font_name</NAME>
<DEPRECATED/>
<RETURNS>gchar *       </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_set_font_name</NAME>
<DEPRECATED/>
<RETURNS>gboolean      </RETURNS>
GtkFontSelection *fontsel, const gchar      *fontname
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_get_preview_text</NAME>
<DEPRECATED/>
<RETURNS>const gchar * </RETURNS>
GtkFontSelection *fontsel
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_set_preview_text</NAME>
<DEPRECATED/>
<RETURNS>void          </RETURNS>
GtkFontSelection *fontsel, const gchar      *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
const gchar            *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_get_ok_button</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
GtkFontSelectionDialog *fsd
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_get_cancel_button</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
GtkFontSelectionDialog *fsd
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_get_font_selection</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
GtkFontSelectionDialog *fsd
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_get_font_name</NAME>
<DEPRECATED/>
<RETURNS>gchar *     </RETURNS>
GtkFontSelectionDialog *fsd
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_set_font_name</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkFontSelectionDialog *fsd, const gchar            *fontname
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_get_preview_text</NAME>
<DEPRECATED/>
<RETURNS>const gchar *</RETURNS>
GtkFontSelectionDialog *fsd
</FUNCTION>
<FUNCTION>
<NAME>gtk_font_selection_dialog_set_preview_text</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
GtkFontSelectionDialog *fsd, const gchar            *text
</FUNCTION>
<STRUCT>
<NAME>GtkFontSelectionDialogPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkFontSelectionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_GRADIENT</NAME>
#define GTK_TYPE_GRADIENT (gtk_gradient_get_type ())
</MACRO>
<FUNCTION>
<NAME>gtk_gradient_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_new_linear</NAME>
<DEPRECATED/>
<RETURNS>GtkGradient  * </RETURNS>
gdouble              x0, gdouble              y0, gdouble              x1, gdouble              y1
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_new_radial</NAME>
<DEPRECATED/>
<RETURNS>GtkGradient  * </RETURNS>
gdouble              x0, gdouble              y0, gdouble              radius0, gdouble              x1, gdouble              y1, gdouble              radius1
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_add_color_stop</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkGradient         *gradient, gdouble              offset, GtkSymbolicColor    *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_ref</NAME>
<DEPRECATED/>
<RETURNS>GtkGradient  * </RETURNS>
GtkGradient         *gradient
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_unref</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkGradient         *gradient
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_resolve</NAME>
<DEPRECATED/>
<RETURNS>gboolean       </RETURNS>
GtkGradient         *gradient, GtkStyleProperties  *props, cairo_pattern_t    **resolved_gradient
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_resolve_for_context</NAME>
<DEPRECATED/>
<RETURNS>cairo_pattern_t *</RETURNS>
GtkGradient         *gradient, GtkStyleContext     *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_gradient_to_string</NAME>
<DEPRECATED/>
<RETURNS>char  *        </RETURNS>
GtkGradient         *gradient
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HANDLE_BOX</NAME>
#define GTK_TYPE_HANDLE_BOX            (gtk_handle_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HANDLE_BOX</NAME>
#define GTK_HANDLE_BOX(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBox))
</MACRO>
<MACRO>
<NAME>GTK_HANDLE_BOX_CLASS</NAME>
#define GTK_HANDLE_BOX_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HANDLE_BOX, GtkHandleBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HANDLE_BOX</NAME>
#define GTK_IS_HANDLE_BOX(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HANDLE_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_HANDLE_BOX_CLASS</NAME>
#define GTK_IS_HANDLE_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HANDLE_BOX))
</MACRO>
<MACRO>
<NAME>GTK_HANDLE_BOX_GET_CLASS</NAME>
#define GTK_HANDLE_BOX_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HANDLE_BOX, GtkHandleBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkHandleBox</NAME>
struct _GtkHandleBox
{
  GtkBin bin;

  /*< private >*/
  GtkHandleBoxPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkHandleBoxClass</NAME>
struct _GtkHandleBoxClass
{
  GtkBinClass parent_class;

  void	(*child_attached)	(GtkHandleBox	*handle_box,
				 GtkWidget	*child);
  void	(*child_detached)	(GtkHandleBox	*handle_box,
				 GtkWidget	*child);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_handle_box_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType          </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget *    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_set_shadow_type</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkHandleBox    *handle_box, GtkShadowType    type
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_get_shadow_type</NAME>
<DEPRECATED/>
<RETURNS>GtkShadowType  </RETURNS>
GtkHandleBox    *handle_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_set_handle_position</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkHandleBox    *handle_box, GtkPositionType  position
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_get_handle_position</NAME>
<DEPRECATED/>
<RETURNS>GtkPositionType  </RETURNS>
GtkHandleBox    *handle_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_set_snap_edge</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkHandleBox    *handle_box, GtkPositionType  edge
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_get_snap_edge</NAME>
<DEPRECATED/>
<RETURNS>GtkPositionType  </RETURNS>
GtkHandleBox    *handle_box
</FUNCTION>
<FUNCTION>
<NAME>gtk_handle_box_get_child_detached</NAME>
<DEPRECATED/>
<RETURNS>gboolean       </RETURNS>
GtkHandleBox    *handle_box
</FUNCTION>
<STRUCT>
<NAME>GtkHandleBoxPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_HBUTTON_BOX</NAME>
#define GTK_TYPE_HBUTTON_BOX                  (gtk_hbutton_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HBUTTON_BOX</NAME>
#define GTK_HBUTTON_BOX(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBox))
</MACRO>
<MACRO>
<NAME>GTK_HBUTTON_BOX_CLASS</NAME>
#define GTK_HBUTTON_BOX_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HBUTTON_BOX, GtkHButtonBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HBUTTON_BOX</NAME>
#define GTK_IS_HBUTTON_BOX(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HBUTTON_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_HBUTTON_BOX_CLASS</NAME>
#define GTK_IS_HBUTTON_BOX_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HBUTTON_BOX))
</MACRO>
<MACRO>
<NAME>GTK_HBUTTON_BOX_GET_CLASS</NAME>
#define GTK_HBUTTON_BOX_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HBUTTON_BOX, GtkHButtonBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkHButtonBox</NAME>
struct _GtkHButtonBox
{
  GtkButtonBox button_box;
};
</STRUCT>
<STRUCT>
<NAME>GtkHButtonBoxClass</NAME>
struct _GtkHButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hbutton_box_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hbutton_box_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HBOX</NAME>
#define GTK_TYPE_HBOX            (gtk_hbox_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HBOX</NAME>
#define GTK_HBOX(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HBOX, GtkHBox))
</MACRO>
<MACRO>
<NAME>GTK_HBOX_CLASS</NAME>
#define GTK_HBOX_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HBOX, GtkHBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HBOX</NAME>
#define GTK_IS_HBOX(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HBOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_HBOX_CLASS</NAME>
#define GTK_IS_HBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HBOX))
</MACRO>
<MACRO>
<NAME>GTK_HBOX_GET_CLASS</NAME>
#define GTK_HBOX_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HBOX, GtkHBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkHBox</NAME>
struct _GtkHBox
{
  GtkBox box;
};
</STRUCT>
<STRUCT>
<NAME>GtkHBoxClass</NAME>
struct _GtkHBoxClass
{
  GtkBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hbox_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hbox_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  * </RETURNS>
gboolean homogeneous, gint     spacing
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HPANED</NAME>
#define GTK_TYPE_HPANED		   (gtk_hpaned_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HPANED</NAME>
#define GTK_HPANED(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HPANED, GtkHPaned))
</MACRO>
<MACRO>
<NAME>GTK_HPANED_CLASS</NAME>
#define GTK_HPANED_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HPANED, GtkHPanedClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HPANED</NAME>
#define GTK_IS_HPANED(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HPANED))
</MACRO>
<MACRO>
<NAME>GTK_IS_HPANED_CLASS</NAME>
#define GTK_IS_HPANED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HPANED))
</MACRO>
<MACRO>
<NAME>GTK_HPANED_GET_CLASS</NAME>
#define GTK_HPANED_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HPANED, GtkHPanedClass))
</MACRO>
<STRUCT>
<NAME>GtkHPaned</NAME>
struct _GtkHPaned
{
  GtkPaned paned;
};
</STRUCT>
<STRUCT>
<NAME>GtkHPanedClass</NAME>
struct _GtkHPanedClass
{
  GtkPanedClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hpaned_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hpaned_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HSCALE</NAME>
#define GTK_TYPE_HSCALE            (gtk_hscale_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HSCALE</NAME>
#define GTK_HSCALE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HSCALE, GtkHScale))
</MACRO>
<MACRO>
<NAME>GTK_HSCALE_CLASS</NAME>
#define GTK_HSCALE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSCALE, GtkHScaleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSCALE</NAME>
#define GTK_IS_HSCALE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HSCALE))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSCALE_CLASS</NAME>
#define GTK_IS_HSCALE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSCALE))
</MACRO>
<MACRO>
<NAME>GTK_HSCALE_GET_CLASS</NAME>
#define GTK_HSCALE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HSCALE, GtkHScaleClass))
</MACRO>
<STRUCT>
<NAME>GtkHScale</NAME>
struct _GtkHScale
{
  GtkScale scale;
};
</STRUCT>
<STRUCT>
<NAME>GtkHScaleClass</NAME>
struct _GtkHScaleClass
{
  GtkScaleClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hscale_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hscale_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_hscale_new_with_range</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
gdouble        min, gdouble        max, gdouble        step
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HSCROLLBAR</NAME>
#define GTK_TYPE_HSCROLLBAR            (gtk_hscrollbar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HSCROLLBAR</NAME>
#define GTK_HSCROLLBAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbar))
</MACRO>
<MACRO>
<NAME>GTK_HSCROLLBAR_CLASS</NAME>
#define GTK_HSCROLLBAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSCROLLBAR, GtkHScrollbarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSCROLLBAR</NAME>
#define GTK_IS_HSCROLLBAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HSCROLLBAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSCROLLBAR_CLASS</NAME>
#define GTK_IS_HSCROLLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSCROLLBAR))
</MACRO>
<MACRO>
<NAME>GTK_HSCROLLBAR_GET_CLASS</NAME>
#define GTK_HSCROLLBAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HSCROLLBAR, GtkHScrollbarClass))
</MACRO>
<STRUCT>
<NAME>GtkHScrollbar</NAME>
struct _GtkHScrollbar
{
  GtkScrollbar scrollbar;
};
</STRUCT>
<STRUCT>
<NAME>GtkHScrollbarClass</NAME>
struct _GtkHScrollbarClass
{
  GtkScrollbarClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hscrollbar_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hscrollbar_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkAdjustment *adjustment
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HSEPARATOR</NAME>
#define GTK_TYPE_HSEPARATOR                  (gtk_hseparator_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HSEPARATOR</NAME>
#define GTK_HSEPARATOR(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HSEPARATOR, GtkHSeparator))
</MACRO>
<MACRO>
<NAME>GTK_HSEPARATOR_CLASS</NAME>
#define GTK_HSEPARATOR_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSEPARATOR, GtkHSeparatorClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSEPARATOR</NAME>
#define GTK_IS_HSEPARATOR(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HSEPARATOR))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSEPARATOR_CLASS</NAME>
#define GTK_IS_HSEPARATOR_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSEPARATOR))
</MACRO>
<MACRO>
<NAME>GTK_HSEPARATOR_GET_CLASS</NAME>
#define GTK_HSEPARATOR_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HSEPARATOR, GtkHSeparatorClass))
</MACRO>
<STRUCT>
<NAME>GtkHSeparator</NAME>
struct _GtkHSeparator
{
  GtkSeparator separator;
};
</STRUCT>
<STRUCT>
<NAME>GtkHSeparatorClass</NAME>
struct _GtkHSeparatorClass
{
  GtkSeparatorClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hseparator_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hseparator_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_HSV</NAME>
#define GTK_TYPE_HSV            (gtk_hsv_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_HSV</NAME>
#define GTK_HSV(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_HSV, GtkHSV))
</MACRO>
<MACRO>
<NAME>GTK_HSV_CLASS</NAME>
#define GTK_HSV_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_HSV, GtkHSVClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSV</NAME>
#define GTK_IS_HSV(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_HSV))
</MACRO>
<MACRO>
<NAME>GTK_IS_HSV_CLASS</NAME>
#define GTK_IS_HSV_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_HSV))
</MACRO>
<MACRO>
<NAME>GTK_HSV_GET_CLASS</NAME>
#define GTK_HSV_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_HSV, GtkHSVClass))
</MACRO>
<STRUCT>
<NAME>GtkHSV</NAME>
struct _GtkHSV
{
  GtkWidget parent_instance;

  /*< private >*/
  GtkHSVPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkHSVClass</NAME>
struct _GtkHSVClass
{
  GtkWidgetClass parent_class;

  /* Notification signals */
  void (* changed) (GtkHSV          *hsv);

  /* Keybindings */
  void (* move)    (GtkHSV          *hsv,
                    GtkDirectionType type);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_hsv_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hsv_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_hsv_set_color</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkHSV    *hsv, double     h, double     s, double     v
</FUNCTION>
<FUNCTION>
<NAME>gtk_hsv_get_color</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkHSV    *hsv, gdouble   *h, gdouble   *s, gdouble   *v
</FUNCTION>
<FUNCTION>
<NAME>gtk_hsv_set_metrics</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkHSV    *hsv, gint       size, gint       ring_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_hsv_get_metrics</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkHSV    *hsv, gint      *size, gint      *ring_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_hsv_is_adjusting</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkHSV    *hsv
</FUNCTION>
<STRUCT>
<NAME>GtkHSVPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_ICON_FACTORY</NAME>
#define GTK_TYPE_ICON_FACTORY              (gtk_icon_factory_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_ICON_FACTORY</NAME>
#define GTK_ICON_FACTORY(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_ICON_FACTORY, GtkIconFactory))
</MACRO>
<MACRO>
<NAME>GTK_ICON_FACTORY_CLASS</NAME>
#define GTK_ICON_FACTORY_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ICON_FACTORY, GtkIconFactoryClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_FACTORY</NAME>
#define GTK_IS_ICON_FACTORY(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_ICON_FACTORY))
</MACRO>
<MACRO>
<NAME>GTK_IS_ICON_FACTORY_CLASS</NAME>
#define GTK_IS_ICON_FACTORY_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ICON_FACTORY))
</MACRO>
<MACRO>
<NAME>GTK_ICON_FACTORY_GET_CLASS</NAME>
#define GTK_ICON_FACTORY_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ICON_FACTORY, GtkIconFactoryClass))
</MACRO>
<MACRO>
<NAME>GTK_TYPE_ICON_SET</NAME>
#define GTK_TYPE_ICON_SET                  (gtk_icon_set_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TYPE_ICON_SOURCE</NAME>
#define GTK_TYPE_ICON_SOURCE               (gtk_icon_source_get_type ())
</MACRO>
<STRUCT>
<NAME>GtkIconFactory</NAME>
struct _GtkIconFactory
{
  GObject parent_instance;

  /*< private >*/
  GtkIconFactoryPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkIconFactoryClass</NAME>
struct _GtkIconFactoryClass
{
  GObjectClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_icon_factory_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_factory_new</NAME>
<DEPRECATED/>
<RETURNS>GtkIconFactory * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_factory_add</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkIconFactory *factory, const gchar    *stock_id, GtkIconSet     *icon_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_factory_lookup</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet *     </RETURNS>
GtkIconFactory *factory, const gchar    *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_factory_add_default</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkIconFactory  *factory
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_factory_remove_default</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkIconFactory  *factory
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_factory_lookup_default</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet * </RETURNS>
const gchar     *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_size_lookup</NAME>
<RETURNS>gboolean  </RETURNS>
GtkIconSize  size, gint        *width, gint        *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_size_lookup_for_settings</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkSettings *settings, GtkIconSize  size, gint        *width, gint        *height
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_size_register</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSize            </RETURNS>
const gchar *name, gint         width, gint         height
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_size_register_alias</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
const gchar *alias, GtkIconSize  target
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_size_from_name</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSize            </RETURNS>
const gchar *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_size_get_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar *          </RETURNS>
GtkIconSize  size
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_new</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_new_from_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet * </RETURNS>
GdkPixbuf       *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_ref</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet * </RETURNS>
GtkIconSet      *icon_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_unref</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkIconSet      *icon_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_copy</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet * </RETURNS>
GtkIconSet      *icon_set
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_render_icon</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf *  </RETURNS>
GtkIconSet      *icon_set, GtkStyle        *style, GtkTextDirection direction, GtkStateType     state, GtkIconSize      size, GtkWidget       *widget, const gchar     *detail
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_add_source</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkIconSet          *icon_set, const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_set_get_sizes</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkIconSet          *icon_set, GtkIconSize        **sizes, gint                *n_sizes
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_new</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSource * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_copy</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSource * </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_free</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkIconSource       *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_filename</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkIconSource       *source, const gchar         *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_icon_name</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkIconSource       *source, const gchar         *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkIconSource       *source, GdkPixbuf           *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_filename</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *    </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_icon_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *    </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf *       </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_direction_wildcarded</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkIconSource       *source, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_state_wildcarded</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkIconSource       *source, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_size_wildcarded</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkIconSource       *source, gboolean             setting
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_size_wildcarded</NAME>
<DEPRECATED/>
<RETURNS>gboolean          </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_state_wildcarded</NAME>
<DEPRECATED/>
<RETURNS>gboolean          </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_direction_wildcarded</NAME>
<DEPRECATED/>
<RETURNS>gboolean          </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_direction</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkIconSource       *source, GtkTextDirection     direction
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_state</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkIconSource       *source, GtkStateType         state
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_set_size</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkIconSource       *source, GtkIconSize          size
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_direction</NAME>
<DEPRECATED/>
<RETURNS>GtkTextDirection  </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_state</NAME>
<DEPRECATED/>
<RETURNS>GtkStateType      </RETURNS>
const GtkIconSource *source
</FUNCTION>
<FUNCTION>
<NAME>gtk_icon_source_get_size</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSize       </RETURNS>
const GtkIconSource *source
</FUNCTION>
<STRUCT>
<NAME>GtkIconFactoryPrivate</NAME>
</STRUCT>
<FUNCTION>
<NAME>gtk_icon_set_render_icon_pixbuf_for_scale</NAME>
<RETURNS>GdkPixbuf  * </RETURNS>
GtkIconSet             *icon_set, GtkCssStyle            *style, GtkTextDirection        direction, GtkIconSize             size, gint                    scale
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_IMAGE_MENU_ITEM</NAME>
#define GTK_TYPE_IMAGE_MENU_ITEM            (gtk_image_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_IMAGE_MENU_ITEM</NAME>
#define GTK_IMAGE_MENU_ITEM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItem))
</MACRO>
<MACRO>
<NAME>GTK_IMAGE_MENU_ITEM_CLASS</NAME>
#define GTK_IMAGE_MENU_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_IMAGE_MENU_ITEM</NAME>
#define GTK_IS_IMAGE_MENU_ITEM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IMAGE_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_IMAGE_MENU_ITEM_CLASS</NAME>
#define GTK_IS_IMAGE_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IMAGE_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IMAGE_MENU_ITEM_GET_CLASS</NAME>
#define GTK_IMAGE_MENU_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IMAGE_MENU_ITEM, GtkImageMenuItemClass))
</MACRO>
<STRUCT>
<NAME>GtkImageMenuItem</NAME>
struct _GtkImageMenuItem
{
  GtkMenuItem menu_item;

  /*< private >*/
  GtkImageMenuItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkImageMenuItemClass</NAME>
struct _GtkImageMenuItemClass
{
  GtkMenuItemClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_image_menu_item_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_new_with_label</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_new_with_mnemonic</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
const gchar      *stock_id, GtkAccelGroup    *accel_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_set_always_show_image</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkImageMenuItem *image_menu_item, gboolean          always_show
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_get_always_show_image</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkImageMenuItem *image_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_set_image</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkImageMenuItem *image_menu_item, GtkWidget        *image
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_get_image</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkImageMenuItem *image_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_set_use_stock</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkImageMenuItem *image_menu_item, gboolean          use_stock
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_get_use_stock</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkImageMenuItem *image_menu_item
</FUNCTION>
<FUNCTION>
<NAME>gtk_image_menu_item_set_accel_group</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkImageMenuItem *image_menu_item, GtkAccelGroup    *accel_group
</FUNCTION>
<STRUCT>
<NAME>GtkImageMenuItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_MISC</NAME>
#define GTK_TYPE_MISC		       (gtk_misc_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_MISC</NAME>
#define GTK_MISC(obj)		       (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_MISC, GtkMisc))
</MACRO>
<MACRO>
<NAME>GTK_MISC_CLASS</NAME>
#define GTK_MISC_CLASS(klass)	       (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_MISC, GtkMiscClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_MISC</NAME>
#define GTK_IS_MISC(obj)	       (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_MISC))
</MACRO>
<MACRO>
<NAME>GTK_IS_MISC_CLASS</NAME>
#define GTK_IS_MISC_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_MISC))
</MACRO>
<MACRO>
<NAME>GTK_MISC_GET_CLASS</NAME>
#define GTK_MISC_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_MISC, GtkMiscClass))
</MACRO>
<STRUCT>
<NAME>GtkMisc</NAME>
struct _GtkMisc
{
  GtkWidget widget;

  /*< private >*/
  GtkMiscPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkMiscClass</NAME>
struct _GtkMiscClass
{
  GtkWidgetClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_misc_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType    </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_misc_set_alignment</NAME>
<DEPRECATED/>
<RETURNS>void 	</RETURNS>
GtkMisc *misc, gfloat	 xalign, gfloat	 yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_misc_get_alignment</NAME>
<DEPRECATED/>
<RETURNS>void     </RETURNS>
GtkMisc *misc, gfloat  *xalign, gfloat  *yalign
</FUNCTION>
<FUNCTION>
<NAME>gtk_misc_set_padding</NAME>
<DEPRECATED/>
<RETURNS>void 	</RETURNS>
GtkMisc *misc, gint	 xpad, gint	 ypad
</FUNCTION>
<FUNCTION>
<NAME>gtk_misc_get_padding</NAME>
<DEPRECATED/>
<RETURNS>void     </RETURNS>
GtkMisc *misc, gint    *xpad, gint    *ypad
</FUNCTION>
<STRUCT>
<NAME>GtkMiscPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_NUMERABLE_ICON</NAME>
#define GTK_TYPE_NUMERABLE_ICON                  (gtk_numerable_icon_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_NUMERABLE_ICON</NAME>
#define GTK_NUMERABLE_ICON(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_NUMERABLE_ICON, GtkNumerableIcon))
</MACRO>
<MACRO>
<NAME>GTK_NUMERABLE_ICON_CLASS</NAME>
#define GTK_NUMERABLE_ICON_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_NUMERABLE_ICON, GtkNumerableIconClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_NUMERABLE_ICON</NAME>
#define GTK_IS_NUMERABLE_ICON(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_NUMERABLE_ICON))
</MACRO>
<MACRO>
<NAME>GTK_IS_NUMERABLE_ICON_CLASS</NAME>
#define GTK_IS_NUMERABLE_ICON_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_NUMERABLE_ICON))
</MACRO>
<MACRO>
<NAME>GTK_NUMERABLE_ICON_GET_CLASS</NAME>
#define GTK_NUMERABLE_ICON_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_NUMERABLE_ICON, GtkNumerableIconClass))
</MACRO>
<STRUCT>
<NAME>GtkNumerableIcon</NAME>
struct _GtkNumerableIcon {
  GEmblemedIcon parent;

  /*< private >*/
  GtkNumerableIconPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkNumerableIconClass</NAME>
struct _GtkNumerableIconClass {
  GEmblemedIconClass parent_class;

  /* padding for future class expansion */
  gpointer padding[16];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_numerable_icon_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType              </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_new</NAME>
<DEPRECATED/>
<RETURNS>GIcon  *           </RETURNS>
GIcon            *base_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_new_with_style_context</NAME>
<DEPRECATED/>
<RETURNS>GIcon  *           </RETURNS>
GIcon            *base_icon, GtkStyleContext  *context
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_get_style_context</NAME>
<DEPRECATED/>
<RETURNS>GtkStyleContext  * </RETURNS>
GtkNumerableIcon *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_set_style_context</NAME>
<DEPRECATED/>
<RETURNS>void               </RETURNS>
GtkNumerableIcon *self, GtkStyleContext  *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_get_count</NAME>
<DEPRECATED/>
<RETURNS>gint               </RETURNS>
GtkNumerableIcon *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_set_count</NAME>
<DEPRECATED/>
<RETURNS>void               </RETURNS>
GtkNumerableIcon *self, gint count
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_get_label</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *     </RETURNS>
GtkNumerableIcon *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_set_label</NAME>
<DEPRECATED/>
<RETURNS>void               </RETURNS>
GtkNumerableIcon *self, const gchar      *label
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_set_background_gicon</NAME>
<DEPRECATED/>
<RETURNS>void               </RETURNS>
GtkNumerableIcon *self, GIcon            *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_get_background_gicon</NAME>
<DEPRECATED/>
<RETURNS>GIcon  *           </RETURNS>
GtkNumerableIcon *self
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_set_background_icon_name</NAME>
<DEPRECATED/>
<RETURNS>void               </RETURNS>
GtkNumerableIcon *self, const gchar      *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_numerable_icon_get_background_icon_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *     </RETURNS>
GtkNumerableIcon *self
</FUNCTION>
<STRUCT>
<NAME>GtkNumerableIconPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RADIO_ACTION</NAME>
#define GTK_TYPE_RADIO_ACTION            (gtk_radio_action_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RADIO_ACTION</NAME>
#define GTK_RADIO_ACTION(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RADIO_ACTION, GtkRadioAction))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_ACTION_CLASS</NAME>
#define GTK_RADIO_ACTION_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RADIO_ACTION, GtkRadioActionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_ACTION</NAME>
#define GTK_IS_RADIO_ACTION(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RADIO_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_RADIO_ACTION_CLASS</NAME>
#define GTK_IS_RADIO_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RADIO_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_RADIO_ACTION_GET_CLASS</NAME>
#define GTK_RADIO_ACTION_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_RADIO_ACTION, GtkRadioActionClass))
</MACRO>
<STRUCT>
<NAME>GtkRadioAction</NAME>
struct _GtkRadioAction
{
  GtkToggleAction parent;

  /*< private >*/
  GtkRadioActionPrivate *private_data;
};
</STRUCT>
<STRUCT>
<NAME>GtkRadioActionClass</NAME>
struct _GtkRadioActionClass
{
  GtkToggleActionClass parent_class;

  void       (* changed) (GtkRadioAction *action, GtkRadioAction *current);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_radio_action_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType            </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_action_new</NAME>
<DEPRECATED/>
<RETURNS>GtkRadioAction  *</RETURNS>
const gchar           *name, const gchar           *label, const gchar           *tooltip, const gchar           *stock_id, gint                   value
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_action_get_group</NAME>
<DEPRECATED/>
<RETURNS>GSList          *</RETURNS>
GtkRadioAction        *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_action_set_group</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkRadioAction        *action, GSList                *group
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_action_join_group</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkRadioAction        *action, GtkRadioAction        *group_source
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_action_get_current_value</NAME>
<DEPRECATED/>
<RETURNS>gint             </RETURNS>
GtkRadioAction        *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_radio_action_set_current_value</NAME>
<DEPRECATED/>
<RETURNS>void             </RETURNS>
GtkRadioAction        *action, gint                   current_value
</FUNCTION>
<STRUCT>
<NAME>GtkRadioActionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RC_STYLE</NAME>
#define GTK_TYPE_RC_STYLE              (gtk_rc_style_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RC_STYLE</NAME>
#define GTK_RC_STYLE(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_RC_STYLE, GtkRcStyle))
</MACRO>
<MACRO>
<NAME>GTK_RC_STYLE_CLASS</NAME>
#define GTK_RC_STYLE_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RC_STYLE, GtkRcStyleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RC_STYLE</NAME>
#define GTK_IS_RC_STYLE(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_RC_STYLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_RC_STYLE_CLASS</NAME>
#define GTK_IS_RC_STYLE_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RC_STYLE))
</MACRO>
<MACRO>
<NAME>GTK_RC_STYLE_GET_CLASS</NAME>
#define GTK_RC_STYLE_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RC_STYLE, GtkRcStyleClass))
</MACRO>
<ENUM>
<NAME>GtkRcFlags</NAME>
typedef enum
{
  GTK_RC_FG             = 1 << 0,
  GTK_RC_BG             = 1 << 1,
  GTK_RC_TEXT           = 1 << 2,
  GTK_RC_BASE           = 1 << 3
} GtkRcFlags;
</ENUM>
<STRUCT>
<NAME>GtkRcStyle</NAME>
struct _GtkRcStyle
{
  GObject parent_instance;

  /*< public >*/

  gchar *name;
  gchar *bg_pixmap_name[5];
  PangoFontDescription *font_desc;

  GtkRcFlags color_flags[5];
  GdkColor   fg[5];
  GdkColor   bg[5];
  GdkColor   text[5];
  GdkColor   base[5];

  gint xthickness;
  gint ythickness;

  /*< private >*/
  GArray *rc_properties;

  /* list of RC style lists including this RC style */
  GSList *rc_style_lists;

  GSList *icon_factories;

  guint engine_specified : 1;   /* The RC file specified the engine */
};
</STRUCT>
<STRUCT>
<NAME>GtkRcStyleClass</NAME>
struct _GtkRcStyleClass
{
  GObjectClass parent_class;

  /*< public >*/

  /* Create an empty RC style of the same type as this RC style.
   * The default implementation, which does
   * g_object_new (G_OBJECT_TYPE (style), NULL);
   * should work in most cases.
   */
  GtkRcStyle * (*create_rc_style) (GtkRcStyle *rc_style);

  /* Fill in engine specific parts of GtkRcStyle by parsing contents
   * of brackets. Returns G_TOKEN_NONE if successful, otherwise returns
   * the token it expected but didn't get.
   */
  guint     (*parse)  (GtkRcStyle   *rc_style,
                       GtkSettings  *settings,
                       GScanner     *scanner);

  /* Combine RC style data from src into dest. If overridden, this
   * function should chain to the parent.
   */
  void      (*merge)  (GtkRcStyle *dest,
                       GtkRcStyle *src);

  /* Create an empty style suitable to this RC style
   */
  GtkStyle * (*create_style) (GtkRcStyle *rc_style);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_rc_add_default_file</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
const gchar *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_set_default_files</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
gchar **filenames
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_default_files</NAME>
<DEPRECATED/>
<RETURNS>gchar **   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_style</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle * </RETURNS>
GtkWidget   *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_style_by_paths</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle * </RETURNS>
GtkSettings *settings, const char  *widget_path, const char  *class_path, GType        type
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_reparse_all_for_settings</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkSettings *settings, gboolean     force_load
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_reset_styles</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkSettings *settings
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_find_pixmap_in_path</NAME>
<DEPRECATED/>
<RETURNS>gchar *   </RETURNS>
GtkSettings  *settings, GScanner     *scanner, const gchar  *pixmap_file
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_parse</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
const gchar *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_parse_string</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
const gchar *rc_string
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_reparse_all</NAME>
<DEPRECATED/>
<RETURNS>gboolean   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_style_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_style_new</NAME>
<DEPRECATED/>
<RETURNS>GtkRcStyle * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_style_copy</NAME>
<DEPRECATED/>
<RETURNS>GtkRcStyle * </RETURNS>
GtkRcStyle *orig
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_find_module_in_path</NAME>
<DEPRECATED/>
<RETURNS>gchar *      </RETURNS>
const gchar *module_file
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_theme_dir</NAME>
<DEPRECATED/>
<RETURNS>gchar *      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_module_dir</NAME>
<DEPRECATED/>
<RETURNS>gchar *      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_im_module_path</NAME>
<DEPRECATED/>
<RETURNS>gchar *      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_get_im_module_file</NAME>
<DEPRECATED/>
<RETURNS>gchar *      </RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>GtkRcTokenType</NAME>
typedef enum {
  GTK_RC_TOKEN_INVALID = G_TOKEN_LAST,
  GTK_RC_TOKEN_INCLUDE,
  GTK_RC_TOKEN_NORMAL,
  GTK_RC_TOKEN_ACTIVE,
  GTK_RC_TOKEN_PRELIGHT,
  GTK_RC_TOKEN_SELECTED,
  GTK_RC_TOKEN_INSENSITIVE,
  GTK_RC_TOKEN_FG,
  GTK_RC_TOKEN_BG,
  GTK_RC_TOKEN_TEXT,
  GTK_RC_TOKEN_BASE,
  GTK_RC_TOKEN_XTHICKNESS,
  GTK_RC_TOKEN_YTHICKNESS,
  GTK_RC_TOKEN_FONT,
  GTK_RC_TOKEN_FONTSET,
  GTK_RC_TOKEN_FONT_NAME,
  GTK_RC_TOKEN_BG_PIXMAP,
  GTK_RC_TOKEN_PIXMAP_PATH,
  GTK_RC_TOKEN_STYLE,
  GTK_RC_TOKEN_BINDING,
  GTK_RC_TOKEN_BIND,
  GTK_RC_TOKEN_WIDGET,
  GTK_RC_TOKEN_WIDGET_CLASS,
  GTK_RC_TOKEN_CLASS,
  GTK_RC_TOKEN_LOWEST,
  GTK_RC_TOKEN_GTK,
  GTK_RC_TOKEN_APPLICATION,
  GTK_RC_TOKEN_THEME,
  GTK_RC_TOKEN_RC,
  GTK_RC_TOKEN_HIGHEST,
  GTK_RC_TOKEN_ENGINE,
  GTK_RC_TOKEN_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_FILE,
  GTK_RC_TOKEN_STOCK,
  GTK_RC_TOKEN_LTR,
  GTK_RC_TOKEN_RTL,
  GTK_RC_TOKEN_COLOR,
  GTK_RC_TOKEN_UNBIND,
  GTK_RC_TOKEN_LAST
} GtkRcTokenType;
</ENUM>
<ENUM>
<NAME>GtkPathPriorityType</NAME>
typedef enum
{
  GTK_PATH_PRIO_LOWEST      = 0,
  GTK_PATH_PRIO_GTK         = 4,
  GTK_PATH_PRIO_APPLICATION = 8,
  GTK_PATH_PRIO_THEME       = 10,
  GTK_PATH_PRIO_RC          = 12,
  GTK_PATH_PRIO_HIGHEST     = 15
} GtkPathPriorityType;
</ENUM>
<MACRO>
<NAME>GTK_PATH_PRIO_MASK</NAME>
#define GTK_PATH_PRIO_MASK 0x0f
</MACRO>
<ENUM>
<NAME>GtkPathType</NAME>
typedef enum
{
  GTK_PATH_WIDGET,
  GTK_PATH_WIDGET_CLASS,
  GTK_PATH_CLASS
} GtkPathType;
</ENUM>
<FUNCTION>
<NAME>gtk_rc_scanner_new</NAME>
<DEPRECATED/>
<RETURNS>GScanner * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_parse_color</NAME>
<DEPRECATED/>
<RETURNS>guint      </RETURNS>
GScanner            *scanner, GdkColor            *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_parse_color_full</NAME>
<DEPRECATED/>
<RETURNS>guint      </RETURNS>
GScanner          *scanner, GtkRcStyle        *style, GdkColor          *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_parse_state</NAME>
<DEPRECATED/>
<RETURNS>guint      </RETURNS>
GScanner            *scanner, GtkStateType        *state
</FUNCTION>
<FUNCTION>
<NAME>gtk_rc_parse_priority</NAME>
<DEPRECATED/>
<RETURNS>guint      </RETURNS>
GScanner            *scanner, GtkPathPriorityType *priority
</FUNCTION>
<STRUCT>
<NAME>GtkRcProperty</NAME>
struct _GtkRcProperty
{
  /* quark-ified property identifier like “GtkScrollbar::spacing” */
  GQuark type_name;
  GQuark property_name;

  /* fields similar to GtkSettingsValue */
  gchar *origin;
  GValue value;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_binding_set_add_path</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
GtkBindingSet       *binding_set, GtkPathType          path_type, const gchar         *path_pattern, GtkPathPriorityType  priority
</FUNCTION>
<STRUCT>
<NAME>GtkRcContext</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_RECENT_ACTION</NAME>
#define GTK_TYPE_RECENT_ACTION                  (gtk_recent_action_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_RECENT_ACTION</NAME>
#define GTK_RECENT_ACTION(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_RECENT_ACTION, GtkRecentAction))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_ACTION</NAME>
#define GTK_IS_RECENT_ACTION(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_RECENT_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_ACTION_CLASS</NAME>
#define GTK_RECENT_ACTION_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_RECENT_ACTION, GtkRecentActionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_RECENT_ACTION_CLASS</NAME>
#define GTK_IS_RECENT_ACTION_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_RECENT_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_RECENT_ACTION_GET_CLASS</NAME>
#define GTK_RECENT_ACTION_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_RECENT_ACTION, GtkRecentActionClass))
</MACRO>
<STRUCT>
<NAME>GtkRecentAction</NAME>
struct _GtkRecentAction
{
  GtkAction parent_instance;

  /*< private >*/
  GtkRecentActionPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkRecentActionClass</NAME>
struct _GtkRecentActionClass
{
  GtkActionClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_recent_action_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_action_new</NAME>
<DEPRECATED/>
<RETURNS>GtkAction  *</RETURNS>
const gchar      *name, const gchar      *label, const gchar      *tooltip, const gchar      *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_action_new_for_manager</NAME>
<DEPRECATED/>
<RETURNS>GtkAction  *</RETURNS>
const gchar      *name, const gchar      *label, const gchar      *tooltip, const gchar      *stock_id, GtkRecentManager *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_action_get_show_numbers</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkRecentAction  *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_recent_action_set_show_numbers</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkRecentAction  *action, gboolean          show_numbers
</FUNCTION>
<STRUCT>
<NAME>GtkRecentActionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_STATUS_ICON</NAME>
#define GTK_TYPE_STATUS_ICON         (gtk_status_icon_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STATUS_ICON</NAME>
#define GTK_STATUS_ICON(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_STATUS_ICON, GtkStatusIcon))
</MACRO>
<MACRO>
<NAME>GTK_STATUS_ICON_CLASS</NAME>
#define GTK_STATUS_ICON_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), GTK_TYPE_STATUS_ICON, GtkStatusIconClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STATUS_ICON</NAME>
#define GTK_IS_STATUS_ICON(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_STATUS_ICON))
</MACRO>
<MACRO>
<NAME>GTK_IS_STATUS_ICON_CLASS</NAME>
#define GTK_IS_STATUS_ICON_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), GTK_TYPE_STATUS_ICON))
</MACRO>
<MACRO>
<NAME>GTK_STATUS_ICON_GET_CLASS</NAME>
#define GTK_STATUS_ICON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GTK_TYPE_STATUS_ICON, GtkStatusIconClass))
</MACRO>
<STRUCT>
<NAME>GtkStatusIcon</NAME>
struct _GtkStatusIcon
{
  GObject               parent_instance;

  GtkStatusIconPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkStatusIconClass</NAME>
struct _GtkStatusIconClass
{
  GObjectClass parent_class;

  void     (* activate)             (GtkStatusIcon  *status_icon);
  void     (* popup_menu)           (GtkStatusIcon  *status_icon,
                                     guint           button,
                                     guint32         activate_time);
  gboolean (* size_changed)         (GtkStatusIcon  *status_icon,
                                     gint            size);
  gboolean (* button_press_event)   (GtkStatusIcon  *status_icon,
                                     GdkEventButton *event);
  gboolean (* button_release_event) (GtkStatusIcon  *status_icon,
                                     GdkEventButton *event);
  gboolean (* scroll_event)         (GtkStatusIcon  *status_icon,
                                     GdkEventScroll *event);
  gboolean (* query_tooltip)        (GtkStatusIcon  *status_icon,
                                     gint            x,
                                     gint            y,
                                     gboolean        keyboard_mode,
                                     GtkTooltip     *tooltip);

  void (*__gtk_reserved1);
  void (*__gtk_reserved2);
  void (*__gtk_reserved3);
  void (*__gtk_reserved4);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_status_icon_get_type</NAME>
<RETURNS>GType                  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_new</NAME>
<DEPRECATED/>
<RETURNS>GtkStatusIcon         *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_new_from_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GtkStatusIcon         *</RETURNS>
GdkPixbuf          *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_new_from_file</NAME>
<DEPRECATED/>
<RETURNS>GtkStatusIcon         *</RETURNS>
const gchar        *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_new_from_stock</NAME>
<DEPRECATED/>
<RETURNS>GtkStatusIcon         *</RETURNS>
const gchar        *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_new_from_icon_name</NAME>
<DEPRECATED/>
<RETURNS>GtkStatusIcon         *</RETURNS>
const gchar        *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_new_from_gicon</NAME>
<DEPRECATED/>
<RETURNS>GtkStatusIcon         *</RETURNS>
GIcon              *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_from_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, GdkPixbuf          *pixbuf
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_from_file</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *filename
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_from_stock</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_from_icon_name</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *icon_name
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_from_gicon</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, GIcon              *icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_storage_type</NAME>
<DEPRECATED/>
<RETURNS>GtkImageType           </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_pixbuf</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf             *</RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_stock</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_icon_name</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_gicon</NAME>
<DEPRECATED/>
<RETURNS>GIcon                 *</RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_size</NAME>
<DEPRECATED/>
<RETURNS>gint                   </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_screen</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, GdkScreen          *screen
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_screen</NAME>
<DEPRECATED/>
<RETURNS>GdkScreen             *</RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_has_tooltip</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, gboolean            has_tooltip
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_tooltip_text</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *text
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_tooltip_markup</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *markup
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_title</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *title
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_title</NAME>
<DEPRECATED/>
<RETURNS>const gchar  *         </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_name</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, const gchar        *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_set_visible</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkStatusIcon      *status_icon, gboolean            visible
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_visible</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_is_embedded</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_position_menu</NAME>
<DEPRECATED/>
<RETURNS>void                   </RETURNS>
GtkMenu            *menu, gint               *x, gint               *y, gboolean           *push_in, gpointer            user_data
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_geometry</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkStatusIcon      *status_icon, GdkScreen         **screen, GdkRectangle       *area, GtkOrientation     *orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_has_tooltip</NAME>
<DEPRECATED/>
<RETURNS>gboolean               </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_tooltip_text</NAME>
<DEPRECATED/>
<RETURNS>gchar                 *</RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_tooltip_markup</NAME>
<DEPRECATED/>
<RETURNS>gchar                 *</RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<FUNCTION>
<NAME>gtk_status_icon_get_x11_window_id</NAME>
<DEPRECATED/>
<RETURNS>guint32                </RETURNS>
GtkStatusIcon      *status_icon
</FUNCTION>
<STRUCT>
<NAME>GtkStatusIconPrivate</NAME>
</STRUCT>
<USER_FUNCTION>
<NAME>GtkTranslateFunc</NAME>
<RETURNS>gchar *</RETURNS>
const gchar  *path,
                                     gpointer      func_data
</USER_FUNCTION>
<STRUCT>
<NAME>GtkStockItem</NAME>
struct _GtkStockItem
{
  gchar *stock_id;
  gchar *label;
  GdkModifierType modifier;
  guint keyval;
  gchar *translation_domain;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_stock_add</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
const GtkStockItem  *items, guint                n_items
</FUNCTION>
<FUNCTION>
<NAME>gtk_stock_add_static</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
const GtkStockItem  *items, guint                n_items
</FUNCTION>
<FUNCTION>
<NAME>gtk_stock_lookup</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
const gchar         *stock_id, GtkStockItem        *item
</FUNCTION>
<FUNCTION>
<NAME>gtk_stock_list_ids</NAME>
<DEPRECATED/>
<RETURNS>GSList *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_stock_item_copy</NAME>
<DEPRECATED/>
<RETURNS>GtkStockItem  *</RETURNS>
const GtkStockItem *item
</FUNCTION>
<FUNCTION>
<NAME>gtk_stock_item_free</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
GtkStockItem       *item
</FUNCTION>
<FUNCTION>
<NAME>gtk_stock_set_translate_func</NAME>
<DEPRECATED/>
<RETURNS>void           </RETURNS>
const gchar      *domain, GtkTranslateFunc  func, gpointer          data, GDestroyNotify    notify
</FUNCTION>
<TYPEDEF>
<NAME>GtkStock</NAME>
<DEPRECATED/>
typedef char * GtkStock;
</TYPEDEF>
<MACRO>
<NAME>GTK_STOCK_ABOUT</NAME>
<DEPRECATED/>
#define GTK_STOCK_ABOUT            ((GtkStock)"gtk-about")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ADD</NAME>
<DEPRECATED/>
#define GTK_STOCK_ADD              ((GtkStock)"gtk-add")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_APPLY</NAME>
<DEPRECATED/>
#define GTK_STOCK_APPLY            ((GtkStock)"gtk-apply")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_BOLD</NAME>
<DEPRECATED/>
#define GTK_STOCK_BOLD             ((GtkStock)"gtk-bold")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CANCEL</NAME>
<DEPRECATED/>
#define GTK_STOCK_CANCEL           ((GtkStock)"gtk-cancel")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CAPS_LOCK_WARNING</NAME>
<DEPRECATED/>
#define GTK_STOCK_CAPS_LOCK_WARNING ((GtkStock)"gtk-caps-lock-warning")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CDROM</NAME>
<DEPRECATED/>
#define GTK_STOCK_CDROM            ((GtkStock)"gtk-cdrom")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CLEAR</NAME>
<DEPRECATED/>
#define GTK_STOCK_CLEAR            ((GtkStock)"gtk-clear")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CLOSE</NAME>
<DEPRECATED/>
#define GTK_STOCK_CLOSE            ((GtkStock)"gtk-close")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_COLOR_PICKER</NAME>
<DEPRECATED/>
#define GTK_STOCK_COLOR_PICKER     ((GtkStock)"gtk-color-picker")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CONNECT</NAME>
<DEPRECATED/>
#define GTK_STOCK_CONNECT          ((GtkStock)"gtk-connect")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CONVERT</NAME>
<DEPRECATED/>
#define GTK_STOCK_CONVERT          ((GtkStock)"gtk-convert")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_COPY</NAME>
<DEPRECATED/>
#define GTK_STOCK_COPY             ((GtkStock)"gtk-copy")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_CUT</NAME>
<DEPRECATED/>
#define GTK_STOCK_CUT              ((GtkStock)"gtk-cut")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DELETE</NAME>
<DEPRECATED/>
#define GTK_STOCK_DELETE           ((GtkStock)"gtk-delete")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DIALOG_AUTHENTICATION</NAME>
<DEPRECATED/>
#define GTK_STOCK_DIALOG_AUTHENTICATION ((GtkStock)"gtk-dialog-authentication")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DIALOG_INFO</NAME>
<DEPRECATED/>
#define GTK_STOCK_DIALOG_INFO      ((GtkStock)"gtk-dialog-info")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DIALOG_WARNING</NAME>
<DEPRECATED/>
#define GTK_STOCK_DIALOG_WARNING   ((GtkStock)"gtk-dialog-warning")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DIALOG_ERROR</NAME>
<DEPRECATED/>
#define GTK_STOCK_DIALOG_ERROR     ((GtkStock)"gtk-dialog-error")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DIALOG_QUESTION</NAME>
<DEPRECATED/>
#define GTK_STOCK_DIALOG_QUESTION  ((GtkStock)"gtk-dialog-question")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DIRECTORY</NAME>
<DEPRECATED/>
#define GTK_STOCK_DIRECTORY        ((GtkStock)"gtk-directory")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DISCARD</NAME>
<DEPRECATED/>
#define GTK_STOCK_DISCARD          ((GtkStock)"gtk-discard")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DISCONNECT</NAME>
<DEPRECATED/>
#define GTK_STOCK_DISCONNECT       ((GtkStock)"gtk-disconnect")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DND</NAME>
<DEPRECATED/>
#define GTK_STOCK_DND              ((GtkStock)"gtk-dnd")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_DND_MULTIPLE</NAME>
<DEPRECATED/>
#define GTK_STOCK_DND_MULTIPLE     ((GtkStock)"gtk-dnd-multiple")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_EDIT</NAME>
<DEPRECATED/>
#define GTK_STOCK_EDIT             ((GtkStock)"gtk-edit")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_EXECUTE</NAME>
<DEPRECATED/>
#define GTK_STOCK_EXECUTE          ((GtkStock)"gtk-execute")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_FILE</NAME>
<DEPRECATED/>
#define GTK_STOCK_FILE             ((GtkStock)"gtk-file")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_FIND</NAME>
<DEPRECATED/>
#define GTK_STOCK_FIND             ((GtkStock)"gtk-find")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_FIND_AND_REPLACE</NAME>
<DEPRECATED/>
#define GTK_STOCK_FIND_AND_REPLACE ((GtkStock)"gtk-find-and-replace")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_FLOPPY</NAME>
<DEPRECATED/>
#define GTK_STOCK_FLOPPY           ((GtkStock)"gtk-floppy")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_FULLSCREEN</NAME>
<DEPRECATED/>
#define GTK_STOCK_FULLSCREEN       ((GtkStock)"gtk-fullscreen")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GOTO_BOTTOM</NAME>
<DEPRECATED/>
#define GTK_STOCK_GOTO_BOTTOM      ((GtkStock)"gtk-goto-bottom")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GOTO_FIRST</NAME>
<DEPRECATED/>
#define GTK_STOCK_GOTO_FIRST       ((GtkStock)"gtk-goto-first")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GOTO_LAST</NAME>
<DEPRECATED/>
#define GTK_STOCK_GOTO_LAST        ((GtkStock)"gtk-goto-last")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GOTO_TOP</NAME>
<DEPRECATED/>
#define GTK_STOCK_GOTO_TOP         ((GtkStock)"gtk-goto-top")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GO_BACK</NAME>
<DEPRECATED/>
#define GTK_STOCK_GO_BACK          ((GtkStock)"gtk-go-back")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GO_DOWN</NAME>
<DEPRECATED/>
#define GTK_STOCK_GO_DOWN          ((GtkStock)"gtk-go-down")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GO_FORWARD</NAME>
<DEPRECATED/>
#define GTK_STOCK_GO_FORWARD       ((GtkStock)"gtk-go-forward")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_GO_UP</NAME>
<DEPRECATED/>
#define GTK_STOCK_GO_UP            ((GtkStock)"gtk-go-up")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_HARDDISK</NAME>
<DEPRECATED/>
#define GTK_STOCK_HARDDISK         ((GtkStock)"gtk-harddisk")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_HELP</NAME>
<DEPRECATED/>
#define GTK_STOCK_HELP             ((GtkStock)"gtk-help")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_HOME</NAME>
<DEPRECATED/>
#define GTK_STOCK_HOME             ((GtkStock)"gtk-home")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_INDEX</NAME>
<DEPRECATED/>
#define GTK_STOCK_INDEX            ((GtkStock)"gtk-index")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_INDENT</NAME>
<DEPRECATED/>
#define GTK_STOCK_INDENT           ((GtkStock)"gtk-indent")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_INFO</NAME>
<DEPRECATED/>
#define GTK_STOCK_INFO             ((GtkStock)"gtk-info")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ITALIC</NAME>
<DEPRECATED/>
#define GTK_STOCK_ITALIC           ((GtkStock)"gtk-italic")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_JUMP_TO</NAME>
<DEPRECATED/>
#define GTK_STOCK_JUMP_TO          ((GtkStock)"gtk-jump-to")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_JUSTIFY_CENTER</NAME>
<DEPRECATED/>
#define GTK_STOCK_JUSTIFY_CENTER   ((GtkStock)"gtk-justify-center")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_JUSTIFY_FILL</NAME>
<DEPRECATED/>
#define GTK_STOCK_JUSTIFY_FILL     ((GtkStock)"gtk-justify-fill")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_JUSTIFY_LEFT</NAME>
<DEPRECATED/>
#define GTK_STOCK_JUSTIFY_LEFT     ((GtkStock)"gtk-justify-left")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_JUSTIFY_RIGHT</NAME>
<DEPRECATED/>
#define GTK_STOCK_JUSTIFY_RIGHT    ((GtkStock)"gtk-justify-right")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_LEAVE_FULLSCREEN</NAME>
<DEPRECATED/>
#define GTK_STOCK_LEAVE_FULLSCREEN ((GtkStock)"gtk-leave-fullscreen")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MISSING_IMAGE</NAME>
<DEPRECATED/>
#define GTK_STOCK_MISSING_IMAGE    ((GtkStock)"gtk-missing-image")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_FORWARD</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_FORWARD    ((GtkStock)"gtk-media-forward")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_NEXT</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_NEXT       ((GtkStock)"gtk-media-next")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_PAUSE</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_PAUSE      ((GtkStock)"gtk-media-pause")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_PLAY</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_PLAY       ((GtkStock)"gtk-media-play")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_PREVIOUS</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_PREVIOUS   ((GtkStock)"gtk-media-previous")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_RECORD</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_RECORD     ((GtkStock)"gtk-media-record")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_REWIND</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_REWIND     ((GtkStock)"gtk-media-rewind")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_MEDIA_STOP</NAME>
<DEPRECATED/>
#define GTK_STOCK_MEDIA_STOP       ((GtkStock)"gtk-media-stop")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_NETWORK</NAME>
<DEPRECATED/>
#define GTK_STOCK_NETWORK          ((GtkStock)"gtk-network")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_NEW</NAME>
<DEPRECATED/>
#define GTK_STOCK_NEW              ((GtkStock)"gtk-new")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_NO</NAME>
<DEPRECATED/>
#define GTK_STOCK_NO               ((GtkStock)"gtk-no")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_OK</NAME>
<DEPRECATED/>
#define GTK_STOCK_OK               ((GtkStock)"gtk-ok")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_OPEN</NAME>
<DEPRECATED/>
#define GTK_STOCK_OPEN             ((GtkStock)"gtk-open")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ORIENTATION_PORTRAIT</NAME>
<DEPRECATED/>
#define GTK_STOCK_ORIENTATION_PORTRAIT ((GtkStock)"gtk-orientation-portrait")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ORIENTATION_LANDSCAPE</NAME>
<DEPRECATED/>
#define GTK_STOCK_ORIENTATION_LANDSCAPE ((GtkStock)"gtk-orientation-landscape")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE</NAME>
<DEPRECATED/>
#define GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE ((GtkStock)"gtk-orientation-reverse-landscape")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT</NAME>
<DEPRECATED/>
#define GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT ((GtkStock)"gtk-orientation-reverse-portrait")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PAGE_SETUP</NAME>
<DEPRECATED/>
#define GTK_STOCK_PAGE_SETUP       ((GtkStock)"gtk-page-setup")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PASTE</NAME>
<DEPRECATED/>
#define GTK_STOCK_PASTE            ((GtkStock)"gtk-paste")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PREFERENCES</NAME>
<DEPRECATED/>
#define GTK_STOCK_PREFERENCES      ((GtkStock)"gtk-preferences")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PRINT</NAME>
<DEPRECATED/>
#define GTK_STOCK_PRINT            ((GtkStock)"gtk-print")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PRINT_ERROR</NAME>
<DEPRECATED/>
#define GTK_STOCK_PRINT_ERROR      ((GtkStock)"gtk-print-error")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PRINT_PAUSED</NAME>
<DEPRECATED/>
#define GTK_STOCK_PRINT_PAUSED     ((GtkStock)"gtk-print-paused")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PRINT_PREVIEW</NAME>
<DEPRECATED/>
#define GTK_STOCK_PRINT_PREVIEW    ((GtkStock)"gtk-print-preview")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PRINT_REPORT</NAME>
<DEPRECATED/>
#define GTK_STOCK_PRINT_REPORT     ((GtkStock)"gtk-print-report")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PRINT_WARNING</NAME>
<DEPRECATED/>
#define GTK_STOCK_PRINT_WARNING    ((GtkStock)"gtk-print-warning")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_PROPERTIES</NAME>
<DEPRECATED/>
#define GTK_STOCK_PROPERTIES       ((GtkStock)"gtk-properties")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_QUIT</NAME>
<DEPRECATED/>
#define GTK_STOCK_QUIT             ((GtkStock)"gtk-quit")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_REDO</NAME>
<DEPRECATED/>
#define GTK_STOCK_REDO             ((GtkStock)"gtk-redo")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_REFRESH</NAME>
<DEPRECATED/>
#define GTK_STOCK_REFRESH          ((GtkStock)"gtk-refresh")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_REMOVE</NAME>
<DEPRECATED/>
#define GTK_STOCK_REMOVE           ((GtkStock)"gtk-remove")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_REVERT_TO_SAVED</NAME>
<DEPRECATED/>
#define GTK_STOCK_REVERT_TO_SAVED  ((GtkStock)"gtk-revert-to-saved")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SAVE</NAME>
<DEPRECATED/>
#define GTK_STOCK_SAVE             ((GtkStock)"gtk-save")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SAVE_AS</NAME>
<DEPRECATED/>
#define GTK_STOCK_SAVE_AS          ((GtkStock)"gtk-save-as")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SELECT_ALL</NAME>
<DEPRECATED/>
#define GTK_STOCK_SELECT_ALL       ((GtkStock)"gtk-select-all")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SELECT_COLOR</NAME>
<DEPRECATED/>
#define GTK_STOCK_SELECT_COLOR     ((GtkStock)"gtk-select-color")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SELECT_FONT</NAME>
<DEPRECATED/>
#define GTK_STOCK_SELECT_FONT      ((GtkStock)"gtk-select-font")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SORT_ASCENDING</NAME>
<DEPRECATED/>
#define GTK_STOCK_SORT_ASCENDING   ((GtkStock)"gtk-sort-ascending")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SORT_DESCENDING</NAME>
<DEPRECATED/>
#define GTK_STOCK_SORT_DESCENDING  ((GtkStock)"gtk-sort-descending")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_SPELL_CHECK</NAME>
<DEPRECATED/>
#define GTK_STOCK_SPELL_CHECK      ((GtkStock)"gtk-spell-check")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_STOP</NAME>
<DEPRECATED/>
#define GTK_STOCK_STOP             ((GtkStock)"gtk-stop")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_STRIKETHROUGH</NAME>
<DEPRECATED/>
#define GTK_STOCK_STRIKETHROUGH    ((GtkStock)"gtk-strikethrough")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_UNDELETE</NAME>
<DEPRECATED/>
#define GTK_STOCK_UNDELETE         ((GtkStock)"gtk-undelete")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_UNDERLINE</NAME>
<DEPRECATED/>
#define GTK_STOCK_UNDERLINE        ((GtkStock)"gtk-underline")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_UNDO</NAME>
<DEPRECATED/>
#define GTK_STOCK_UNDO             ((GtkStock)"gtk-undo")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_UNINDENT</NAME>
<DEPRECATED/>
#define GTK_STOCK_UNINDENT         ((GtkStock)"gtk-unindent")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_YES</NAME>
<DEPRECATED/>
#define GTK_STOCK_YES              ((GtkStock)"gtk-yes")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ZOOM_100</NAME>
<DEPRECATED/>
#define GTK_STOCK_ZOOM_100         ((GtkStock)"gtk-zoom-100")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ZOOM_FIT</NAME>
<DEPRECATED/>
#define GTK_STOCK_ZOOM_FIT         ((GtkStock)"gtk-zoom-fit")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ZOOM_IN</NAME>
<DEPRECATED/>
#define GTK_STOCK_ZOOM_IN          ((GtkStock)"gtk-zoom-in")
</MACRO>
<MACRO>
<NAME>GTK_STOCK_ZOOM_OUT</NAME>
<DEPRECATED/>
#define GTK_STOCK_ZOOM_OUT         ((GtkStock)"gtk-zoom-out")
</MACRO>
<MACRO>
<NAME>GTK_TYPE_STYLE</NAME>
#define GTK_TYPE_STYLE              (gtk_style_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STYLE</NAME>
#define GTK_STYLE(object)           (G_TYPE_CHECK_INSTANCE_CAST ((object), GTK_TYPE_STYLE, GtkStyle))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_CLASS</NAME>
#define GTK_STYLE_CLASS(klass)      (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_STYLE, GtkStyleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE</NAME>
#define GTK_IS_STYLE(object)        (G_TYPE_CHECK_INSTANCE_TYPE ((object), GTK_TYPE_STYLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE_CLASS</NAME>
#define GTK_IS_STYLE_CLASS(klass)   (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_STYLE))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_GET_CLASS</NAME>
#define GTK_STYLE_GET_CLASS(obj)    (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_STYLE, GtkStyleClass))
</MACRO>
<ENUM>
<NAME>GtkExpanderStyle</NAME>
typedef enum
{
  GTK_EXPANDER_COLLAPSED,
  GTK_EXPANDER_SEMI_COLLAPSED,
  GTK_EXPANDER_SEMI_EXPANDED,
  GTK_EXPANDER_EXPANDED
} GtkExpanderStyle;
</ENUM>
<MACRO>
<NAME>GTK_STYLE_ATTACHED</NAME>
#define GTK_STYLE_ATTACHED(style)       (GTK_STYLE (style)->attach_count > 0)
</MACRO>
<STRUCT>
<NAME>GtkStyle</NAME>
struct _GtkStyle
{
  /*< private >*/
  GObject parent_instance;

  /*< public >*/

  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor light[5];
  GdkColor dark[5];
  GdkColor mid[5];
  GdkColor text[5];
  GdkColor base[5];
  GdkColor text_aa[5];          /* Halfway between text/base */

  GdkColor black;
  GdkColor white;
  PangoFontDescription *font_desc;

  gint xthickness;
  gint ythickness;

  cairo_pattern_t *background[5];

  /*< private >*/

  gint attach_count;

  GdkVisual *visual;
  PangoFontDescription *private_font_desc; /* Font description for style->private_font or %NULL */

  /* the RcStyle from which this style was created */
  GtkRcStyle     *rc_style;

  GSList         *styles;         /* of type GtkStyle* */
  GArray         *property_cache;
  GSList         *icon_factories; /* of type GtkIconFactory* */
};
</STRUCT>
<STRUCT>
<NAME>GtkStyleClass</NAME>
struct _GtkStyleClass
{
  GObjectClass parent_class;

  /*< public >*/

  /* Initialize for a particular visual. style->visual
   * will have been set at this point. Will typically chain
   * to parent.
   */
  void (*realize)               (GtkStyle               *style);

  /* Clean up for a particular visual. Will typically chain
   * to parent.
   */
  void (*unrealize)             (GtkStyle               *style);

  /* Make style an exact duplicate of src.
   */
  void (*copy)                  (GtkStyle               *style,
                                 GtkStyle               *src);

  /* Create an empty style of the same type as this style.
   * The default implementation, which does
   * g_object_new (G_OBJECT_TYPE (style), NULL);
   * should work in most cases.
   */
  GtkStyle *(*clone)             (GtkStyle               *style);

  /* Initialize the GtkStyle with the values in the GtkRcStyle.
   * should chain to the parent implementation.
   */
  void     (*init_from_rc)      (GtkStyle               *style,
                                 GtkRcStyle             *rc_style);

  void (*set_background)        (GtkStyle               *style,
                                 GdkWindow              *window,
                                 GtkStateType            state_type);


  GdkPixbuf * (* render_icon)   (GtkStyle               *style,
                                 const GtkIconSource    *source,
                                 GtkTextDirection        direction,
                                 GtkStateType            state,
                                 GtkIconSize             size,
                                 GtkWidget              *widget,
                                 const gchar            *detail);

  /* Drawing functions
   */

  void (*draw_hline)            (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x1,
                                 gint                    x2,
                                 gint                    y);
  void (*draw_vline)            (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    y1_,
                                 gint                    y2_,
                                 gint                    x);
  void (*draw_shadow)           (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_arrow)            (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 GtkArrowType            arrow_type,
                                 gboolean                fill,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_diamond)          (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_box)              (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_flat_box)         (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_check)            (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_option)           (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_tab)              (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_shadow_gap)       (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height,
                                 GtkPositionType         gap_side,
                                 gint                    gap_x,
                                 gint                    gap_width);
  void (*draw_box_gap)          (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height,
                                 GtkPositionType         gap_side,
                                 gint                    gap_x,
                                 gint                    gap_width);
  void (*draw_extension)        (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height,
                                 GtkPositionType         gap_side);
  void (*draw_focus)            (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_slider)           (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height,
                                 GtkOrientation          orientation);
  void (*draw_handle)           (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkShadowType           shadow_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height,
                                 GtkOrientation          orientation);

  void (*draw_expander)         (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 GtkExpanderStyle        expander_style);
  void (*draw_layout)           (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 gboolean                use_text,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 gint                    x,
                                 gint                    y,
                                 PangoLayout            *layout);
  void (*draw_resize_grip)      (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 GdkWindowEdge           edge,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);
  void (*draw_spinner)          (GtkStyle               *style,
                                 cairo_t                *cr,
                                 GtkStateType            state_type,
                                 GtkWidget              *widget,
                                 const gchar            *detail,
                                 guint                   step,
                                 gint                    x,
                                 gint                    y,
                                 gint                    width,
                                 gint                    height);

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1)  (void);
  void (*_gtk_reserved2)  (void);
  void (*_gtk_reserved3)  (void);
  void (*_gtk_reserved4)  (void);
  void (*_gtk_reserved5)  (void);
  void (*_gtk_reserved6)  (void);
  void (*_gtk_reserved7)  (void);
  void (*_gtk_reserved8)  (void);
  void (*_gtk_reserved9)  (void);
  void (*_gtk_reserved10) (void);
  void (*_gtk_reserved11) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_style_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType      </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_new</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_copy</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle * </RETURNS>
GtkStyle     *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_attach</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle * </RETURNS>
GtkStyle     *style, GdkWindow    *window
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_detach</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
GtkStyle     *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_set_background</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
GtkStyle     *style, GdkWindow    *window, GtkStateType  state_type
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_apply_default_background</NAME>
<DEPRECATED/>
<RETURNS>void       </RETURNS>
GtkStyle     *style, cairo_t      *cr, GdkWindow    *window, GtkStateType  state_type, gint          x, gint          y, gint          width, gint          height
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_lookup_icon_set</NAME>
<DEPRECATED/>
<RETURNS>GtkIconSet * </RETURNS>
GtkStyle     *style, const gchar  *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_lookup_color</NAME>
<DEPRECATED/>
<RETURNS>gboolean     </RETURNS>
GtkStyle     *style, const gchar  *color_name, GdkColor     *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_render_icon</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf *  </RETURNS>
GtkStyle            *style, const GtkIconSource *source, GtkTextDirection     direction, GtkStateType         state, GtkIconSize          size, GtkWidget           *widget, const gchar         *detail
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_hline</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkWidget          *widget, const gchar        *detail, gint                x1, gint                x2, gint                y
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_vline</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkWidget          *widget, const gchar        *detail, gint                y1_, gint                y2_, gint                x
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_shadow</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_arrow</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, GtkArrowType        arrow_type, gboolean            fill, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_diamond</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_box</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_flat_box</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_check</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_option</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_tab</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_shadow_gap</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height, GtkPositionType     gap_side, gint                gap_x, gint                gap_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_box_gap</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height, GtkPositionType     gap_side, gint                gap_x, gint                gap_width
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_extension</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height, GtkPositionType     gap_side
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_focus</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_slider</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height, GtkOrientation      orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_handle</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkShadowType       shadow_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, gint                width, gint                height, GtkOrientation      orientation
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_expander</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, GtkExpanderStyle    expander_style
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_layout</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, gboolean            use_text, GtkWidget          *widget, const gchar        *detail, gint                x, gint                y, PangoLayout        *layout
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_resize_grip</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkWidget          *widget, const gchar        *detail, GdkWindowEdge       edge, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_paint_spinner</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle           *style, cairo_t            *cr, GtkStateType        state_type, GtkWidget          *widget, const gchar        *detail, guint               step, gint                x, gint                y, gint                width, gint                height
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_get_style_property</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle    *style, GType        widget_type, const gchar *property_name, GValue      *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_get_valist</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle    *style, GType        widget_type, const gchar *first_property_name, va_list      var_args
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_get</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkStyle    *style, GType        widget_type, const gchar *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_has_context</NAME>
<DEPRECATED/>
<RETURNS>gboolean     </RETURNS>
GtkStyle *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_style_attach</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget     *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_has_rc_style</NAME>
<DEPRECATED/>
<RETURNS>gboolean     </RETURNS>
GtkWidget            *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_set_style</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, GtkStyle             *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_ensure_style</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_style</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle  *  </RETURNS>
GtkWidget            *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_style</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, GtkRcStyle           *style
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_modifier_style</NAME>
<DEPRECATED/>
<RETURNS>GtkRcStyle  *</RETURNS>
GtkWidget            *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_fg</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, GtkStateType          state, const GdkColor       *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_bg</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, GtkStateType          state, const GdkColor       *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_text</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, GtkStateType          state, const GdkColor       *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_base</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, GtkStateType          state, const GdkColor       *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_cursor</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, const GdkColor       *primary, const GdkColor       *secondary
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_modify_font</NAME>
<DEPRECATED/>
<RETURNS>void         </RETURNS>
GtkWidget            *widget, PangoFontDescription *font_desc
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_reset_rc_styles</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWidget      *widget
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_get_default_style</NAME>
<DEPRECATED/>
<RETURNS>GtkStyle *  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_path</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWidget *widget, guint     *path_length, gchar    **path, gchar    **path_reversed
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_class_path</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkWidget *widget, guint     *path_length, gchar    **path, gchar    **path_reversed
</FUNCTION>
<FUNCTION>
<NAME>gtk_widget_render_icon</NAME>
<DEPRECATED/>
<RETURNS>GdkPixbuf  *</RETURNS>
GtkWidget   *widget, const gchar *stock_id, GtkIconSize  size, const gchar *detail
</FUNCTION>
<STRUCT>
<NAME>GtkRcProperty</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkThemeEngine</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_STYLE_PROPERTIES</NAME>
#define GTK_TYPE_STYLE_PROPERTIES         (gtk_style_properties_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTIES</NAME>
#define GTK_STYLE_PROPERTIES(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_STYLE_PROPERTIES, GtkStyleProperties))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTIES_CLASS</NAME>
#define GTK_STYLE_PROPERTIES_CLASS(c)     (G_TYPE_CHECK_CLASS_CAST    ((c), GTK_TYPE_STYLE_PROPERTIES, GtkStylePropertiesClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE_PROPERTIES</NAME>
#define GTK_IS_STYLE_PROPERTIES(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_STYLE_PROPERTIES))
</MACRO>
<MACRO>
<NAME>GTK_IS_STYLE_PROPERTIES_CLASS</NAME>
#define GTK_IS_STYLE_PROPERTIES_CLASS(c)  (G_TYPE_CHECK_CLASS_TYPE    ((c), GTK_TYPE_STYLE_PROPERTIES))
</MACRO>
<MACRO>
<NAME>GTK_STYLE_PROPERTIES_GET_CLASS</NAME>
#define GTK_STYLE_PROPERTIES_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS  ((o), GTK_TYPE_STYLE_PROPERTIES, GtkStylePropertiesClass))
</MACRO>
<STRUCT>
<NAME>GtkStyleProperties</NAME>
struct _GtkStyleProperties
{
  /*< private >*/
  GObject parent_object;
  GtkStylePropertiesPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkStylePropertiesClass</NAME>
struct _GtkStylePropertiesClass
{
  /*< private >*/
  GObjectClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<USER_FUNCTION>
<NAME>GtkStylePropertyParser</NAME>
<RETURNS>gboolean </RETURNS>
const gchar  *string,
                                             GValue       *value,
                                             GError      **error
</USER_FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_register_property</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStylePropertyParser  parse_func, GParamSpec             *pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_lookup_property</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
const gchar             *property_name, GtkStylePropertyParser  *parse_func, GParamSpec             **pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_new</NAME>
<DEPRECATED/>
<RETURNS>GtkStyleProperties  * </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_map_color</NAME>
<DEPRECATED/>
<RETURNS>void                </RETURNS>
GtkStyleProperties *props, const gchar        *name, GtkSymbolicColor   *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_lookup_color</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
GtkStyleProperties *props, const gchar        *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_set_property</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties *props, const gchar        *property, GtkStateFlags       state, const GValue       *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_set_valist</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties *props, GtkStateFlags       state, va_list             args
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_set</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties *props, GtkStateFlags       state, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_get_property</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkStyleProperties *props, const gchar        *property, GtkStateFlags       state, GValue             *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_get_valist</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties *props, GtkStateFlags       state, va_list             args
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_get</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties *props, GtkStateFlags       state, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_unset_property</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties *props, const gchar        *property, GtkStateFlags       state
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_clear</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties  *props
</FUNCTION>
<FUNCTION>
<NAME>gtk_style_properties_merge</NAME>
<DEPRECATED/>
<RETURNS>void      </RETURNS>
GtkStyleProperties       *props, const GtkStyleProperties *props_to_merge, gboolean                  replace
</FUNCTION>
<STRUCT>
<NAME>GtkGradient</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkStylePropertiesPrivate</NAME>
</STRUCT>
<STRUCT>
<NAME>GtkSymbolicColor</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_SYMBOLIC_COLOR</NAME>
#define GTK_TYPE_SYMBOLIC_COLOR (gtk_symbolic_color_get_type ())
</MACRO>
<FUNCTION>
<NAME>gtk_symbolic_color_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType               </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_new_literal</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
const GdkRGBA      *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_new_name</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
const gchar        *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_new_shade</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
GtkSymbolicColor   *color, gdouble             factor
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_new_alpha</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
GtkSymbolicColor   *color, gdouble             factor
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_new_mix</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
GtkSymbolicColor   *color1, GtkSymbolicColor   *color2, gdouble             factor
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_new_win32</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
const gchar        *theme_class, gint                id
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_ref</NAME>
<DEPRECATED/>
<RETURNS>GtkSymbolicColor  * </RETURNS>
GtkSymbolicColor   *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_unref</NAME>
<DEPRECATED/>
<RETURNS>void                </RETURNS>
GtkSymbolicColor   *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_to_string</NAME>
<DEPRECATED/>
<RETURNS>char  *             </RETURNS>
GtkSymbolicColor   *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_symbolic_color_resolve</NAME>
<DEPRECATED/>
<RETURNS>gboolean            </RETURNS>
GtkSymbolicColor   *color, GtkStyleProperties *props, GdkRGBA            *resolved_color
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TABLE</NAME>
#define GTK_TYPE_TABLE			(gtk_table_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TABLE</NAME>
#define GTK_TABLE(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TABLE, GtkTable))
</MACRO>
<MACRO>
<NAME>GTK_TABLE_CLASS</NAME>
#define GTK_TABLE_CLASS(klass)		(G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TABLE, GtkTableClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TABLE</NAME>
#define GTK_IS_TABLE(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TABLE))
</MACRO>
<MACRO>
<NAME>GTK_IS_TABLE_CLASS</NAME>
#define GTK_IS_TABLE_CLASS(klass)	(G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TABLE))
</MACRO>
<MACRO>
<NAME>GTK_TABLE_GET_CLASS</NAME>
#define GTK_TABLE_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TABLE, GtkTableClass))
</MACRO>
<STRUCT>
<NAME>GtkTable</NAME>
struct _GtkTable
{
  GtkContainer container;

  /*< private >*/
  GtkTablePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTableClass</NAME>
struct _GtkTableClass
{
  GtkContainerClass parent_class;

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GtkTableChild</NAME>
struct _GtkTableChild
{
  GtkWidget *widget;
  guint16 left_attach;
  guint16 right_attach;
  guint16 top_attach;
  guint16 bottom_attach;
  guint16 xpadding;
  guint16 ypadding;
  guint xexpand : 1;
  guint yexpand : 1;
  guint xshrink : 1;
  guint yshrink : 1;
  guint xfill : 1;
  guint yfill : 1;
};
</STRUCT>
<STRUCT>
<NAME>GtkTableRowCol</NAME>
struct _GtkTableRowCol
{
  guint16 requisition;
  guint16 allocation;
  guint16 spacing;
  guint need_expand : 1;
  guint need_shrink : 1;
  guint expand : 1;
  guint shrink : 1;
  guint empty : 1;
};
</STRUCT>
<ENUM>
<NAME>GtkAttachOptions</NAME>
typedef enum
{
  GTK_EXPAND = 1 << 0,
  GTK_SHRINK = 1 << 1,
  GTK_FILL   = 1 << 2
} GtkAttachOptions;
</ENUM>
<FUNCTION>
<NAME>gtk_table_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
guint		rows, guint		columns, gboolean		homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_resize</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, guint            rows, guint            columns
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_attach</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, GtkWidget       *child, guint		left_attach, guint		right_attach, guint		top_attach, guint		bottom_attach, GtkAttachOptions xoptions, GtkAttachOptions yoptions, guint		xpadding, guint		ypadding
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_attach_defaults</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, GtkWidget       *widget, guint		left_attach, guint		right_attach, guint		top_attach, guint		bottom_attach
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_set_row_spacing</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, guint		row, guint		spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_get_row_spacing</NAME>
<DEPRECATED/>
<RETURNS>guint       </RETURNS>
GtkTable        *table, guint            row
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_set_col_spacing</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, guint		column, guint		spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_get_col_spacing</NAME>
<DEPRECATED/>
<RETURNS>guint       </RETURNS>
GtkTable        *table, guint            column
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_set_row_spacings</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, guint		spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_get_default_row_spacing</NAME>
<DEPRECATED/>
<RETURNS>guint       </RETURNS>
GtkTable        *table
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_set_col_spacings</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, guint		spacing
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_get_default_col_spacing</NAME>
<DEPRECATED/>
<RETURNS>guint       </RETURNS>
GtkTable        *table
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_set_homogeneous</NAME>
<DEPRECATED/>
<RETURNS>void 	   </RETURNS>
GtkTable	       *table, gboolean		homogeneous
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_get_homogeneous</NAME>
<DEPRECATED/>
<RETURNS>gboolean    </RETURNS>
GtkTable        *table
</FUNCTION>
<FUNCTION>
<NAME>gtk_table_get_size</NAME>
<DEPRECATED/>
<RETURNS>void        </RETURNS>
GtkTable        *table, guint           *rows, guint           *columns
</FUNCTION>
<STRUCT>
<NAME>GtkTablePrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_TEAROFF_MENU_ITEM</NAME>
#define GTK_TYPE_TEAROFF_MENU_ITEM	      (gtk_tearoff_menu_item_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TEAROFF_MENU_ITEM</NAME>
#define GTK_TEAROFF_MENU_ITEM(obj)	      (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItem))
</MACRO>
<MACRO>
<NAME>GTK_TEAROFF_MENU_ITEM_CLASS</NAME>
#define GTK_TEAROFF_MENU_ITEM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItemClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEAROFF_MENU_ITEM</NAME>
#define GTK_IS_TEAROFF_MENU_ITEM(obj)	      (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TEAROFF_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_IS_TEAROFF_MENU_ITEM_CLASS</NAME>
#define GTK_IS_TEAROFF_MENU_ITEM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TEAROFF_MENU_ITEM))
</MACRO>
<MACRO>
<NAME>GTK_TEAROFF_MENU_ITEM_GET_CLASS</NAME>
#define GTK_TEAROFF_MENU_ITEM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_TEAROFF_MENU_ITEM, GtkTearoffMenuItemClass))
</MACRO>
<STRUCT>
<NAME>GtkTearoffMenuItem</NAME>
struct _GtkTearoffMenuItem
{
  GtkMenuItem menu_item;

  /*< private >*/
  GtkTearoffMenuItemPrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkTearoffMenuItemClass</NAME>
struct _GtkTearoffMenuItemClass
{
  GtkMenuItemClass parent_class;

  /*< private >*/

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_tearoff_menu_item_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType 	   </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_tearoff_menu_item_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
<STRUCT>
<NAME>GtkTearoffMenuItemPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_THEMING_ENGINE</NAME>
#define GTK_TYPE_THEMING_ENGINE         (gtk_theming_engine_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_THEMING_ENGINE</NAME>
#define GTK_THEMING_ENGINE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), GTK_TYPE_THEMING_ENGINE, GtkThemingEngine))
</MACRO>
<MACRO>
<NAME>GTK_THEMING_ENGINE_CLASS</NAME>
#define GTK_THEMING_ENGINE_CLASS(c)     (G_TYPE_CHECK_CLASS_CAST    ((c), GTK_TYPE_THEMING_ENGINE, GtkThemingEngineClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_THEMING_ENGINE</NAME>
#define GTK_IS_THEMING_ENGINE(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), GTK_TYPE_THEMING_ENGINE))
</MACRO>
<MACRO>
<NAME>GTK_IS_THEMING_ENGINE_CLASS</NAME>
#define GTK_IS_THEMING_ENGINE_CLASS(c)  (G_TYPE_CHECK_CLASS_TYPE    ((c), GTK_TYPE_THEMING_ENGINE))
</MACRO>
<MACRO>
<NAME>GTK_THEMING_ENGINE_GET_CLASS</NAME>
#define GTK_THEMING_ENGINE_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS  ((o), GTK_TYPE_THEMING_ENGINE, GtkThemingEngineClass))
</MACRO>
<TYPEDEF>
<NAME>GtkThemingEnginePrivate</NAME>
typedef struct GtkThemingEnginePrivate GtkThemingEnginePrivate;
</TYPEDEF>
<STRUCT>
<NAME>GtkThemingEngine</NAME>
struct _GtkThemingEngine
{
  GObject parent_object;
  GtkThemingEnginePrivate *priv;
};
</STRUCT>
<STRUCT>
<NAME>GtkThemingEngineClass</NAME>
struct _GtkThemingEngineClass
{
  GObjectClass parent_class;

  /*< public >*/

  void (* render_line) (GtkThemingEngine *engine,
                        cairo_t          *cr,
                        gdouble           x0,
                        gdouble           y0,
                        gdouble           x1,
                        gdouble           y1);
  void (* render_background) (GtkThemingEngine *engine,
                              cairo_t          *cr,
                              gdouble           x,
                              gdouble           y,
                              gdouble           width,
                              gdouble           height);
  void (* render_frame) (GtkThemingEngine *engine,
                         cairo_t          *cr,
                         gdouble           x,
                         gdouble           y,
                         gdouble           width,
                         gdouble           height);
  void (* render_frame_gap) (GtkThemingEngine *engine,
                             cairo_t          *cr,
                             gdouble           x,
                             gdouble           y,
                             gdouble           width,
                             gdouble           height,
                             GtkPositionType   gap_side,
                             gdouble           xy0_gap,
                             gdouble           xy1_gap);
  void (* render_extension) (GtkThemingEngine *engine,
                             cairo_t          *cr,
                             gdouble           x,
                             gdouble           y,
                             gdouble           width,
                             gdouble           height,
                             GtkPositionType   gap_side);
  void (* render_check) (GtkThemingEngine *engine,
                         cairo_t          *cr,
                         gdouble           x,
                         gdouble           y,
                         gdouble           width,
                         gdouble           height);
  void (* render_option) (GtkThemingEngine *engine,
                          cairo_t          *cr,
                          gdouble           x,
                          gdouble           y,
                          gdouble           width,
                          gdouble           height);
  void (* render_arrow) (GtkThemingEngine *engine,
                         cairo_t          *cr,
                         gdouble           angle,
                         gdouble           x,
                         gdouble           y,
                         gdouble           size);
  void (* render_expander) (GtkThemingEngine *engine,
                            cairo_t          *cr,
                            gdouble           x,
                            gdouble           y,
                            gdouble           width,
                            gdouble           height);
  void (* render_focus) (GtkThemingEngine *engine,
                         cairo_t          *cr,
                         gdouble           x,
                         gdouble           y,
                         gdouble           width,
                         gdouble           height);
  void (* render_layout) (GtkThemingEngine *engine,
                          cairo_t          *cr,
                          gdouble           x,
                          gdouble           y,
                          PangoLayout      *layout);
  void (* render_slider) (GtkThemingEngine *engine,
                          cairo_t          *cr,
                          gdouble           x,
                          gdouble           y,
                          gdouble           width,
                          gdouble           height,
                          GtkOrientation    orientation);
  void (* render_handle)    (GtkThemingEngine *engine,
                             cairo_t          *cr,
                             gdouble           x,
                             gdouble           y,
                             gdouble           width,
                             gdouble           height);
  void (* render_activity) (GtkThemingEngine *engine,
                            cairo_t          *cr,
                            gdouble           x,
                            gdouble           y,
                            gdouble           width,
                            gdouble           height);

  GdkPixbuf * (* render_icon_pixbuf) (GtkThemingEngine    *engine,
                                      const GtkIconSource *source,
                                      GtkIconSize          size);
  void (* render_icon) (GtkThemingEngine *engine,
                        cairo_t          *cr,
			GdkPixbuf        *pixbuf,
                        gdouble           x,
                        gdouble           y);
  void (* render_icon_surface) (GtkThemingEngine *engine,
				cairo_t          *cr,
				cairo_surface_t  *surface,
				gdouble           x,
				gdouble           y);

  /*< private >*/
  gpointer padding[14];
};
</STRUCT>
<FUNCTION>
<NAME>gtk_theming_engine_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_register_property</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
const gchar            *name_space, GtkStylePropertyParser  parse_func, GParamSpec             *pspec
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_property</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, const gchar      *property, GtkStateFlags     state, GValue           *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_valist</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, va_list           args
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_style_property</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, const gchar      *property_name, GValue           *value
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_style_valist</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, va_list           args
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_style</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, ...
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_lookup_color</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkThemingEngine *engine, const gchar      *color_name, GdkRGBA          *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_path</NAME>
<DEPRECATED/>
<RETURNS>const GtkWidgetPath  * </RETURNS>
GtkThemingEngine *engine
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_has_class</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkThemingEngine *engine, const gchar      *style_class
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_has_region</NAME>
<DEPRECATED/>
<RETURNS>gboolean  </RETURNS>
GtkThemingEngine *engine, const gchar      *style_region, GtkRegionFlags   *flags
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_state</NAME>
<DEPRECATED/>
<RETURNS>GtkStateFlags  </RETURNS>
GtkThemingEngine *engine
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_state_is_running</NAME>
<DEPRECATED/>
<RETURNS>gboolean       </RETURNS>
GtkThemingEngine *engine, GtkStateType      state, gdouble          *progress
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_direction</NAME>
<DEPRECATED/>
<RETURNS>GtkTextDirection  </RETURNS>
GtkThemingEngine *engine
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_junction_sides</NAME>
<DEPRECATED/>
<RETURNS>GtkJunctionSides  </RETURNS>
GtkThemingEngine *engine
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_color</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, GdkRGBA          *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_background_color</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, GdkRGBA          *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_border_color</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, GdkRGBA          *color
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_border</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, GtkBorder        *border
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_padding</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, GtkBorder        *padding
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_margin</NAME>
<DEPRECATED/>
<RETURNS>void  </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state, GtkBorder        *margin
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_font</NAME>
<DEPRECATED/>
<RETURNS>const PangoFontDescription  * </RETURNS>
GtkThemingEngine *engine, GtkStateFlags     state
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_load</NAME>
<DEPRECATED/>
<RETURNS>GtkThemingEngine  * </RETURNS>
const gchar *name
</FUNCTION>
<FUNCTION>
<NAME>gtk_theming_engine_get_screen</NAME>
<DEPRECATED/>
<RETURNS>GdkScreen  * </RETURNS>
GtkThemingEngine *engine
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_TOGGLE_ACTION</NAME>
#define GTK_TYPE_TOGGLE_ACTION            (gtk_toggle_action_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_ACTION</NAME>
#define GTK_TOGGLE_ACTION(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_TOGGLE_ACTION, GtkToggleAction))
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_ACTION_CLASS</NAME>
#define GTK_TOGGLE_ACTION_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_TOGGLE_ACTION, GtkToggleActionClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOGGLE_ACTION</NAME>
#define GTK_IS_TOGGLE_ACTION(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_TOGGLE_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_IS_TOGGLE_ACTION_CLASS</NAME>
#define GTK_IS_TOGGLE_ACTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_TOGGLE_ACTION))
</MACRO>
<MACRO>
<NAME>GTK_TOGGLE_ACTION_GET_CLASS</NAME>
#define GTK_TOGGLE_ACTION_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_TOGGLE_ACTION, GtkToggleActionClass))
</MACRO>
<STRUCT>
<NAME>GtkToggleAction</NAME>
struct _GtkToggleAction
{
  GtkAction parent;

  /*< private >*/
  GtkToggleActionPrivate *private_data;
};
</STRUCT>
<STRUCT>
<NAME>GtkToggleActionClass</NAME>
struct _GtkToggleActionClass
{
  GtkActionClass parent_class;

  void (* toggled) (GtkToggleAction *action);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<FUNCTION>
<NAME>gtk_toggle_action_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType             </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_action_new</NAME>
<DEPRECATED/>
<RETURNS>GtkToggleAction  *</RETURNS>
const gchar     *name, const gchar     *label, const gchar     *tooltip, const gchar     *stock_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_action_toggled</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkToggleAction *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_action_set_active</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkToggleAction *action, gboolean         is_active
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_action_get_active</NAME>
<DEPRECATED/>
<RETURNS>gboolean          </RETURNS>
GtkToggleAction *action
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_action_set_draw_as_radio</NAME>
<DEPRECATED/>
<RETURNS>void              </RETURNS>
GtkToggleAction *action, gboolean         draw_as_radio
</FUNCTION>
<FUNCTION>
<NAME>gtk_toggle_action_get_draw_as_radio</NAME>
<DEPRECATED/>
<RETURNS>gboolean          </RETURNS>
GtkToggleAction *action
</FUNCTION>
<STRUCT>
<NAME>GtkToggleActionPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_UI_MANAGER</NAME>
#define GTK_TYPE_UI_MANAGER            (gtk_ui_manager_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_UI_MANAGER</NAME>
#define GTK_UI_MANAGER(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_UI_MANAGER, GtkUIManager))
</MACRO>
<MACRO>
<NAME>GTK_UI_MANAGER_CLASS</NAME>
#define GTK_UI_MANAGER_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_UI_MANAGER, GtkUIManagerClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_UI_MANAGER</NAME>
#define GTK_IS_UI_MANAGER(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_UI_MANAGER))
</MACRO>
<MACRO>
<NAME>GTK_IS_UI_MANAGER_CLASS</NAME>
#define GTK_IS_UI_MANAGER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_UI_MANAGER))
</MACRO>
<MACRO>
<NAME>GTK_UI_MANAGER_GET_CLASS</NAME>
#define GTK_UI_MANAGER_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GTK_TYPE_UI_MANAGER, GtkUIManagerClass))
</MACRO>
<STRUCT>
<NAME>GtkUIManager</NAME>
struct _GtkUIManager {
  GObject parent;

  /*< private >*/
  GtkUIManagerPrivate *private_data;
};
</STRUCT>
<STRUCT>
<NAME>GtkUIManagerClass</NAME>
struct _GtkUIManagerClass {
  GObjectClass parent_class;

  /* Signals */
  void (* add_widget)       (GtkUIManager *manager,
                             GtkWidget    *widget);
  void (* actions_changed)  (GtkUIManager *manager);
  void (* connect_proxy)    (GtkUIManager *manager,
			     GtkAction    *action,
			     GtkWidget    *proxy);
  void (* disconnect_proxy) (GtkUIManager *manager,
			     GtkAction    *action,
			     GtkWidget    *proxy);
  void (* pre_activate)     (GtkUIManager *manager,
			     GtkAction    *action);
  void (* post_activate)    (GtkUIManager *manager,
			     GtkAction    *action);

  /* Virtual functions */
  GtkWidget * (* get_widget) (GtkUIManager *manager,
                              const gchar  *path);
  GtkAction * (* get_action) (GtkUIManager *manager,
                              const gchar  *path);

  /* Padding for future expansion */
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
</STRUCT>
<ENUM>
<NAME>GtkUIManagerItemType</NAME>
typedef enum {
  GTK_UI_MANAGER_AUTO              = 0,
  GTK_UI_MANAGER_MENUBAR           = 1 << 0,
  GTK_UI_MANAGER_MENU              = 1 << 1,
  GTK_UI_MANAGER_TOOLBAR           = 1 << 2,
  GTK_UI_MANAGER_PLACEHOLDER       = 1 << 3,
  GTK_UI_MANAGER_POPUP             = 1 << 4,
  GTK_UI_MANAGER_MENUITEM          = 1 << 5,
  GTK_UI_MANAGER_TOOLITEM          = 1 << 6,
  GTK_UI_MANAGER_SEPARATOR         = 1 << 7,
  GTK_UI_MANAGER_ACCELERATOR       = 1 << 8,
  GTK_UI_MANAGER_POPUP_WITH_ACCELS = 1 << 9
} GtkUIManagerItemType;
</ENUM>
<FUNCTION>
<NAME>gtk_ui_manager_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType           </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_new</NAME>
<DEPRECATED/>
<RETURNS>GtkUIManager   *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_set_add_tearoffs</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkUIManager          *manager, gboolean               add_tearoffs
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_add_tearoffs</NAME>
<DEPRECATED/>
<RETURNS>gboolean        </RETURNS>
GtkUIManager          *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_insert_action_group</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkUIManager          *manager, GtkActionGroup        *action_group, gint                   pos
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_remove_action_group</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkUIManager          *manager, GtkActionGroup        *action_group
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_action_groups</NAME>
<DEPRECATED/>
<RETURNS>GList          *</RETURNS>
GtkUIManager          *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_accel_group</NAME>
<DEPRECATED/>
<RETURNS>GtkAccelGroup  *</RETURNS>
GtkUIManager          *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_widget</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget      *</RETURNS>
GtkUIManager          *manager, const gchar           *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_toplevels</NAME>
<DEPRECATED/>
<RETURNS>GSList         *</RETURNS>
GtkUIManager          *manager, GtkUIManagerItemType   types
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_action</NAME>
<DEPRECATED/>
<RETURNS>GtkAction      *</RETURNS>
GtkUIManager          *manager, const gchar           *path
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_add_ui_from_string</NAME>
<DEPRECATED/>
<RETURNS>guint           </RETURNS>
GtkUIManager          *manager, const gchar           *buffer, gssize                 length, GError               **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_add_ui_from_file</NAME>
<DEPRECATED/>
<RETURNS>guint           </RETURNS>
GtkUIManager          *manager, const gchar           *filename, GError               **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_add_ui_from_resource</NAME>
<DEPRECATED/>
<RETURNS>guint           </RETURNS>
GtkUIManager          *manager, const gchar           *resource_path, GError               **error
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_add_ui</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkUIManager          *manager, guint                  merge_id, const gchar           *path, const gchar           *name, const gchar           *action, GtkUIManagerItemType   type, gboolean               top
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_remove_ui</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkUIManager          *manager, guint                  merge_id
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_get_ui</NAME>
<DEPRECATED/>
<RETURNS>gchar          *</RETURNS>
GtkUIManager          *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_ensure_update</NAME>
<DEPRECATED/>
<RETURNS>void            </RETURNS>
GtkUIManager          *manager
</FUNCTION>
<FUNCTION>
<NAME>gtk_ui_manager_new_merge_id</NAME>
<DEPRECATED/>
<RETURNS>guint           </RETURNS>
GtkUIManager          *manager
</FUNCTION>
<STRUCT>
<NAME>GtkUIManagerPrivate</NAME>
</STRUCT>
<MACRO>
<NAME>GTK_TYPE_VBUTTON_BOX</NAME>
#define GTK_TYPE_VBUTTON_BOX            (gtk_vbutton_box_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VBUTTON_BOX</NAME>
#define GTK_VBUTTON_BOX(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBox))
</MACRO>
<MACRO>
<NAME>GTK_VBUTTON_BOX_CLASS</NAME>
#define GTK_VBUTTON_BOX_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VBUTTON_BOX, GtkVButtonBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VBUTTON_BOX</NAME>
#define GTK_IS_VBUTTON_BOX(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VBUTTON_BOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_VBUTTON_BOX_CLASS</NAME>
#define GTK_IS_VBUTTON_BOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VBUTTON_BOX))
</MACRO>
<MACRO>
<NAME>GTK_VBUTTON_BOX_GET_CLASS</NAME>
#define GTK_VBUTTON_BOX_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VBUTTON_BOX, GtkVButtonBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkVButtonBox</NAME>
struct _GtkVButtonBox
{
  GtkButtonBox button_box;
};
</STRUCT>
<STRUCT>
<NAME>GtkVButtonBoxClass</NAME>
struct _GtkVButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_vbutton_box_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_vbutton_box_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  *</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_VBOX</NAME>
#define GTK_TYPE_VBOX		 (gtk_vbox_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VBOX</NAME>
#define GTK_VBOX(obj)		 (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VBOX, GtkVBox))
</MACRO>
<MACRO>
<NAME>GTK_VBOX_CLASS</NAME>
#define GTK_VBOX_CLASS(klass)	 (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VBOX, GtkVBoxClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VBOX</NAME>
#define GTK_IS_VBOX(obj)	 (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VBOX))
</MACRO>
<MACRO>
<NAME>GTK_IS_VBOX_CLASS</NAME>
#define GTK_IS_VBOX_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VBOX))
</MACRO>
<MACRO>
<NAME>GTK_VBOX_GET_CLASS</NAME>
#define GTK_VBOX_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VBOX, GtkVBoxClass))
</MACRO>
<STRUCT>
<NAME>GtkVBox</NAME>
struct _GtkVBox
{
  GtkBox box;
};
</STRUCT>
<STRUCT>
<NAME>GtkVBoxClass</NAME>
struct _GtkVBoxClass
{
  GtkBoxClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_vbox_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_vbox_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  * </RETURNS>
gboolean homogeneous, gint     spacing
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_VPANED</NAME>
#define GTK_TYPE_VPANED            (gtk_vpaned_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VPANED</NAME>
#define GTK_VPANED(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VPANED, GtkVPaned))
</MACRO>
<MACRO>
<NAME>GTK_VPANED_CLASS</NAME>
#define GTK_VPANED_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VPANED, GtkVPanedClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VPANED</NAME>
#define GTK_IS_VPANED(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VPANED))
</MACRO>
<MACRO>
<NAME>GTK_IS_VPANED_CLASS</NAME>
#define GTK_IS_VPANED_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VPANED))
</MACRO>
<MACRO>
<NAME>GTK_VPANED_GET_CLASS</NAME>
#define GTK_VPANED_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VPANED, GtkVPanedClass))
</MACRO>
<STRUCT>
<NAME>GtkVPaned</NAME>
struct _GtkVPaned
{
  GtkPaned paned;
};
</STRUCT>
<STRUCT>
<NAME>GtkVPanedClass</NAME>
struct _GtkVPanedClass
{
  GtkPanedClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_vpaned_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType        </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_vpaned_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget  * </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_VSCALE</NAME>
#define GTK_TYPE_VSCALE            (gtk_vscale_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VSCALE</NAME>
#define GTK_VSCALE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VSCALE, GtkVScale))
</MACRO>
<MACRO>
<NAME>GTK_VSCALE_CLASS</NAME>
#define GTK_VSCALE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VSCALE, GtkVScaleClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VSCALE</NAME>
#define GTK_IS_VSCALE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VSCALE))
</MACRO>
<MACRO>
<NAME>GTK_IS_VSCALE_CLASS</NAME>
#define GTK_IS_VSCALE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VSCALE))
</MACRO>
<MACRO>
<NAME>GTK_VSCALE_GET_CLASS</NAME>
#define GTK_VSCALE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VSCALE, GtkVScaleClass))
</MACRO>
<STRUCT>
<NAME>GtkVScale</NAME>
struct _GtkVScale
{
  GtkScale scale;
};
</STRUCT>
<STRUCT>
<NAME>GtkVScaleClass</NAME>
struct _GtkVScaleClass
{
  GtkScaleClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_vscale_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_vscale_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkAdjustment *adjustment
</FUNCTION>
<FUNCTION>
<NAME>gtk_vscale_new_with_range</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
gdouble        min, gdouble        max, gdouble        step
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_VSCROLLBAR</NAME>
#define GTK_TYPE_VSCROLLBAR            (gtk_vscrollbar_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VSCROLLBAR</NAME>
#define GTK_VSCROLLBAR(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbar))
</MACRO>
<MACRO>
<NAME>GTK_VSCROLLBAR_CLASS</NAME>
#define GTK_VSCROLLBAR_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VSCROLLBAR, GtkVScrollbarClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VSCROLLBAR</NAME>
#define GTK_IS_VSCROLLBAR(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VSCROLLBAR))
</MACRO>
<MACRO>
<NAME>GTK_IS_VSCROLLBAR_CLASS</NAME>
#define GTK_IS_VSCROLLBAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VSCROLLBAR))
</MACRO>
<MACRO>
<NAME>GTK_VSCROLLBAR_GET_CLASS</NAME>
#define GTK_VSCROLLBAR_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VSCROLLBAR, GtkVScrollbarClass))
</MACRO>
<STRUCT>
<NAME>GtkVScrollbar</NAME>
struct _GtkVScrollbar
{
  GtkScrollbar scrollbar;
};
</STRUCT>
<STRUCT>
<NAME>GtkVScrollbarClass</NAME>
struct _GtkVScrollbarClass
{
  GtkScrollbarClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_vscrollbar_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_vscrollbar_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
GtkAdjustment *adjustment
</FUNCTION>
<MACRO>
<NAME>GTK_TYPE_VSEPARATOR</NAME>
#define GTK_TYPE_VSEPARATOR                  (gtk_vseparator_get_type ())
</MACRO>
<MACRO>
<NAME>GTK_VSEPARATOR</NAME>
#define GTK_VSEPARATOR(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_VSEPARATOR, GtkVSeparator))
</MACRO>
<MACRO>
<NAME>GTK_VSEPARATOR_CLASS</NAME>
#define GTK_VSEPARATOR_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_VSEPARATOR, GtkVSeparatorClass))
</MACRO>
<MACRO>
<NAME>GTK_IS_VSEPARATOR</NAME>
#define GTK_IS_VSEPARATOR(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_VSEPARATOR))
</MACRO>
<MACRO>
<NAME>GTK_IS_VSEPARATOR_CLASS</NAME>
#define GTK_IS_VSEPARATOR_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_VSEPARATOR))
</MACRO>
<MACRO>
<NAME>GTK_VSEPARATOR_GET_CLASS</NAME>
#define GTK_VSEPARATOR_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_VSEPARATOR, GtkVSeparatorClass))
</MACRO>
<STRUCT>
<NAME>GtkVSeparator</NAME>
struct _GtkVSeparator
{
  GtkSeparator separator;
};
</STRUCT>
<STRUCT>
<NAME>GtkVSeparatorClass</NAME>
struct _GtkVSeparatorClass
{
  GtkSeparatorClass parent_class;
};
</STRUCT>
<FUNCTION>
<NAME>gtk_vseparator_get_type</NAME>
<DEPRECATED/>
<RETURNS>GType       </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>gtk_vseparator_new</NAME>
<DEPRECATED/>
<RETURNS>GtkWidget * </RETURNS>
void
</FUNCTION>
