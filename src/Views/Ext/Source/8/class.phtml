<?php

$has_members = false;//count($this->members);

?>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <php.h>
#include <php_ini.h>
#include <zend_interfaces.h>
#include <ext/standard/info.h>


<?php foreach($this->requires as $require): ?>
<?php echo '#include <' . $require .'>' . PHP_EOL; ?>
<?php endforeach; ?>

#include "php_gtk.h"

<?php foreach($this->uses as $use): ?>
<?php echo '#include "' . $use .'"' . PHP_EOL; ?>
<?php endforeach; ?>


extern HashTable         classes;
extern zend_module_entry gtk_module_entry;


zend_class_entry     *php_<?php echo $name_function ?>_class_entry;// class
zend_object_handlers  php_<?php echo $name_function ?>_handlers;

<?php //echo $this->implementation->writeDefine(); ?>

/*----------------------------------------------------------------------+
 | Internal                                                             |
 +----------------------------------------------------------------------*/

static const zend_function_entry
php_<?php echo $name_function ?>_methods[] = {
    PHP_ME(<?php echo $name_function ?>, __construct, arginfo_<?php echo $name_function ?>___construct, ZEND_ACC_PUBLIC)
    PHP_FE_END
};

<?php echo $this->render('utils-function.phtml', $this->vars()); ?>

/*----------------------------------------------------------------------+
 | Zend Handler                                                         |
 +----------------------------------------------------------------------*/

<?php if(isset($this->vtable)): ?>
<?php   include("override.phtml") ?>
<?php endif;?>


<?php /** Allow to override each handler through [Version[/Package[/Object]]] */ ?>
<?php echo $this->render('class_handlers/create_object.phtml', $this->vars()); ?>

<?php echo $this->render('object_handlers/dtor_object.phtml', $this->vars()); ?>

<?php
    echo $this->render('object_handlers/free_object.phtml', $this->vars());
?>

<?php
    $read_property = $this->render('object_handlers/read_property.phtml', $this->vars());
    echo $read_property;

    $write_property = $this->render('object_handlers/write_property.phtml', $this->vars());
    echo $write_property;

    /*$debug_property = $this->render('object_handlers/get_debug_info.phtml', $this->vars());
    echo $debug_property;*/
?>

<?php //echo $this->render('object_handlers/get_debug_info.phtml', $this->vars()); ?>


<?php if($has_members): ?>
<?php   include("handler-lookup-property.phtml") ?>
<?php   include("handler-read_property.phtml") ?>
<?php   include("handler-write_property.phtml") ?>
<?php endif; ?>


<?php /*if ($this->implementation->enable_debug): ?>
<?php   include("handler-get_debug_info.phtml") ?>
<?php endif;*/ ?>


static zend_object_handlers*
php_<?php echo $name_function ?>_get_handlers()
{
    memcpy(&php_<?php echo $name_function ?>_handlers, zend_get_std_object_handlers(), sizeof(zend_object_handlers));
    php_<?php echo $name_function ?>_handlers.offset = PHP_<?php echo $name_macro ?>_OFFSET;
    php_<?php echo $name_function ?>_handlers.dtor_obj = php_<?php echo $name_function ?>_dtor_object;
    php_<?php echo $name_function ?>_handlers.free_obj = php_<?php echo $name_function ?>_free_object;

<?php if($read_property): ?>
    php_<?php echo $name_function ?>_handlers.read_property = php_<?php echo $name_function ?>_read_property;
<?php endif; ?>
<?php if($write_property): ?>
    php_<?php echo $name_function ?>_handlers.write_property = php_<?php echo $name_function ?>_write_property;
<?php endif; ?>

<?php /*if ($this->implementation->enable_debug): ?>
    php_<?php echo $name_function ?>_handlers.get_debug_info = php_<?php echo $name_function ?>_get_debug_info;
<?php endif;*/ ?>


    return &php_<?php echo $name_function ?>_handlers;
}

/*----------------------------------------------------------------------+
 | PHP_MINIT                                                            |
 +----------------------------------------------------------------------*/

 /*{{{ php_<?php echo $name_function ?>_class_init */
zend_class_entry*
php_<?php echo $name_function ?>_class_init(zend_class_entry *container_ce, zend_class_entry *parent_ce) {
    php_<?php echo $name_function ?>_get_handlers();
    PHP_GTK_INIT_CLASS_ENTRY((*container_ce), "<?php echo $this->name ?>", php_<?php echo $name_function ?>_methods);
    php_<?php echo $name_function ?>_class_entry = zend_register_internal_class_ex(container_ce, parent_ce);
    php_<?php echo $name_function ?>_class_entry->create_object = php_<?php echo $name_function ?>_create_object;

<?php
    foreach($fields as $field) {
        switch ($field->type) {
            case 'bool':
                echo '    zend_declare_property_bool(php_'. $name_function .'_class_entry, "'. $field->name .'", sizeof("'. $field->name .'") - 1, false, ZEND_ACC_PUBLIC);'.PHP_EOL;
                break;
            case 'int':
                echo '    zend_declare_property_long(php_'. $name_function .'_class_entry, "'. $field->name .'", sizeof("'. $field->name .'") - 1, 0, ZEND_ACC_PUBLIC);'.PHP_EOL;
                break;
            case 'float':
                echo '    zend_declare_property_double(php_'. $name_function .'_class_entry, "'. $field->name .'", sizeof("'. $field->name .'") - 1, 0.0, ZEND_ACC_PUBLIC);'.PHP_EOL;
                break;
            case 'string':
                echo '    zend_declare_property_string(php_'. $name_function .'_class_entry, "'. $field->name .'", sizeof("'. $field->name .'") - 1, "", ZEND_ACC_PUBLIC);'.PHP_EOL;
                break;
            case 'array':
?>    zend_declare_property_array(php_<?php echo $name_function ?>_class_entry, "<?php echo $field->name ?>", sizeof("<?php echo $field->name ?>") - 1, ..., ZEND_ACC_PUBLIC);
<?php
                break;
            case 'object':
            default:
?>
	{
		zend_string *name = zend_string_init("<?php echo $field->name; ?>", sizeof("<?php echo $field->name; ?>") - 1, 1);
		zend_string *class_name = zend_string_init("<?php echo $field->type; ?>", sizeof("<?php echo $field->type; ?>") - 1, 1);
		zval val;
		ZVAL_NULL(&val);
		zend_declare_typed_property(
			php_<?php echo $name_function ?>_class_entry, name, &val, ZEND_ACC_PUBLIC, NULL,
			(zend_type) ZEND_TYPE_INIT_CLASS(class_name, 1, 0));
		zend_string_release(name);
	}
<?php
                break;
        }
    }
?>


    return php_<?php echo $name_function ?>_class_entry;
}/*}}} */

/*----------------------------------------------------------------------+
 | Zend-User utils                                                      |
 +----------------------------------------------------------------------*/
<?php
//echo $this->implementation->writeFunctions(false);
?>

/*----------------------------------------------------------------------+
 | Zend-User API                                                        |
 +----------------------------------------------------------------------*/
<?php echo $this->render('user-function.phtml', $this->vars()); ?>

/*----------------------------------------------------------------------+
 | PHP_METHOD                                                           |
 +----------------------------------------------------------------------*/

PHP_METHOD(<?php echo $name_function ?>, __construct)/* {{{ */
{
    zend_object *zobj = Z_OBJ_P(getThis());
    php_<?php echo $name_function ?> *self = ZOBJ_TO_PHP_<?php echo $name_macro ?>(zobj);
    self->ptr = <?php echo $name_function ?>_new();

}/* }}} */

/*----------------------------------------------------------------------+
 | PHP_FUNCTION                                                         |
 +----------------------------------------------------------------------*/

<?php
    $contextObject = $this->resolver()->contextObject;
    foreach($functions as $function) {
        $this->resolver()->contextObject = $contextObject . '/' . $function->name;// //$this->resolver()->setContextFunction($function->name);
        echo $this->render('function.phtml', (array)$function);
    }
    $this->resolver()->contextObject = $contextObject;//$this->resolver()->clearContextFunction();
?>
