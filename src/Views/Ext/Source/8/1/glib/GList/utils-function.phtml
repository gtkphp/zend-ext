enum _php_g_list_properties {
    PHP_G_LIST_DATA = 1,
    PHP_G_LIST_NEXT = 2,
    PHP_G_LIST_PREV = 3
};

static void
php_g_list_setter_mixed(php_g_list *intern, zval *value, char *name, zval *dest) {
    ZVAL_COPY(dest, value);//"mixed"
}

static void
php_g_list_setter_php_glist(php_g_list *intern, zval *value, char *name, zval *dest) {
    ZVAL_COPY(dest, value);//"php_GList"
}

struct PhpGListProperty {
  const char *name;
  int code;
  void (*setter) (php_g_list *intern, zval *rvalue, char *name, zval *dest);
};

static const struct PhpGListProperty php_g_list_properties[] = {
    {"data", PHP_G_LIST_DATA, php_g_list_setter_mixed},
    {"next", PHP_G_LIST_NEXT, php_g_list_setter_php_glist},
    {"prev", PHP_G_LIST_PREV, php_g_list_setter_php_glist}
};


const struct PhpGListProperty*
php_g_list_properties_lookup (const char *str, size_t len)
{
    if (len == 4) {
        if (str[0] == 'd' && str[1] == 'a' && str[2] == 't' && str[3] == 'a') {
            return &php_g_list_properties[0];
        } else if (str[0] == 'n' && str[1] == 'e' && str[2] == 'x' && str[3] == 't') {
            return &php_g_list_properties[1];
        } else if (str[0] == 'p' && str[1] == 'r' && str[2] == 'e' && str[3] == 'v') {
            return &php_g_list_properties[2];
        }
    }
    return 0;
}
