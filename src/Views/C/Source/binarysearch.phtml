//rename by binarysearch_access_properties.phtml

<?php foreach ($this->properties as $property=>$type):
    $property_name = strtolower($property);
    $property_name = str_replace('-', '_', $property_name);
?>


static void
php_<?php echo $this->nameFunction ?>_getter_<?php echo $property_name ?>(php_<?php echo $this->nameFunction ?> *intern, zval *rvalue) {
<?php if (trim($type)=='zend_double'): ?>
    ZVAL_DOUBLE(rvalue, intern->ptr-><?php echo $property_name ?>);
<?php elseif(trim($type)=='zend_long'): ?>
    ZVAL_LONG(rvalue, intern->ptr-><?php echo $property_name ?>);
<?php elseif(trim($type)=='zval'): ?>
    ZVAL_COPY(rvalue, intern->ptr-><?php echo $property_name ?>);
<?php endif; ?>
}

static void
php_<?php echo $this->nameFunction ?>_setter_<?php echo $property_name ?>(php_<?php echo $this->nameFunction ?> *intern, zval *value) {
<?php if (trim($type)=='zend_double'): ?>
    if (Z_TYPE_P(value)==IS_DOUBLE)
        intern->ptr-><?php echo $property_name ?> = value->value.dval;
    else {
        zend_bool strict_types = ZEND_CALL_USES_STRICT_TYPES(EG(current_execute_data));
        int allow_errors = -1;
        double dval;
        if (!strict_types && Z_TYPE_P(value)==IS_STRING
         && is_numeric_string(Z_STRVAL_P(value), Z_STRLEN_P(value), NULL, &dval, allow_errors) ) {
            intern->ptr-><?php echo $property_name ?> = dval;
            return;
        }
        zend_string *type = zend_zval_get_type(value);
        zend_internal_type_error(1, "Cannot assign %s to property \\<?php echo $this->nameFunction ?>::$<?php echo $property_name ?> of type float,", type->val);
    }
<?php elseif(trim($type)=='zend_long'): ?>
    if (Z_TYPE_P(value)==IS_LONG)
        intern->ptr-><?php echo $property_name ?> = value->value.lval;
    else {
        zend_bool strict_types = ZEND_CALL_USES_STRICT_TYPES(EG(current_execute_data));
        int allow_errors = -1;
        zend_long lval;
        if (!strict_types && Z_TYPE_P(value)==IS_STRING
         && is_numeric_string(Z_STRVAL_P(value), Z_STRLEN_P(value), NULL, &lval, allow_errors) ) {
            intern->ptr-><?php echo $property_name ?> = lval;
            return;
        }
        zend_string *type = zend_zval_get_type(value);
        zend_internal_type_error(1, "Cannot assign %s to property \\<?php echo $this->nameFunction ?>::$<?php echo $property_name ?> of type int,", type->val);
    }
<?php elseif(trim($type)=='zval'): ?>
    ZVAL_COPY(intern->ptr-><?php echo $property_name ?>, value);
<?php endif; ?>
}


<?php endforeach; ?>

enum _php_<?php echo $this->nameFunction ?>_properties {
<?php
$i=1;
$glue = '    ';
foreach ($this->properties as $property=>$type) {
    $name = strtoupper($property);
    $name = str_replace('-', '_', $name);
    echo $glue . 'PHP_'. $this->nameMacro .'_'.$name.' = '. $i++ ;
    $glue = ','.PHP_EOL.'    ';
}
?>

};
//typedef enum php_<?php echo $this->nameFunction ?>_properties php_<?php echo $this->nameFunction ?>_properties;

struct Php<?php echo $this->nameType ?>Property {
  const char *name;
  int code;
  void (*getter) (php_<?php echo $this->nameFunction ?> *intern, zval *value);
  void (*setter) (php_<?php echo $this->nameFunction ?> *intern, zval *rvalue);
};

static const struct Php<?php echo $this->nameType ?>Property php_<?php echo $this->nameFunction ?>_properties[] = {
<?php
$glue = '    ';
foreach ($this->properties as $property=>$type) {
    $name = strtoupper($property);
    $name = str_replace('-', '_', $name);
    $getter = 'php_'.$this->nameFunction.'_getter_'.strtolower($name);
    $setter = 'php_'.$this->nameFunction.'_setter_'.strtolower($name);
    echo $glue . '{"'.$property.'", PHP_'. $this->nameMacro .'_'.$name.', '.$getter.', '.$setter.'}';
    $glue = ','.PHP_EOL.'    ';
}
?>

};

<?php echo $this->lookupHelper($this); ?>

