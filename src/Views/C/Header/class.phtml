
#define PHP_<?php echo $this->nameMacro ?>(ptr)           ((php_<?php echo $this->nameFunction ?>*)(ptr))
#define PHP_<?php echo $this->nameMacro ?>_CLASS          php_<?php echo $this->nameFunction ?>_class_entry
#define PHP_<?php echo $this->nameMacro ?>_OFFSET         (sizeof(php_<?php echo $this->nameFunction ?>) - sizeof(zend_object))

#define ZOBJ_IS_PHP_<?php echo $this->nameMacro ?>(obj)   ((obj)!=NULL && obj->ce == php_<?php echo $this->nameFunction ?>_class_entry)
#define ZOBJ_TO_PHP_<?php echo $this->nameMacro ?>(std)   PHP_<?php echo $this->nameMacro ?>( ((void*)(std))-PHP_<?php echo $this->nameMacro ?>_OFFSET )

#define ZVAL_IS_PHP_<?php echo $this->nameMacro ?>(val)   ((val)!=NULL && Z_TYPE_P(val)==IS_OBJECT && ZOBJ_IS_PHP_<?php echo $this->nameMacro ?>((val)->value.obj))
#define ZVAL_GET_PHP_<?php echo $this->nameMacro ?>(val)  (((val)==NULL || ZVAL_IS_NULL(val)) ? NULL : ZOBJ_TO_PHP_<?php echo $this->nameMacro ?>((val)->value.obj))

#define ZVAL_SET_PHP_<?php echo $this->nameMacro ?>(z, o) do {  \
        if (o==NULL) {                              \
            ZVAL_NULL(z);                           \
        } else {                                    \
            zval *__z = (z);                        \
            Z_OBJ_P(__z) = &(o)->std;               \
            Z_TYPE_INFO_P(__z) = IS_OBJECT_EX;	    \
            GC_REFCOUNT(&o->std)++;                 \
        }                                           \
    } while (0)

#define PHP_<?php echo $this->nameMacro ?>_FE() \
<?php foreach($this->methods as $name=>$method): ?>
    PHP_GTK_FE(<?php echo $name ?>,<?php echo $method->pad ?> arginfo_<?php echo $name ?>) \
<?php endforeach; ?>

#define PHP_<?php echo $this->nameMacro ?>_MINIT_FUNCTION(container_ce, parent_ce) \
    php_<?php echo $this->nameFunction ?>_class_init(container_ce, parent_ce)

#define PHP_<?php echo $this->nameMacro ?>_MSHUTDOWN_FUNCTION() { \
}

#define PHP_<?php echo $this->nameMacro ?>_RSHUTDOWN_FUNCTION() {\
}

typedef struct _php_<?php echo $this->nameFunction ?> php_<?php echo $this->nameFunction ?>;
struct _php_<?php echo $this->nameFunction ?> {
    /*
<?php foreach($this->properties as $name=>$property): ?>
     * <?php echo $property, $name, ';', PHP_EOL ?>
<?php endforeach;  ?>
     */
    <?php echo $this->name ?> *ptr;

    zend_object std;
};

<?php foreach($this->methods as $name=>$method): ?>
<?php echo $method->type ?>php_<?php echo $name ?>(<?php
    $glue = '';
    foreach($method->parameters as $parameter) {
        echo $glue, $parameter->type;
        echo $parameter->name;
        $glue = ', ';
    }
?>);
<?php endforeach; ?>

zend_class_entry *php_<?php echo $this->nameFunction ?>_class_init(zend_class_entry *container_ce, zend_class_entry *parent_ce);

ZEND_BEGIN_ARG_INFO_EX(arginfo_<?php echo $this->nameFunction ?>___construct, 0, 0, 0)
ZEND_END_ARG_INFO()
PHP_METHOD(<?php echo $this->nameFunction ?>, __construct);

<?php foreach($this->methods as $name=>$method): ?>
<?php echo $this->argHelper($method->generator); ?>
<?php if(False): ?>
ZEND_BEGIN_ARG_INFO_EX(arginfo_<?php echo $name ?>, 0, ZEND_SEND_BY_VAL, <?php echo count($method->parameters) ?>)
<?php foreach($method->parameters as $parameter): ?>
    ZEND_ARG_INFO(ZEND_SEND_BY_VAL, <?php echo $parameter->name ?>)
<?php endforeach; ?>
ZEND_END_ARG_INFO()
<?php endif; ?>
PHP_FUNCTION(<?php echo $name ?>);

<?php endforeach; ?>
