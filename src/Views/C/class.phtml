<?php echo $this->license; ?>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gtk/gtk.h>

#include "php.h"
#include "php_ini.h"
#include "zend_interfaces.h"
#include "ext/standard/info.h"

//#include "php_gtk.h"
#include "<?php echo strtolower($this->namespaceHelper($this->name)) ?>.h"

<?php /* for each parent $this->class->getExtends();
#include "widget.h"
 */ ?>


PHP_<?php echo $this->namespaceHelper($this->name) ?>_EXPORT zend_class_entry *php_<?php
    echo $this->nameclassHelper($this->name, -1);
?>_class_entry;
HashTable php_<?php
    echo $this->nameclassHelper($this->name, -1);
?>_prop_handlers;

<?php /*for each parent $this->class->getExtends();
extern HashTable php_gtk_widget_prop_handlers;
 */ ?>
extern HashTable classes;


<?php foreach($this->methods as $key=>$method): ?>
/*----------------------------------------------------------------------+
 | <?php echo sprintf("%-69s", $method->getName())             ?>|
 +----------------------------------------------------------------------*/
ZEND_BEGIN_ARG_INFO_EX(arginfo_<?php echo $method->getName() ?>, 0, 0, 0)
<?php foreach($method->getParameters() as $key=>$parameter): ?>
    ZEND_ARG_INFO(0, <?php echo $parameter->getName() ?>)
<?php endforeach; ?>
ZEND_END_ARG_INFO()
/* {{{ */
PHP_FUNCTION(<?php echo $method->getName()?>)
{
<?php foreach($method->getParameters() as $key=>$parameter): ?>
    zval <?php echo $parameter->getName() ?>;
<?php endforeach; ?>

    ZEND_PARSE_PARAMETERS_START(<?php echo count($method->getParameters()) ?>, -1)
<?php foreach($method->getParameters() as $key=>$parameter): ?>
        Z_PARAM_ZVAL(&<?php echo $parameter->getName() ?>);
<?php endforeach; ?>
    ZEND_PARSE_PARAMETERS_END();

    <?php echo $method->getName()?>(<?php
    $glue = '';
    foreach($method->getParameters() as $key=>$parameter) {
        echo $glue . $parameter->getName();
        $glue = ', ';
    }
    ?>);

}
/* }}} */

<?php endforeach; ?>



static const zend_function_entry php_<?php echo $this->nameclassHelper($this->name, -1); ?>_functions[] = {
<?php foreach($this->methods as $key=>$method): ?>
    PHP_FE(<?php echo $method->getName()
    ?>, arginfo_<?php echo $method->getName() ?>)
<?php endforeach; ?>
    PHP_FE_END
};


/*{{{ php_gobject_widget_class_init */
zend_class_entry*
php_<?php echo $this->nameclassHelper($this->name, -1); ?>_class_init(zend_class_entry *ce) {
    INIT_NS_CLASS_ENTRY((*ce), "My\\Glib", php_<?php echo $this->nameclassHelper($this->name, -1); ?>_functions);
    ce->create_object = php_<?php echo $this->nameclassHelper($this->name, -1); ?>_new_storage;
    php_<?php echo $this->nameclassHelper($this->name, -1); ?>_class_entry = zend_register_internal_class_ex(ce, NULL);
<?php //php_gobject_object_class_entry->ce_flags |= ZEND_ACC_FINAL | ZEND_ACC_ABSTRACT; ?>
    zend_hash_init(&php_<?php echo $this->nameclassHelper($this->name, -1); ?>_prop_handlers, 0, NULL, php_glib_dtor_prop_handler, 1);
<?php //php_gobject_register_prop_handler(&php_gobject_window_prop_handlers, "type", sizeof("type")-1, gtk_window_type_read, gtk_window_type_write); ?>
<?php //zend_hash_merge(&php_gobject_object_prop_handlers, &php_gobject_widget_prop_handlers, php_gobject_copy_prop_handler, 0); ?>
    zend_hash_add_ptr(&classes, ce->name, &php_<?php echo $this->nameclassHelper($this->name, -1); ?>_prop_handlers);

    return php_<?php echo $this->nameclassHelper($this->name, -1); ?>_class_entry;
}/*}}} */

