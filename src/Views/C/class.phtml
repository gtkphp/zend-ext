<?php echo $this->license; ?>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gtk/gtk.h>

#include "php.h"
#include "php_ini.h"
#include "zend_interfaces.h"
#include "ext/standard/info.h"

//#include "php_gtk.h"
#include "<?php echo strtolower($this->namespaceHelper($this->name)) ?>.h"

<?php /* for each parent $this->class->getExtends();
#include "widget.h"
 */ ?>


PHP_<?php echo $this->namespaceHelper($this->name) ?>_EXPORT zend_class_entry *php_<?php
    echo $this->nameclassHelper($this->name, -1);
?>_class_entry;
HashTable php_<?php
    echo $this->nameclassHelper($this->name, -1);
?>_prop_handlers;

<?php /*for each parent $this->class->getExtends();
extern HashTable php_gtk_widget_prop_handlers;
 */ ?>
extern HashTable classes;


<?php foreach($this->methods as $key=>$method): ?>
/*----------------------------------------------------------------------+
 | <?php echo sprintf("%-69s", $method->getName())             ?>|
 +----------------------------------------------------------------------*/
ZEND_BEGIN_ARG_INFO_EX(arginfo_<?php echo $method->getName() ?>, 0, 0, 0)
<?php foreach($method->getParameters() as $key=>$parameter): ?>
    ZEND_ARG_INFO(0, <?php echo $parameter->getName() ?>)
<?php endforeach; ?>
ZEND_END_ARG_INFO()
/* {{{ */
PHP_FUNCTION(<?php echo $method->getName()?>)
{
<?php foreach($method->getParameters() as $key=>$parameter): ?>
    zval <?php echo $parameter->getName() ?>;
<?php endforeach; ?>

    ZEND_PARSE_PARAMETERS_START(<?php echo count($method->getParameters()) ?>, -1)
<?php foreach($method->getParameters() as $key=>$parameter): ?>
        Z_PARAM_ZVAL(&<?php echo $parameter->getName() ?>);
<?php endforeach; ?>
    ZEND_PARSE_PARAMETERS_END();

    <?php echo $method->getName()?>(<?php
    $glue = '';
    foreach($method->getParameters() as $key=>$parameter) {
        echo $glue . $parameter->getName();
        $glue = ', ';
    }
    ?>);

}
/* }}} */

<?php endforeach; ?>



static const zend_function_entry php_<?php echo $this->nameclassHelper($this->name, -1); ?>_functions[] = {
<?php foreach($this->methods as $key=>$method): ?>
<?php if(strstr($method->getName(), 'g_hash_table_iter')) continue; ?>
    PHP_FE(<?php echo $method->getName()
    ?>, arginfo_<?php echo $method->getName() ?>)
<?php endforeach; ?>
    PHP_FE_END
};

static const zend_function_entry php_<?php echo $this->nameclassHelper($this->name, -1); ?>_iter_functions[] = {
<?php foreach($this->methods as $key=>$method): ?>
<?php if(!strstr($method->getName(), 'g_hash_table_iter')) continue; ?>
    PHP_FE(<?php echo $method->getName()
    ?>, arginfo_<?php echo $method->getName() ?>)
<?php endforeach; ?>
    PHP_FE_END
};

<?php

function class_init($ns, $nameClass) {
    $output = <<<EOT
/*{{{ php_{$nameClass}_class_init */
zend_class_entry*
php_{$nameClass}_class_init(zend_class_entry *ce) {
    INIT_NS_CLASS_ENTRY((*ce), "$ns", php_{$nameClass}_functions);
    ce->create_object = php_{$nameClass}_create_object;
    php_{$nameClass}_class_entry = zend_register_internal_class_ex(ce, NULL);
    zend_hash_init(&php_{$nameClass}_prop_handlers, 0, NULL, php_glib_dtor_prop_handler, 1);
    zend_hash_add_ptr(&classes, ce->name, &php_{$nameClass}_prop_handlers);
    
    return php_{$nameClass}_class_entry;
}/*}}} */
EOT;
    return $output;
}

foreach($this->class->getRelatedObjects() as $object){
    $ns = $this->vendor.$this->class->getOwnPackage()->getName();
    $nameClass = $this->nameclassHelper($object, -1);
    echo class_init($ns, $nameClass);
}

echo "\n\n";

$ns = $this->vendor.$this->class->getOwnPackage()->getName();
$nameClass = $this->nameclassHelper($this->name, -1);
echo class_init($ns, $nameClass/*call hinerited*/);
