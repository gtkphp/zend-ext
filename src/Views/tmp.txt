<?php

    public function generate_me()
    {
        $output = '';
        $methods = $this->getMethods();

        foreach ($methods as $method) {
            $output .= $method->generate_PHP_METHOD() . self::LINE_FEED;
        }

        return $output;
    }
    public function generateSource()
    {
        // generate docBlockLicence
        $naming = new Naming\GnomeStrategy();

        $output = '';
        $tab = str_repeat($this->getIndentation(), 1);

        $function_name = $naming->generateFunctionName($this);
        $type_name = $naming->generateTypeName($this);
        $type_macro = $naming->generateMacroType($this);

        // add member struct

        $output .= 'G_DEFINE_TYPE ('.$type_name.', '.$function_name.', /G_TYPE_OBJECT/);'.PHP_EOL;
        $output .= PHP_EOL;

        $output .= 'static void' . PHP_EOL;
        $output .= $function_name.'_init ('.$type_name.' *object)' . PHP_EOL;
        $output .= '{' . PHP_EOL;
        $output .= '}' . PHP_EOL;
        $output .= PHP_EOL;

        $output .= 'static void' . PHP_EOL;
        $output .= $function_name.'_class_init ('.$type_name.'Class *klass)' . PHP_EOL;
        $output .= '{' . PHP_EOL;
        $output .= '}' . PHP_EOL;
        $output .= PHP_EOL;

        $output .= $type_name.'*' . PHP_EOL;
        $output .= $function_name.'_new ()' . PHP_EOL;
        $output .= '{' . PHP_EOL;
        $output .= $tab . $type_name . ' *object = g_object_new('.$type_macro.', NULL);' . PHP_EOL;
        $output .= $tab . 'return object;' . PHP_EOL;
        $output .= '}' . PHP_EOL;
        $output .= PHP_EOL;

        // add virtual methods
        // add override methods
        // add methods
        $methods = $this->getMethods();

        foreach ($methods as $method) {
            $output .= $method->generate('source') . self::LINE_FEED;
        }



        return $output;
    }

    public function generateHeader()
    {
        $output  = '';

        $camelCaseToUnderscore = new \Zend\Filter\Word\CamelCaseToUnderscore();
        $camelCaseToDash = new \Zend\Filter\Word\CamelCaseToDash();
        $stringToLower = new \Zend\Filter\StringToLower();
        $stringToUpper = new \Zend\Filter\StringToUpper();


        $OBJECT_NS = $stringToUpper->filter($camelCaseToUnderscore->filter($this->getNamespaceName()));
        $OBJECT_NAME = $stringToUpper->filter($camelCaseToUnderscore->filter($this->getName()));

        $object_ns = $stringToLower->filter($camelCaseToUnderscore->filter($this->getNamespaceName()));
        $object_name = $stringToLower->filter($camelCaseToUnderscore->filter($this->getName()));

        $objectNs = $this->getNamespaceName();
        $objectName = $this->getName();

        $NS_OBJECT_TYPE = '';
        if ( !empty($OBJECT_NS) ) {
            $NS_OBJECT_TYPE = $OBJECT_NS . '_';
        }
        $NS_OBJECT_TYPE .= 'TYPE_' . $OBJECT_NAME;
        // $naming->generateMacroType($this);
        // $naming->generate($this, 'MacroType');
        // $this->naming('MacroType');

        $ns_object = '';
        if ( !empty($object_ns) ) {
            $ns_object = $object_ns . '_';
        }
        $ns_object .= $object_name;
        //$ns_object = $this->namingClassType();

        $nsObject = '';
        if ( !empty($objectNs) ) {
            $nsObject = $objectNs . '_';
        }
        $nsObject .= $objectName;

        // Naming(GnomeStrategy())->macroName();
        // Naming(GnomeStrategy())->className();
        // Naming(GnomeStrategy())->callName();
        // Naming(GnomeStrategy())->propertyName();
        $output .= '#define ' . $NS_OBJECT_TYPE . ' ' . $ns_object . '_get_type ()' . self::LINE_FEED;
        $output .= 'G_DECLARE_FINAL_TYPE (' . $objectNs.$objectName . ', ' . $ns_object . ', ' . $OBJECT_NS . ', ' . $OBJECT_NAME . ', ' . 'GObject' . ')' . self::LINE_FEED;

        return $output;
    }


    /**
     * @inheritDoc
     */
    public function generate_arginfo()
    {
        $camelCaseToUnderscore = new \Zend\Filter\Word\CamelCaseToUnderscore();
        $stringToLower = new \Zend\Filter\StringToLower();

        $tab = $this->getIndentation();
        $output = '';

        $object_ns = $stringToLower->filter($camelCaseToUnderscore->filter($this->getNamespaceName()));
        $object_name = $stringToLower->filter($camelCaseToUnderscore->filter($this->getName()));
        $name = $object_name;
        if (!empty($object_ns)) {
            $name = $object_ns.'_'.$object_name;
        }

        foreach ($this->getMethods() as $method) {
            $output .= $method->generate_arginfo() . self::LINE_FEED;
        }


        $output .= 'static const zend_function_entry '.$name.'_functions[] = {' . self::LINE_FEED;
        foreach ($this->getMethods() as $method) {
            $output .= $tab . $method->generate_me() . self::LINE_FEED;
        }
        $output .= $tab . 'PHP_FE_END' . self::LINE_FEED;
        $output .= '};' . self::LINE_FEED;

        return $output;
    }
