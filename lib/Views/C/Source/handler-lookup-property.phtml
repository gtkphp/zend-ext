
<?php

// TODO: property is array, is readonly, ...

$properties=array();
foreach ($this->members as $property) {
    $properties[$property->type] = $property->name;
}

foreach ($properties as $property=>$type):
    $property_name = strtolower($property);
    $property_name = str_replace(array('-', '@', '#'), ['_', '', '_'], $property_name);
    $type=$property;
?>


/** TODO: implement all the types */
/** rename it by : php_gtkml_setter_[double|long|string] */
static void
php_<?php echo $name_function ?>_setter_<?php echo $property_name ?>(php_<?php echo $name_function ?> *intern, zval *value, char *name, zval *dest) {
<?php if (trim($type)=='double' || trim($type)=='float'): ?>
    if (Z_TYPE_P(value)==IS_DOUBLE) {
        ZVAL_SET_DOUBLE(dest, value->value.dval);
    } else {
        zend_bool strict_types = ZEND_CALL_USES_STRICT_TYPES(EG(current_execute_data));
        <?php echo $this->zvaltypeHelper('value'); ?>

        if (strict_types) {
            <?php echo $this->typeerrorHelper('1', '"Cannot assign %s to property "GTK_NS_QUOTE(GTK_NS)"\\\\'. $this->name .'::$%s of type float,"', 'type_name', 'name'); ?>

        } else {
            int allow_errors = -1;
            zend_long lval=0;
            double dval=0;
            if (Z_TYPE_P(value)==IS_STRING) {
                zend_uchar z_type = is_numeric_string(Z_STRVAL_P(value), Z_STRLEN_P(value), &lval, &dval, allow_errors);
                if (z_type==IS_LONG) {
                    ZVAL_SET_DOUBLE(dest, (double)lval);
                    zend_error(E_USER_NOTICE, "Implicite %s(%s) to float(%f) convertion,", type_name, value->value.str->val, (double)lval);
                    return;
                } else if(z_type==IS_DOUBLE) {
                    ZVAL_SET_DOUBLE(dest, dval);
                    zend_error(E_USER_NOTICE, "Implicite %s(%s) to float(%f) convertion,", type_name, value->value.str->val, dval);
                    return;
                }
            }
            if (Z_TYPE_P(value)==IS_LONG) {
                ZVAL_SET_DOUBLE(dest, (double)value->value.lval);
                zend_error(E_USER_NOTICE, "Implicite int(%d) to float(%f) convertion,", (int)value->value.lval, (double)value->value.lval);
                return;
            }
            zend_error(E_USER_NOTICE, "Cannot assign %s to property "GTK_NS_QUOTE(GTK_NS)"\\<?php echo $this->name ?>::$%s of type float,", type_name, name);
        }
    }
<?php elseif(trim($type)=='zend_long' || trim($type)=='int'): ?>
    if (Z_TYPE_P(value)==IS_LONG) {
        ZVAL_SET_LONG(dest, value->value.lval);
    } else {
        zend_bool strict_types = ZEND_CALL_USES_STRICT_TYPES(EG(current_execute_data));
        zend_string *type = <?php echo $this->zvaltypeHelper('value'); ?>
        if (strict_types) {
            <?php echo $this->typeerrorHelper('1', '"Cannot assign %s to property "GTK_NS_QUOTE(GTK_NS)"\\\\'. $this->name .'::$%s of type float,"', 'type_name', 'name'); ?>

        } else {
            int allow_errors = -1;
            zend_long lval=0;
            double dval=0;
            if (Z_TYPE_P(value)==IS_STRING) {
                zend_uchar z_type = is_numeric_string(Z_STRVAL_P(value), Z_STRLEN_P(value), &lval, &dval, allow_errors);
                if (z_type==IS_LONG) {
                    ZVAL_SET_LONG(dest, lval);
                    zend_error(E_USER_NOTICE, "Implicite %s(%s) to int(%d) convertion,", type_name, value->value.str->val, lval);
                    return;
                } else if(z_type==IS_DOUBLE) {
                    ZVAL_SET_LONG(dest, (int)dval);
                    zend_error(E_USER_NOTICE, "Implicite %s(%s) to int(%d) convertion,", type_name, value->value.str->val, (int)dval);
                    return;
                }
            }
            if (Z_TYPE_P(value)==IS_DOUBLE) {
                ZVAL_SET_LONG(dest, (int)value->value.dval);
                zend_error(E_USER_WARNING, "Implicite float(%f) to int(%d) convertion,", value->value.dval, (int)value->value.dval);
                return;
            }
            zend_error(E_USER_NOTICE, "Cannot assign %s to property "GTK_NS_QUOTE(GTK_NS)"\\<?php echo $this->name ?>::$%s of type int,", type_name, name);
        }
    }
<?php elseif(trim($type)=='zval'): ?>
    ZVAL_COPY(*dest, value);
<?php else: ?>
<?php echo $this->implementation->zend_extends('setter_'.$property_name); ?>
    ZVAL_COPY(dest, value);//"<?php echo $type; ?>"
<?php endif; ?>
}


<?php endforeach; ?>


struct Php<?php echo $this->camelcaseHelper($this->name) ?>Property {
  const char *name;
  int code;
  void (*setter) (php_<?php echo $name_function ?> *intern, zval *rvalue, char *name, zval *dest);
};

static const struct Php<?php echo $this->camelcaseHelper($this->name) ?>Property php_<?php echo $name_function ?>_properties[] = {
<?php
$glue = '    ';
foreach ($this->members as $property) {
    $name = strtoupper($property->name);
    $name = str_replace('-', '_', $name);
    $property_type = str_replace(array('-', '@', '#'), ['_', '', '_'], $property->type);
    $setter = 'php_'.$name_function.'_setter_'.strtolower($property_type/*$name*/);
    echo $glue . '{"'.$property->name.'", PHP_'. $name_macro .'_'.$name.', '.$setter.'}';
    $glue = ','.PHP_EOL.'    ';
}
?>

};


<?php echo $this->lookupHelper($this); ?>
